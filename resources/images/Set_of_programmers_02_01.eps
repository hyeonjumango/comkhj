%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.0
%%For: Tom
%%CreationDate: 4/24/2021
%%BoundingBox: 0 0 423 336
%%HiResBoundingBox: 0 0 422.0854 335.9008
%%CropBox: 0 0 422.0854 335.9008
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.0.0 x60 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164519, 2020/08/25-17:54:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-04-24T20:02:07+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-04-24T20:02:07+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-04-24T20:02:07+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 25.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FVpkQbV38BucaVYbhR0H3kDDSrDc+4HyBP9MaVabj3Y/cP64aVaZx4E/Nj/AAxpWvWH8g+m&#xA;pxpXesP99r92NK2Jl7xrjSrhND3Qr8j/ALWNKqLIh+zIQfBt/wBeBV9ZR1AYe2x/HFW1kVjTofA7&#xA;HAq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVryIn2j9HfGlUXu/wCUfSclSqLTO3U1&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:0d36b74b-5c46-6647-8971-04517a371a41</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0d36b74b-5c46-6647-8971-04517a371a41</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stRef:instanceID>
            <stRef:documentID>xmp.did:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0d7bd0ce-43e5-4e30-9115-e50c86d0098e</stEvt:instanceID>
                  <stEvt:when>2021-03-09T21:20:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stEvt:instanceID>
                  <stEvt:when>2021-04-24T19:57:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0d36b74b-5c46-6647-8971-04517a371a41</stEvt:instanceID>
                  <stEvt:when>2021-04-24T20:02:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -335.901 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 335.901 li
422.085 335.901 li
422.085 0 li
cp
clp
238.345 6.6999 mo
296.871 14.5554 310.93 49.8898 337.72 55.405 cv
377.784 63.6535 420.598 69.9382 411.172 119.429 cv
401.745 168.92 377.784 181.489 386.426 223.91 cv
395.067 266.331 412.323 291.489 382.105 313.859 cv
364.843 326.637 345.918 323.933 323.284 321.229 cv
306.261 319.195 287.141 317.162 265.054 321.714 cv
213.6 332.319 153.504 348.423 58.4495 316.608 cv
-36.6048 284.792 28.9905 236.872 25.0628 199.558 cv
21.135 162.243 -14.117 149.444 6.34011 105.944 cv
51.1447 10.6701 197.44 1.20915 238.345 6.6999 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.94902 .945098 .968627 rgb
f
224.764 1.69497 mo
200.98 1.69497 166.959 4.89419 132.782 14.7151 cv
92.674 26.2399 39.8298 50.6813 15.8523 101.668 cv
3.40155 128.144 11.6369 142.617 21.1726 159.375 cv
27.0515 169.708 33.1316 180.393 34.6512 194.831 cv
35.8416 206.138 30.9202 218.035 25.7097 230.631 cv
19.0764 246.669 12.216 263.254 19.1145 278.384 cv
25.1248 291.565 40.9392 302.287 67.4632 311.164 cv
156.366 340.923 213.488 328.895 263.884 318.282 cv
267.17 317.59 270.415 316.906 273.627 316.245 cv
296.679 311.492 316.529 313.875 334.041 315.978 cv
355.395 318.541 373.841 320.753 390.343 308.539 cv
413.382 291.484 408.363 273.138 400.767 245.367 cv
398.655 237.646 396.262 228.893 394.337 219.444 cv
389.118 193.827 395.584 179.168 403.768 160.61 cv
409.176 148.349 415.304 134.453 419.08 114.633 cv
423.102 93.5158 418.053 79.0905 403.192 69.2345 cv
389.991 60.4791 370.517 56.525 351.686 52.7014 cv
349.886 52.3361 348.086 51.9699 346.292 51.6007 cv
335.66 49.4118 327.032 42.6413 317.043 34.8014 cv
301.64 22.7136 282.47 7.66959 246.976 2.90498 cv
241.441 2.16227 233.848 1.69497 224.764 1.69497 cv
174.624 331.535 mo
139.881 331.535 104.581 325.381 66.9231 312.777 cv
39.9285 303.741 23.7844 292.722 17.5681 279.088 cv
10.3635 263.287 17.3665 246.356 24.1399 229.982 cv
29.2644 217.591 34.1057 205.887 32.9607 195.01 cv
31.4783 180.924 25.488 170.397 19.6956 160.216 cv
10.3323 143.761 1.48854 128.218 14.3142 100.945 cv
24.7604 78.7321 41.4773 59.6178 64.0022 44.134 cv
82.948 31.11 105.931 20.6622 132.313 13.0812 cv
179.793 -.562334 227.033 -1.48661 247.202 1.22035 cv
283.156 6.04662 302.527 21.2492 318.092 33.4645 cv
327.913 41.1716 336.393 47.8273 346.634 49.9362 cv
348.428 50.3054 350.226 50.6706 352.024 51.0358 cv
390.316 58.8112 429.911 66.8512 420.75 114.951 cv
416.938 134.962 410.767 148.952 405.324 161.295 cv
397.26 179.577 390.891 194.018 396.002 219.104 cv
397.916 228.498 400.301 237.222 402.407 244.918 cv
409.908 272.343 415.328 292.157 391.353 309.905 cv
374.309 322.522 355.555 320.272 333.838 317.665 cv
316.455 315.578 296.752 313.215 273.969 317.909 cv
270.76 318.57 267.517 319.253 264.234 319.945 cv
240.007 325.047 212.545 330.829 180.558 331.475 cv
178.582 331.515 176.603 331.535 174.624 331.535 cv
f
256.505 202.644 mo
255.769 202.46 li
270.231 144.377 283.742 110.483 300.948 89.1266 cv
301.539 89.6022 li
284.406 110.867 270.938 144.673 256.505 202.644 cv
.345098 .521569 .478431 rgb
f
293.051 100.456 mo
293.821 94.4411 298.835 80.5793 305.984 81.5412 cv
313.134 82.5036 305.029 92.6252 299.26 96.5065 cv
295.395 99.1066 293.051 100.456 293.051 100.456 cv
cp
f
286.632 111.624 mo
289.585 106.222 295.396 101.172 302.721 100.933 cv
307.026 100.793 308.509 109.138 298.341 109.093 cv
290.858 109.06 286.632 111.624 286.632 111.624 cv
cp
f
286.964 111.089 mo
289.816 98.9567 286.35 89.9807 281.02 91.0334 cv
275.691 92.0861 278.771 99.7487 282.116 102.709 cv
285.461 105.67 286.964 111.089 286.964 111.089 cv
cp
f
280.493 124.515 mo
287.011 115.121 294.844 114.036 298.385 116.151 cv
301.925 118.265 301.095 125.022 293.684 123.735 cv
285.829 122.371 280.493 124.515 280.493 124.515 cv
cp
f
274.593 139.466 mo
287.265 126.94 298.095 132.066 297.206 136.07 cv
296.315 140.074 290.074 138.935 284.87 138.326 cv
279.666 137.716 274.593 139.466 274.593 139.466 cv
cp
f
269.446 154.613 mo
282.782 141.017 294.845 143.605 295.867 148.568 cv
296.888 153.53 292.873 154.494 283.234 152.158 cv
273.489 149.796 269.446 154.613 269.446 154.613 cv
cp
f
280.649 124.201 mo
283.118 106.823 272.279 102.261 268.539 107.003 cv
264.8 111.744 275.11 114.954 277.195 118.754 cv
279.279 122.553 280.649 124.201 280.649 124.201 cv
cp
f
275.041 138.377 mo
275.341 129.45 270.874 118.476 264.615 118.465 cv
258.356 118.454 259.038 125.22 263.782 127.517 cv
270.878 130.952 275.041 138.377 275.041 138.377 cv
cp
f
264.324 172.167 mo
269.244 164.056 284.789 158.097 290.912 163.833 cv
297.035 169.57 287.884 173.118 280.296 171.029 cv
272.707 168.939 264.324 172.167 264.324 172.167 cv
cp
f
258.745 192.171 mo
266.842 178.818 283.674 178.251 290.148 184.889 cv
296.623 191.528 284.944 193.887 275.175 189.988 cv
265.404 186.09 258.745 192.171 258.745 192.171 cv
f
269.73 152.625 mo
266.51 133.767 255.096 132.152 252.238 136.757 cv
249.38 141.362 269.73 152.625 269.73 152.625 cv
cp
f
263.801 171.908 mo
264.76 157.783 252.956 147.514 246.778 151.488 cv
240.6 155.462 253.043 160.368 256.43 163.366 cv
259.818 166.364 263.801 171.908 263.801 171.908 cv
cp
f
258.69 192.137 mo
255.022 177.672 241.113 163.133 236.116 170.077 cv
231.696 176.221 238.778 178.874 250.307 182.454 cv
256.675 184.431 258.69 192.137 258.69 192.137 cv
f
258.899 205.211 mo
258.22 204.874 li
273.822 173.525 287.17 152.267 300.226 137.977 cv
312.477 124.568 325.164 116.39 341.362 111.461 cv
341.582 112.187 li
309.521 121.943 288.658 145.416 258.899 205.211 cv
.462745 .65098 .6 rgb
f
328.806 116.57 mo
337.568 105.756 347.294 105.148 347.932 110.593 cv
348.825 118.21 328.806 116.57 328.806 116.57 cv
cp
f
317.923 122.726 mo
332.474 121.428 339.777 125.201 339.524 129.525 cv
339.271 133.849 335.462 133.991 327.82 129.173 cv
320.178 124.354 317.923 122.726 317.923 122.726 cv
cp
f
319.219 121.861 mo
324.38 114.279 324.844 103.252 317.04 103.345 cv
309.236 103.438 318.022 113.174 318.873 116.177 cv
319.682 119.034 319.219 121.861 319.219 121.861 cv
cp
f
304.729 133.829 mo
318.292 126.904 332.514 132.01 330.096 139.699 cv
327.679 147.388 321.103 137.915 315.674 136.14 cv
310.244 134.365 304.729 133.829 304.729 133.829 cv
cp
f
299.689 112.702 mo
306.421 110.24 313.21 122.612 305.404 133.108 cv
305.404 133.108 306.122 126.567 299.635 121.478 cv
293.148 116.389 296.841 113.744 299.689 112.702 cv
cp
f
289.158 152.189 mo
296.854 141.624 310.716 142.784 315.602 148.247 cv
320.49 153.71 315.413 157.242 311.376 157.016 cv
307.34 156.789 304.055 152.169 298.084 151.88 cv
292.111 151.591 289.158 152.189 289.158 152.189 cv
cp
f
292.406 147.445 mo
296.73 135.092 292.253 125.174 284.188 127.156 cv
276.123 129.138 288.264 135.762 290.084 139.928 cv
291.903 144.095 292.406 147.445 292.406 147.445 cv
cp
f
278.79 167.55 mo
299.793 155.979 309.755 165.502 307.146 171.174 cv
304.538 176.846 294.545 169.959 290.543 168.313 cv
285.462 166.222 278.79 167.55 278.79 167.55 cv
cp
f
268.315 186.263 mo
296.404 165.305 315.824 195.049 286.091 187.726 cv
275.946 185.227 268.315 186.263 268.315 186.263 cv
cp
f
271.321 180.686 mo
271.649 167.675 259.243 155.115 253.862 162.561 cv
248.482 170.006 264.813 173.306 267.423 176.444 cv
270.032 179.582 271.321 180.686 271.321 180.686 cv
f
278.79 167.55 mo
282.742 163.016 282.67 144.289 272.54 142.255 cv
262.41 140.221 268.635 153.198 272.616 157.795 cv
276.598 162.393 278.79 167.55 278.79 167.55 cv
cp
f
261.1 200.582 mo
277.21 189.45 287.931 208.767 269.443 201.089 cv
265.005 199.246 261.1 200.582 261.1 200.582 cv
cp
f
262.821 196.524 mo
264.638 187.171 257.029 178.69 251.843 183.559 cv
246.657 188.429 260.938 191.482 262.044 194.105 cv
263.15 196.728 262.821 196.524 262.821 196.524 cv
f
254.673 201.669 mo
253.917 201.604 li
255.582 182.389 250.26 140.51 218.203 119.536 cv
218.618 118.902 li
250.976 140.071 256.351 182.298 254.673 201.669 cv
.623529 .780392 .741176 rgb
f
274.842 206.486 mo
274.436 205.846 li
298.466 190.657 330.068 195.24 330.384 195.288 cv
330.27 196.037 li
329.958 195.991 298.627 191.453 274.842 206.486 cv
.345098 .521569 .478431 rgb
f
315.354 194.935 mo
325.07 190.317 330.93 189.629 334.338 194.768 cv
337.744 199.906 329.521 200.621 324.041 198.521 cv
318.56 196.42 315.354 194.935 315.354 194.935 cv
cp
f
299.327 196.612 mo
314.896 197.552 323.969 205.034 321.715 212.285 cv
319.461 219.536 313.127 206.267 309.061 202.437 cv
304.996 198.607 299.327 196.612 299.327 196.612 cv
cp
f
285.574 200.505 mo
297.624 200.879 308.444 210.61 308.492 216.032 cv
308.54 221.456 298.146 221.745 293.411 212.887 cv
288.677 204.029 285.574 200.505 285.574 200.505 cv
cp
f
300.716 196.465 mo
311.057 193.447 309.833 183.195 305.417 179.049 cv
300.996 174.896 297.381 177.389 299.106 183.257 cv
300.207 186.996 303.82 189.17 302.306 193.333 cv
301.488 195.583 300.716 196.465 300.716 196.465 cv
cp
f
285.693 200.586 mo
291.569 197.244 294.663 181.51 285.657 177.323 cv
277.425 173.496 274.837 180.821 281.989 188.155 cv
286.692 192.978 285.693 200.586 285.693 200.586 cv
f
225.116 124.444 mo
222.749 119.937 212.868 110.16 212.188 115.661 cv
211.508 121.163 225.116 124.444 225.116 124.444 cv
cp
.623529 .780392 .741176 rgb
f
235.258 134.535 mo
231.317 130.115 227.441 115.558 235.711 117.652 cv
243.979 119.746 235.258 134.535 235.258 134.535 cv
cp
f
235.258 134.535 mo
225.024 130.956 213.788 127.401 215.595 134.217 cv
217.402 141.035 235.258 134.535 235.258 134.535 cv
cp
f
243.163 146.883 mo
241.1 133.87 248.308 125.926 254.171 130.248 cv
260.032 134.569 243.163 146.883 243.163 146.883 cv
cp
f
245.302 151.514 mo
239.374 146.013 225.41 139.511 223.125 146.865 cv
220.84 154.218 245.302 151.514 245.302 151.514 cv
cp
f
248.849 160.665 mo
254.002 148.142 259.601 141.137 264.284 145.524 cv
268.967 149.91 248.849 160.665 248.849 160.665 cv
cp
f
249.369 162.582 mo
240.694 157.654 225.658 152.88 225.25 160.145 cv
224.843 167.41 249.369 162.582 249.369 162.582 cv
cp
f
252.94 175.735 mo
254.831 163.693 266.582 155.037 269.928 162.127 cv
273.275 169.216 252.94 175.735 252.94 175.735 cv
f
252.739 176.976 mo
242.076 172.865 224.664 166.046 226.22 175.101 cv
227.778 184.155 252.739 176.976 252.739 176.976 cv
f
254.008 184.599 mo
258.015 177.897 273.204 172.513 275.609 180.385 cv
278.014 188.257 254.008 184.599 254.008 184.599 cv
f
254.282 191.376 mo
252.83 188.576 236.268 179.285 234.422 185.81 cv
232.575 192.334 254.282 191.376 254.282 191.376 cv
f
166.223 219.846 mo
160.444 160.387 152.077 124.971 138.247 101.424 cv
138.901 101.04 li
152.79 124.688 161.187 160.196 166.978 219.773 cv
166.223 219.846 li
.345098 .521569 .478431 rgb
f
145.053 113.405 mo
145.172 107.342 142.244 92.8952 135.031 92.799 cv
127.818 92.7028 134.351 103.903 139.489 108.588 cv
142.931 111.727 145.053 113.405 145.053 113.405 cv
cp
f
149.765 125.393 mo
147.635 119.617 142.627 113.769 135.416 112.459 cv
131.178 111.689 128.489 119.727 138.553 121.174 cv
145.96 122.238 149.765 125.393 149.765 125.393 cv
cp
f
149.515 124.816 mo
148.471 112.396 153.216 104.025 158.334 105.848 cv
163.452 107.671 159.281 114.799 155.538 117.237 cv
151.796 119.675 149.515 124.816 149.515 124.816 cv
cp
f
153.948 139.046 mo
148.877 128.797 141.288 126.575 137.476 128.148 cv
133.663 129.721 133.494 136.526 141.013 136.34 cv
148.984 136.142 153.948 139.046 153.948 139.046 cv
cp
f
157.592 154.7 mo
146.893 140.451 135.428 143.934 135.721 148.026 cv
136.015 152.117 142.357 151.905 147.594 152.065 cv
152.83 152.225 157.592 154.7 157.592 154.7 cv
cp
f
160.463 170.437 mo
149.264 155.033 136.951 155.825 135.214 160.584 cv
133.476 165.343 137.307 166.885 147.183 165.987 cv
157.17 165.079 160.463 170.437 160.463 170.437 cv
cp
f
153.839 138.712 mo
153.945 121.159 165.335 118.235 168.34 123.474 cv
171.344 128.713 160.674 130.376 158.054 133.829 cv
155.435 137.282 153.839 138.712 153.839 138.712 cv
cp
f
157.308 153.557 mo
158.321 144.682 164.348 134.481 170.541 135.388 cv
176.733 136.295 175.067 142.888 170.038 144.464 cv
162.515 146.822 157.308 153.557 157.308 153.557 cv
cp
f
162.956 188.552 mo
159.279 179.808 144.775 171.634 137.877 176.411 cv
130.98 181.189 139.511 186.039 147.325 185.085 cv
155.138 184.131 162.956 188.552 162.956 188.552 cv
cp
f
165.543 209.158 mo
159.491 194.762 142.925 191.735 135.547 197.352 cv
128.169 202.969 139.376 207.015 149.611 204.591 cv
159.847 202.166 165.543 209.158 165.543 209.158 cv
f
160.473 168.429 mo
166.423 150.247 177.95 150.322 180.103 155.297 cv
182.255 160.271 160.473 168.429 160.473 168.429 cv
cp
f
163.512 188.373 mo
164.635 174.26 177.815 165.833 183.344 170.669 cv
188.873 175.505 175.845 178.534 172.055 181.004 cv
168.265 183.473 163.512 188.373 163.512 188.373 cv
cp
f
165.602 209.133 mo
171.351 195.362 187.241 183.019 191.166 190.621 cv
194.637 197.345 187.243 198.932 175.314 200.783 cv
168.725 201.806 165.602 209.133 165.602 209.133 cv
f
163.478 222.035 mo
142.807 158.524 125.61 132.245 95.3254 117.895 cv
95.6497 117.21 li
110.95 124.459 122.301 134.408 132.454 149.468 cv
143.275 165.519 153.363 188.503 164.2 221.801 cv
163.478 222.035 li
.462745 .65098 .6 rgb
f
107.321 124.104 mo
100.239 112.122 90.7073 110.095 89.2776 115.387 cv
87.2781 122.791 107.321 124.104 107.321 124.104 cv
cp
f
117.184 131.789 mo
102.981 128.372 95.2029 131.033 94.8196 135.348 cv
94.4358 139.662 98.1833 140.361 106.449 136.715 cv
114.715 133.068 117.184 131.789 117.184 131.789 cv
cp
f
116.029 130.742 mo
112.035 122.486 113.192 111.51 120.899 112.746 cv
128.605 113.982 118.486 122.325 117.204 125.172 cv
115.985 127.879 116.029 130.742 116.029 130.742 cv
cp
f
128.608 144.705 mo
116.207 135.868 101.389 138.833 102.654 146.793 cv
103.918 154.754 111.811 146.347 117.443 145.387 cv
123.074 144.427 128.608 144.705 128.608 144.705 cv
cp
f
136.69 124.546 mo
130.392 121.124 121.864 132.366 128.046 143.894 cv
128.046 143.894 128.295 137.318 135.457 133.235 cv
142.62 129.152 139.356 125.994 136.69 124.546 cv
cp
f
141.319 165.15 mo
135.256 153.57 121.374 152.686 115.738 157.374 cv
110.103 162.062 114.608 166.3 118.634 166.667 cv
122.66 167.035 126.586 162.946 132.536 163.536 cv
138.486 164.126 141.319 165.15 141.319 165.15 cv
cp
f
138.802 159.981 mo
136.335 147.128 142.218 137.974 149.905 141.116 cv
157.593 144.259 144.611 149.031 142.201 152.886 cv
139.791 156.741 138.802 159.981 138.802 159.981 cv
cp
f
149.324 181.864 mo
130.244 167.34 118.993 175.3 120.742 181.293 cv
122.491 187.286 133.386 181.939 137.586 180.897 cv
142.919 179.573 149.324 181.864 149.324 181.864 cv
cp
f
156.942 201.911 mo
141.23 186.112 125.98 191.1 124.79 196.088 cv
124.108 198.945 128.041 201.803 139.144 200.752 cv
149.546 199.768 156.942 201.911 156.942 201.911 cv
f
154.786 195.953 mo
156.369 183.035 170.483 172.43 174.713 180.583 cv
178.944 188.737 162.305 189.608 159.264 192.329 cv
156.223 195.051 154.786 195.953 154.786 195.953 cv
cp
f
149.324 181.864 mo
146.078 176.801 148.896 158.286 159.215 157.759 cv
169.533 157.233 161.473 169.156 156.861 173.12 cv
152.248 177.084 149.324 181.864 149.324 181.864 cv
cp
f
161.98 217.133 mo
153.69 209.382 145.691 212.014 144.21 214.646 cv
143.135 216.556 145.491 218.465 153.653 216.411 cv
158.313 215.239 161.98 217.133 161.98 217.133 cv
f
160.872 212.866 mo
160.446 203.349 169.216 196.074 173.633 201.652 cv
178.049 207.229 163.475 208.154 161.996 210.587 cv
160.517 213.02 160.872 212.866 160.872 212.866 cv
f
168.936 219.197 mo
168.179 219.151 li
169.358 199.743 180.864 158.76 215.977 142.563 cv
216.295 143.251 li
181.508 159.299 170.105 199.946 168.936 219.197 cv
.623529 .780392 .741176 rgb
f
161.055 222.392 mo
139.814 204.106 108.321 203.931 107.762 203.931 cv
107.754 203.173 li
108.02 203.173 139.992 203.26 161.55 221.818 cv
161.055 222.392 li
.345098 .521569 .478431 rgb
f
122.673 205.027 mo
113.739 199.034 108.043 197.495 103.92 202.078 cv
99.7966 206.662 107.826 208.574 113.555 207.3 cv
119.284 206.026 122.673 205.027 122.673 205.027 cv
cp
f
138.282 209.034 mo
122.742 207.683 112.671 213.754 113.838 221.257 cv
115.005 228.76 123.215 216.563 127.798 213.37 cv
132.381 210.177 138.282 209.034 138.282 209.034 cv
cp
f
151.315 214.903 mo
139.341 213.506 127.211 221.545 126.369 226.903 cv
125.527 232.261 135.765 234.07 141.747 226.001 cv
147.73 217.934 151.315 214.903 151.315 214.903 cv
cp
f
136.93 208.687 mo
127.142 204.185 129.856 194.224 134.832 190.769 cv
139.815 187.309 143.025 190.305 140.457 195.857 cv
138.822 199.395 134.928 201.015 135.815 205.355 cv
136.294 207.7 136.93 208.687 136.93 208.687 cv
cp
f
151.186 214.965 mo
145.863 210.798 145.11 194.78 154.632 191.958 cv
163.335 189.38 164.822 197.004 156.673 203.21 cv
151.313 207.292 151.186 214.965 151.186 214.965 cv
f
208.737 147.092 mo
211.739 142.981 222.946 134.758 222.812 140.3 cv
222.678 145.841 208.737 147.092 208.737 147.092 cv
cp
.623529 .780392 .741176 rgb
f
197.225 155.588 mo
201.771 151.793 207.74 137.962 199.253 138.821 cv
190.765 139.68 197.225 155.588 197.225 155.588 cv
cp
f
197.225 155.588 mo
207.873 153.548 219.509 151.678 216.722 158.156 cv
213.935 164.635 197.225 155.588 197.225 155.588 cv
cp
f
187.595 166.644 mo
191.543 154.073 185.577 145.159 179.146 148.574 cv
172.714 151.99 187.595 166.644 187.595 166.644 cv
cp
f
184.801 170.911 mo
191.471 166.339 206.237 161.954 207.42 169.563 cv
208.602 177.172 184.801 170.911 184.801 170.911 cv
cp
f
179.95 179.444 mo
176.69 166.3 172.177 158.55 166.902 162.203 cv
161.627 165.856 179.95 179.444 179.95 179.444 cv
cp
f
179.156 181.263 mo
188.459 177.66 204.032 175.142 203.371 182.388 cv
202.709 189.635 179.156 181.263 179.156 181.263 cv
cp
f
173.695 193.75 mo
173.59 181.562 163.235 171.277 158.885 177.799 cv
154.535 184.321 173.695 193.75 173.695 193.75 cv
cp
f
173.712 195.008 mo
184.862 192.504 203.086 188.312 200.218 197.04 cv
197.35 205.769 173.712 195.008 173.712 195.008 cv
f
171.339 202.362 mo
168.357 195.145 154.122 187.593 150.589 195.027 cv
147.056 202.462 171.339 202.362 171.339 202.362 cv
f
170.074 209.027 mo
171.921 206.47 189.665 199.707 190.536 206.432 cv
191.406 213.156 170.074 209.027 170.074 209.027 cv
f
262.762 156.255 mo
141.529 156.255 142.993 158.262 142.993 151.345 cv
142.993 64.1218 141.142 63.4894 147.903 63.4894 cv
269.137 63.4894 267.673 61.4826 267.673 68.3996 cv
267.673 151.345 li
267.673 154.057 265.474 156.255 262.762 156.255 cv
cp
1 1 1 rgb
f
237.883 63.7858 mo
231.096 63.7858 222.788 63.8259 212.63 63.8752 cv
195.973 63.9557 175.245 64.0558 147.903 64.0558 cv
146.594 64.0558 145.761 64.0856 145.183 64.6672 cv
143.178 66.6838 143.231 75.8664 143.407 106.292 cv
143.475 118.022 143.56 132.62 143.56 151.345 cv
143.559 151.591 li
143.557 152.822 143.578 153.488 144.087 153.996 cv
146.217 156.12 157.19 156.067 198.031 155.869 cv
214.688 155.789 235.418 155.688 262.762 155.688 cv
265.157 155.688 267.105 153.74 267.105 151.345 cv
267.106 68.1535 li
267.109 66.9221 267.088 66.2565 266.578 65.7487 cv
264.979 64.153 258.383 63.7858 237.883 63.7858 cv
cp
172.691 157.092 mo
150.858 157.092 145.167 156.674 143.287 154.798 cv
142.42 153.934 142.423 152.847 142.427 151.589 cv
142.427 151.345 li
142.427 132.624 142.343 118.027 142.274 106.299 cv
142.087 73.9138 142.042 66.2189 144.38 63.8683 cv
145.32 62.923 146.575 62.923 147.903 62.923 cv
175.242 62.923 195.969 62.8229 212.624 62.7419 cv
255.909 62.5334 264.917 62.489 267.379 64.9465 cv
268.245 65.8112 268.243 66.8976 268.239 68.1559 cv
268.239 68.3996 li
268.239 151.345 li
268.239 154.365 265.782 156.821 262.762 156.821 cv
235.421 156.821 214.692 156.922 198.036 157.002 cv
187.789 157.052 179.463 157.092 172.691 157.092 cv
cp
.933333 .894118 .85098 rgb
f
267.673 68.0998 mo
142.993 68.0998 li
142.993 65.5544 145.056 63.4894 147.603 63.4894 cv
270.423 63.4894 267.673 61.7585 267.673 68.0998 cv
cp
.266667 .258824 .266667 rgb
f
143.6 67.5329 mo
267.109 67.5329 li
267.116 66.6071 267.083 66.0886 266.684 65.6877 cv
264.712 63.7028 253.292 63.7487 210.793 63.9128 cv
194.431 63.9767 174.069 64.0558 147.603 64.0558 cv
145.566 64.0558 143.876 65.5705 143.6 67.5329 cv
cp
268.239 68.6662 mo
142.427 68.6662 li
142.427 68.0998 li
142.427 65.2453 144.749 62.923 147.603 62.923 cv
174.067 62.923 194.428 62.8434 210.788 62.78 cv
256.876 62.6008 265.18 62.5681 267.488 64.8889 cv
268.261 65.6667 268.252 66.6535 268.241 67.6974 cv
268.239 68.6662 li
cp
f
262.296 67.0373 mo
263.684 67.0373 264.316 67.173 264.316 66.5715 cv
264.316 65.1833 264.452 64.5519 263.85 64.5519 cv
262.462 64.5519 261.831 64.4162 261.831 65.0173 cv
261.831 66.4059 261.695 67.0373 262.296 67.0373 cv
cp
.745098 .752941 .760784 rgb
f
262.348 66.8029 mo
262.148 66.7199 li
262.038 66.6091 262.038 66.4299 262.148 66.319 cv
263.597 64.8698 li
263.709 64.759 263.887 64.759 263.999 64.8698 cv
264.109 64.9802 264.109 65.1594 263.999 65.2702 cv
262.549 66.7199 li
262.348 66.8029 li
cp
1 1 1 rgb
f
263.799 66.8029 mo
263.597 66.7199 li
262.148 65.2702 li
262.038 65.1594 262.038 64.9802 262.148 64.8698 cv
262.259 64.759 262.438 64.759 262.549 64.8698 cv
263.999 66.319 li
264.109 66.4299 264.109 66.6091 263.999 66.7199 cv
263.799 66.8029 li
cp
f
161.778 75.8063 mo
149.489 75.8063 li
149.332 75.8063 149.205 75.6799 149.205 75.5236 cv
149.205 75.3669 149.332 75.2399 149.489 75.2399 cv
161.778 75.2399 li
161.935 75.2399 162.061 75.3669 162.061 75.5236 cv
162.061 75.6799 161.935 75.8063 161.778 75.8063 cv
cp
.933333 .894118 .85098 rgb
f
161.778 144.505 mo
149.489 144.505 li
149.332 144.505 149.205 144.378 149.205 144.221 cv
149.205 144.065 149.332 143.938 149.489 143.938 cv
161.778 143.938 li
161.935 143.938 162.061 144.065 162.061 144.221 cv
162.061 144.378 161.935 144.505 161.778 144.505 cv
cp
f
149.489 144.505 mo
149.332 144.505 149.205 144.378 149.205 144.221 cv
149.205 75.5236 li
149.205 75.3669 149.332 75.2399 149.489 75.2399 cv
149.645 75.2399 149.772 75.3669 149.772 75.5236 cv
149.772 144.221 li
149.772 144.378 149.645 144.505 149.489 144.505 cv
cp
f
166.797 82.0969 mo
156.759 82.0969 li
156.602 82.0969 156.475 81.9704 156.475 81.8137 cv
156.475 81.6574 156.602 81.5305 156.759 81.5305 cv
166.797 81.5305 li
166.954 81.5305 167.081 81.6574 167.081 81.8137 cv
167.081 81.9704 166.954 82.0969 166.797 82.0969 cv
cp
f
166.797 138.214 mo
156.759 138.214 li
156.602 138.214 156.475 138.088 156.475 137.931 cv
156.475 137.775 156.602 137.648 156.759 137.648 cv
166.797 137.648 li
166.954 137.648 167.081 137.775 167.081 137.931 cv
167.081 138.088 166.954 138.214 166.797 138.214 cv
cp
f
156.759 138.214 mo
156.602 138.214 156.475 138.088 156.475 137.931 cv
156.475 81.8137 li
156.475 81.6574 156.602 81.5305 156.759 81.5305 cv
156.915 81.5305 157.042 81.6574 157.042 81.8137 cv
157.042 137.931 li
157.042 138.088 156.915 138.214 156.759 138.214 cv
cp
f
172.967 90.4484 mo
165.915 90.4484 li
165.759 90.4484 165.632 90.322 165.632 90.1652 cv
165.632 90.009 165.759 89.882 165.915 89.882 cv
172.967 89.882 li
173.123 89.882 173.25 90.009 173.25 90.1652 cv
173.25 90.322 173.123 90.4484 172.967 90.4484 cv
cp
f
172.967 129.862 mo
165.915 129.862 li
165.759 129.862 165.632 129.736 165.632 129.579 cv
165.632 129.423 165.759 129.296 165.915 129.296 cv
172.967 129.296 li
173.123 129.296 173.25 129.423 173.25 129.579 cv
173.25 129.736 173.123 129.862 172.967 129.862 cv
cp
f
165.915 129.862 mo
165.759 129.862 165.632 129.736 165.632 129.579 cv
165.632 90.1652 li
165.632 90.009 165.759 89.882 165.915 89.882 cv
166.072 89.882 166.198 90.009 166.198 90.1652 cv
166.198 129.579 li
166.198 129.736 166.072 129.862 165.915 129.862 cv
cp
f
173.959 129.862 mo
173.802 129.862 173.676 129.736 173.676 129.579 cv
173.676 119.82 li
173.676 119.664 173.802 119.537 173.959 119.537 cv
174.115 119.537 174.242 119.664 174.242 119.82 cv
174.242 129.579 li
174.242 129.736 174.115 129.862 173.959 129.862 cv
cp
f
176.257 100.841 mo
165.915 100.841 li
165.759 100.841 165.632 100.714 165.632 100.558 cv
165.632 100.401 165.759 100.275 165.915 100.275 cv
176.257 100.275 li
176.414 100.275 176.54 100.401 176.54 100.558 cv
176.54 100.714 176.414 100.841 176.257 100.841 cv
cp
f
175.885 77.7829 mo
151.506 77.7829 152.201 78.0724 152.201 77.1047 cv
152.201 74.0529 152.002 73.2639 152.88 73.2639 cv
177.259 73.2639 176.563 72.9743 176.563 73.9421 cv
176.563 76.9938 176.762 77.7829 175.885 77.7829 cv
cp
.619608 .74902 .847059 rgb
f
185.461 84.2868 mo
161.082 84.2868 161.778 84.5768 161.778 83.6086 cv
161.778 80.5573 161.578 79.7682 162.456 79.7682 cv
186.835 79.7682 186.139 79.4782 186.139 80.4465 cv
186.139 83.4977 186.339 84.2868 185.461 84.2868 cv
cp
.8 .533333 .164706 rgb
f
175.885 92.4245 mo
169.328 92.4245 168.797 92.6506 168.797 91.7463 cv
168.797 88.695 168.597 87.9059 169.475 87.9059 cv
176.031 87.9059 176.563 87.6799 176.563 88.5842 cv
176.563 91.6354 176.762 92.4245 175.885 92.4245 cv
cp
.839216 .447059 .227451 rgb
f
177.163 131.839 mo
170.607 131.839 170.075 132.065 170.075 131.16 cv
170.075 128.109 169.876 127.32 170.754 127.32 cv
177.31 127.32 177.842 127.094 177.842 127.998 cv
177.842 131.049 178.041 131.839 177.163 131.839 cv
cp
f
177.163 122.165 mo
170.607 122.165 170.075 122.391 170.075 121.487 cv
170.075 118.435 169.876 117.646 170.754 117.646 cv
177.31 117.646 177.842 117.42 177.842 118.324 cv
177.842 121.376 178.041 122.165 177.163 122.165 cv
cp
f
180.299 140.075 mo
161.397 140.075 161.778 140.364 161.778 139.397 cv
161.778 136.346 161.578 135.557 162.456 135.557 cv
180.299 135.557 li
180.674 135.557 180.977 135.861 180.977 136.235 cv
180.977 139.397 li
180.977 139.772 180.674 140.075 180.299 140.075 cv
cp
.8 .533333 .164706 rgb
f
202.413 140.075 mo
184.571 140.075 li
184.196 140.075 183.892 139.772 183.892 139.397 cv
183.892 136.235 li
183.892 135.861 184.196 135.557 184.571 135.557 cv
202.413 135.557 li
202.788 135.557 203.092 135.861 203.092 136.235 cv
203.092 139.397 li
203.092 139.772 202.788 140.075 202.413 140.075 cv
cp
f
226.736 112.65 mo
208.893 112.65 li
208.518 112.65 208.215 112.346 208.215 111.972 cv
208.215 108.92 208.015 108.131 208.893 108.131 cv
226.736 108.131 li
227.11 108.131 227.414 108.435 227.414 108.809 cv
227.414 111.972 li
227.414 112.346 227.11 112.65 226.736 112.65 cv
cp
.839216 .447059 .227451 rgb
f
165.237 146.481 mo
153.982 146.481 153.735 146.737 153.735 145.802 cv
153.735 142.751 153.535 141.962 154.413 141.962 cv
165.668 141.962 165.915 141.705 165.915 142.64 cv
165.915 145.802 li
165.915 146.177 165.612 146.481 165.237 146.481 cv
cp
.619608 .74902 .847059 rgb
f
223.106 77.7829 mo
178.44 77.7829 180.622 78.0954 180.622 77.1047 cv
180.622 74.0529 180.423 73.2639 181.301 73.2639 cv
225.968 73.2639 223.785 72.9514 223.785 73.9421 cv
223.785 77.1047 li
223.785 77.4792 223.481 77.7829 223.106 77.7829 cv
cp
.8 .533333 .164706 rgb
f
215.086 122.165 mo
179.344 122.165 180.977 122.44 180.977 121.556 cv
180.977 118.283 180.799 117.646 181.586 117.646 cv
215.086 117.646 li
215.422 117.646 215.694 117.918 215.694 118.254 cv
215.694 121.556 li
215.694 121.892 215.422 122.165 215.086 122.165 cv
cp
.619608 .74902 .847059 rgb
f
211.281 102.817 mo
166.614 102.817 168.797 103.13 168.797 102.139 cv
168.797 99.0871 168.597 98.298 169.475 98.298 cv
214.141 98.298 211.959 97.9855 211.959 98.9763 cv
211.959 102.139 li
211.959 102.513 211.655 102.817 211.281 102.817 cv
cp
f
241.871 77.7829 mo
231.537 77.7829 231.69 77.9479 231.69 77.3762 cv
231.69 73.6872 231.53 73.2639 232.096 73.2639 cv
242.431 73.2639 242.277 73.0988 242.277 73.6701 cv
242.277 77.3596 242.438 77.7829 241.871 77.7829 cv
cp
.8 .533333 .164706 rgb
f
254.565 77.7829 mo
244.23 77.7829 244.384 77.9479 244.384 77.3762 cv
244.384 73.6872 244.223 73.2639 244.791 73.2639 cv
255.125 73.2639 254.971 73.0988 254.971 73.6701 cv
254.971 77.3596 255.132 77.7829 254.565 77.7829 cv
cp
.839216 .447059 .227451 rgb
f
308.206 233.942 mo
202.396 233.942 204.465 235.56 204.465 230.073 cv
204.465 168.273 203.004 167.216 208.333 167.216 cv
314.143 167.216 312.075 165.598 312.075 171.085 cv
312.075 230.073 li
312.075 232.21 310.342 233.942 308.206 233.942 cv
1 1 1 rgb
f
287.095 167.561 mo
281.269 167.561 274.113 167.593 265.337 167.633 cv
250.725 167.7 232.543 167.783 208.334 167.783 cv
207.217 167.783 206.652 167.851 206.25 168.256 cv
204.73 169.786 204.775 176.927 204.911 198.122 cv
204.965 206.457 205.031 216.829 205.031 230.073 cv
205.029 230.387 li
205.023 231.259 205.035 231.731 205.378 232.073 cv
207.026 233.727 216.384 233.683 251.202 233.525 cv
265.812 233.458 283.996 233.375 308.207 233.375 cv
310.027 233.375 311.508 231.894 311.508 230.073 cv
311.509 170.772 li
311.516 169.9 311.504 169.428 311.161 169.085 cv
309.928 167.848 304.38 167.561 287.095 167.561 cv
229.179 234.732 mo
210.412 234.732 206.088 234.391 204.576 232.874 cv
203.883 232.179 203.889 231.304 203.896 230.378 cv
203.898 230.073 li
203.898 216.833 203.831 206.462 203.778 198.13 cv
203.629 174.853 203.593 169.322 205.447 167.457 cv
206.19 166.71 207.152 166.65 208.334 166.65 cv
232.54 166.65 250.721 166.567 265.331 166.5 cv
303.165 166.327 309.98 166.296 311.964 168.285 cv
312.656 168.98 312.649 169.854 312.643 170.779 cv
312.641 171.085 li
312.641 230.073 li
312.641 232.519 310.652 234.508 308.207 234.508 cv
283.999 234.508 265.817 234.591 251.208 234.657 cv
242.239 234.698 235.012 234.732 229.179 234.732 cv
.933333 .894118 .85098 rgb
f
312.075 170.532 mo
204.465 170.532 li
204.465 168.701 205.95 167.216 207.781 167.216 cv
315.78 167.216 312.075 165.962 312.075 170.532 cv
cp
.266667 .258824 .266667 rgb
f
205.09 169.966 mo
311.519 169.966 li
311.533 169.429 311.519 169.15 311.317 168.943 cv
309.936 167.527 300.096 167.558 263.492 167.678 cv
249.113 167.725 231.219 167.783 207.781 167.783 cv
206.458 167.783 205.351 168.721 205.09 169.966 cv
cp
312.641 171.099 mo
203.898 171.099 li
203.898 170.532 li
203.898 168.392 205.639 166.65 207.781 166.65 cv
231.218 166.65 249.11 166.592 263.488 166.545 cv
304.161 166.413 310.413 166.393 312.128 168.152 cv
312.688 168.726 312.669 169.429 312.649 170.109 cv
312.645 170.243 312.641 170.386 312.641 170.532 cv
312.641 171.099 li
cp
f
307.399 169.769 mo
308.331 169.769 309.177 169.961 309.177 169.402 cv
309.177 168.727 309.336 167.981 308.811 167.981 cv
307.88 167.981 307.033 167.788 307.033 168.347 cv
307.033 169.023 306.875 169.769 307.399 169.769 cv
cp
.745098 .752941 .760784 rgb
f
307.48 169.679 mo
307.262 169.577 li
307.162 169.457 307.178 169.279 307.299 169.178 cv
308.55 168.135 li
308.669 168.036 308.847 168.051 308.948 168.172 cv
309.049 168.292 309.032 168.471 308.912 168.571 cv
307.661 169.613 li
307.48 169.679 li
cp
1 1 1 rgb
f
308.731 169.679 mo
308.55 169.613 li
307.299 168.571 li
307.178 168.471 307.162 168.292 307.262 168.172 cv
307.363 168.051 307.542 168.036 307.661 168.135 cv
308.912 169.178 li
309.032 169.279 309.049 169.457 308.948 169.577 cv
308.731 169.679 li
cp
f
248.78 229.349 mo
247.929 229.349 247.523 229.262 247.523 228.704 cv
247.523 226.865 247.338 226.006 248.15 226.006 cv
248.725 226.006 249.203 225.988 249.59 225.988 cv
250.442 225.988 250.848 226.075 250.848 226.634 cv
250.848 228.473 251.033 229.331 250.22 229.331 cv
249.646 229.331 249.166 229.349 248.78 229.349 cv
.454902 .411765 .407843 rgb
f
241.467 229.349 mo
240.616 229.349 240.21 229.262 240.21 228.704 cv
240.21 226.865 240.025 226.006 240.838 226.006 cv
241.412 226.006 241.891 225.988 242.278 225.988 cv
243.129 225.988 243.535 226.075 243.535 226.634 cv
243.535 228.473 243.719 229.331 242.908 229.331 cv
242.333 229.331 241.854 229.349 241.467 229.349 cv
f
233.679 229.349 mo
232.828 229.349 232.422 229.262 232.422 228.704 cv
232.422 226.865 232.237 226.006 233.05 226.006 cv
233.624 226.006 234.103 225.988 234.49 225.988 cv
235.341 225.988 235.748 226.075 235.748 226.634 cv
235.748 228.473 235.932 229.331 235.12 229.331 cv
234.545 229.331 234.066 229.349 233.679 229.349 cv
f
227.298 229.349 mo
226.447 229.349 226.041 229.262 226.041 228.704 cv
226.041 226.865 225.856 226.006 226.669 226.006 cv
227.243 226.006 227.722 225.988 228.109 225.988 cv
228.96 225.988 229.366 226.075 229.366 226.634 cv
229.366 228.473 229.551 229.331 228.739 229.331 cv
228.164 229.331 227.685 229.349 227.298 229.349 cv
f
219.833 229.349 mo
218.982 229.349 218.577 229.262 218.577 228.704 cv
218.577 226.865 218.392 226.006 219.204 226.006 cv
219.778 226.006 220.257 225.988 220.644 225.988 cv
221.496 225.988 221.902 226.075 221.902 226.634 cv
221.902 228.473 222.087 229.331 221.274 229.331 cv
220.699 229.331 220.22 229.349 219.833 229.349 cv
f
232.26 178.551 mo
219.029 178.551 218.577 178.913 218.577 177.556 cv
218.577 176.549 218.372 175.226 219.572 175.226 cv
232.802 175.226 233.255 174.863 233.255 176.222 cv
233.255 177.229 233.46 178.551 232.26 178.551 cv
cp
.619608 .74902 .847059 rgb
f
246.698 178.618 mo
236.518 178.618 237.101 178.447 237.101 177.556 cv
237.101 176.549 236.896 175.226 238.096 175.226 cv
255.701 175.226 266.304 175.159 272.686 175.159 cv
282.892 175.159 282.308 175.33 282.308 176.222 cv
282.308 177.556 li
282.308 178.106 281.862 178.551 281.312 178.551 cv
263.686 178.551 253.078 178.618 246.698 178.618 cv
.454902 .411765 .407843 rgb
f
246.698 193.244 mo
236.518 193.244 237.101 193.073 237.101 192.182 cv
237.101 191.175 236.896 189.852 238.096 189.852 cv
281.312 189.852 li
281.862 189.852 282.308 190.298 282.308 190.848 cv
282.308 192.182 li
282.308 192.732 281.862 193.177 281.312 193.177 cv
263.686 193.177 253.078 193.244 246.698 193.244 cv
f
281.312 207.803 mo
238.096 207.803 li
236.661 207.803 236.662 204.478 238.096 204.478 cv
281.312 204.478 li
281.862 204.478 282.308 204.923 282.308 205.473 cv
282.308 206.808 li
282.308 207.358 281.862 207.803 281.312 207.803 cv
f
246.7 222.496 mo
236.516 222.496 237.101 222.325 237.101 221.434 cv
237.101 220.427 236.896 219.104 238.096 219.104 cv
255.72 219.104 266.328 219.036 272.709 219.036 cv
282.892 219.036 282.308 219.208 282.308 220.099 cv
282.308 221.106 282.512 222.429 281.312 222.429 cv
263.689 222.429 253.08 222.496 246.7 222.496 cv
f
232.26 185.864 mo
219.029 185.864 218.577 186.227 218.577 184.868 cv
218.577 183.862 218.372 182.539 219.572 182.539 cv
232.802 182.539 233.255 182.177 233.255 183.534 cv
233.255 184.541 233.46 185.864 232.26 185.864 cv
cp
.619608 .74902 .847059 rgb
f
232.26 193.177 mo
219.029 193.177 218.577 193.539 218.577 192.182 cv
218.577 191.175 218.372 189.852 219.572 189.852 cv
232.802 189.852 233.255 189.489 233.255 190.848 cv
233.255 191.854 233.46 193.177 232.26 193.177 cv
cp
f
232.26 200.49 mo
219.029 200.49 218.577 200.853 218.577 199.494 cv
218.577 198.487 218.372 197.165 219.572 197.165 cv
232.802 197.165 233.255 196.803 233.255 198.16 cv
233.255 199.167 233.46 200.49 232.26 200.49 cv
cp
f
232.26 207.803 mo
219.029 207.803 218.577 208.165 218.577 206.808 cv
218.577 205.801 218.372 204.478 219.572 204.478 cv
232.802 204.478 233.255 204.115 233.255 205.473 cv
233.255 206.808 li
233.255 207.358 232.809 207.803 232.26 207.803 cv
cp
f
232.26 215.116 mo
219.029 215.116 218.577 215.479 218.577 214.12 cv
218.577 213.113 218.372 211.791 219.572 211.791 cv
232.802 211.791 233.255 211.429 233.255 212.786 cv
233.255 213.793 233.46 215.116 232.26 215.116 cv
cp
f
232.26 222.429 mo
219.029 222.429 218.577 222.791 218.577 221.434 cv
218.577 220.427 218.372 219.104 219.572 219.104 cv
232.802 219.104 233.255 218.741 233.255 220.099 cv
233.255 221.106 233.46 222.429 232.26 222.429 cv
cp
f
296.968 185.864 mo
283.737 185.864 283.285 186.227 283.285 184.868 cv
283.285 183.862 283.08 182.539 284.28 182.539 cv
297.51 182.539 297.963 182.177 297.963 183.534 cv
297.963 184.541 298.168 185.864 296.968 185.864 cv
cp
f
296.968 200.49 mo
283.737 200.49 283.285 200.853 283.285 199.494 cv
283.285 198.487 283.08 197.165 284.28 197.165 cv
297.51 197.165 297.963 196.803 297.963 198.16 cv
297.963 199.167 298.168 200.49 296.968 200.49 cv
cp
f
296.968 215.116 mo
283.737 215.116 283.285 215.479 283.285 214.12 cv
283.285 213.113 283.08 211.791 284.28 211.791 cv
297.51 211.791 297.963 211.429 297.963 212.786 cv
297.963 213.793 298.168 215.116 296.968 215.116 cv
cp
f
264.747 185.901 mo
252.059 185.901 li
251.51 185.901 251.064 185.455 251.064 184.905 cv
251.064 183.571 li
251.064 183.022 251.51 182.575 252.059 182.575 cv
264.747 182.575 li
265.297 182.575 265.742 183.022 265.742 183.571 cv
265.742 184.905 li
265.742 185.455 265.297 185.901 264.747 185.901 cv
cp
.839216 .447059 .227451 rgb
f
264.747 200.527 mo
251.516 200.527 251.064 200.889 251.064 199.531 cv
251.064 198.525 250.859 197.201 252.059 197.201 cv
264.747 197.201 li
265.297 197.201 265.742 197.648 265.742 198.197 cv
265.742 199.531 li
265.742 200.081 265.297 200.527 264.747 200.527 cv
cp
f
264.747 215.153 mo
251.516 215.153 251.064 215.515 251.064 214.157 cv
251.064 213.151 250.859 211.827 252.059 211.827 cv
265.29 211.827 265.742 211.465 265.742 212.823 cv
265.742 213.83 265.947 215.153 264.747 215.153 cv
cp
f
338.948 189.597 mo
224.142 189.597 226.878 191.196 226.878 185.417 cv
226.878 121.694 li
226.878 119.386 228.749 117.515 231.056 117.515 cv
345.862 117.515 343.127 115.915 343.127 121.694 cv
343.127 185.417 li
343.127 187.726 341.256 189.597 338.948 189.597 cv
cp
1 1 1 rgb
f
314.199 117.84 mo
307.808 117.84 300.04 117.87 290.618 117.907 cv
275.23 117.967 256.079 118.042 231.056 118.042 cv
229.043 118.042 227.405 119.68 227.405 121.694 cv
227.401 185.818 li
227.39 186.73 227.403 187.223 227.775 187.598 cv
229.563 189.399 240.115 189.357 279.381 189.205 cv
294.769 189.145 313.922 189.07 338.947 189.07 cv
340.962 189.07 342.599 187.431 342.599 185.418 cv
342.603 121.294 li
342.613 120.382 342.601 119.889 342.229 119.514 cv
340.87 118.144 334.446 117.84 314.199 117.84 cv
cp
255.363 190.327 mo
233.589 190.327 228.648 189.974 227.027 188.34 cv
226.326 187.635 226.337 186.746 226.347 185.806 cv
226.35 185.418 li
226.35 121.694 li
226.35 119.099 228.462 116.988 231.056 116.988 cv
256.077 116.988 275.226 116.913 290.614 116.853 cv
333.203 116.685 340.879 116.656 342.977 118.772 cv
343.678 119.477 343.668 120.365 343.657 121.306 cv
343.654 121.694 li
343.654 185.418 li
343.654 188.013 341.543 190.124 338.947 190.124 cv
313.925 190.124 294.773 190.198 279.385 190.259 cv
269.681 190.296 261.788 190.327 255.363 190.327 cv
cp
.933333 .894118 .85098 rgb
f
343.127 121.097 mo
226.878 121.097 li
226.878 119.118 228.481 117.515 230.46 117.515 cv
346.959 117.515 343.127 116.159 343.127 121.097 cv
cp
.266667 .258824 .266667 rgb
f
227.45 120.57 mo
342.609 120.57 li
342.625 119.935 342.615 119.586 342.362 119.327 cv
340.836 117.765 331.183 117.797 290.561 117.929 cv
275.045 117.979 255.735 118.042 230.46 118.042 cv
228.955 118.042 227.701 119.135 227.45 120.57 cv
cp
343.654 121.624 mo
226.35 121.624 li
226.35 121.097 li
226.35 118.831 228.194 116.988 230.46 116.988 cv
255.733 116.988 275.042 116.925 290.557 116.874 cv
333.534 116.735 341.277 116.71 343.116 118.591 cv
343.7 119.188 343.681 119.9 343.662 120.654 cv
343.658 120.796 343.654 120.943 343.654 121.097 cv
343.654 121.624 li
cp
f
338.076 120.272 mo
339.267 120.272 339.997 120.442 339.997 119.875 cv
339.997 119.145 340.167 118.34 339.601 118.34 cv
338.41 118.34 337.679 118.17 337.679 118.737 cv
337.679 119.466 337.51 120.272 338.076 120.272 cv
cp
.745098 .752941 .760784 rgb
f
338.163 120.133 mo
337.96 120.038 li
337.867 119.926 337.882 119.76 337.994 119.667 cv
339.345 118.54 li
339.457 118.448 339.624 118.462 339.718 118.574 cv
339.81 118.686 339.795 118.852 339.683 118.945 cv
338.331 120.071 li
338.163 120.133 li
cp
1 1 1 rgb
f
339.514 120.133 mo
339.345 120.071 li
337.994 118.945 li
337.882 118.852 337.867 118.686 337.96 118.574 cv
338.053 118.462 338.22 118.448 338.331 118.54 cv
339.683 119.667 li
339.795 119.76 339.81 119.926 339.718 120.038 cv
339.514 120.133 li
cp
f
246.582 127.029 mo
236.394 127.029 li
236.265 127.029 236.16 126.924 236.16 126.795 cv
236.16 126.665 236.265 126.56 236.394 126.56 cv
246.582 126.56 li
246.711 126.56 246.816 126.665 246.816 126.795 cv
246.816 126.924 246.711 127.029 246.582 127.029 cv
cp
.933333 .894118 .85098 rgb
f
246.582 183.972 mo
236.394 183.972 li
236.265 183.972 236.16 183.867 236.16 183.737 cv
236.16 183.608 236.265 183.503 236.394 183.503 cv
246.582 183.503 li
246.711 183.503 246.816 183.608 246.816 183.737 cv
246.816 183.867 246.711 183.972 246.582 183.972 cv
cp
f
236.394 183.972 mo
236.265 183.972 236.16 183.867 236.16 183.737 cv
236.16 126.795 li
236.16 126.665 236.265 126.56 236.394 126.56 cv
236.524 126.56 236.63 126.665 236.63 126.795 cv
236.63 183.737 li
236.63 183.867 236.524 183.972 236.394 183.972 cv
cp
f
246.224 139.166 mo
240.38 139.166 li
240.25 139.166 240.145 139.061 240.145 138.931 cv
240.145 138.801 240.25 138.696 240.38 138.696 cv
246.224 138.696 li
246.353 138.696 246.459 138.801 246.459 138.931 cv
246.459 139.061 246.353 139.166 246.224 139.166 cv
cp
f
246.224 171.835 mo
240.38 171.835 li
240.25 171.835 240.145 171.73 240.145 171.601 cv
240.145 171.471 240.25 171.365 240.38 171.365 cv
246.224 171.365 li
246.353 171.365 246.459 171.471 246.459 171.601 cv
246.459 171.73 246.353 171.835 246.224 171.835 cv
cp
f
240.38 171.835 mo
240.25 171.835 240.145 171.73 240.145 171.601 cv
240.145 138.931 li
240.145 138.801 240.25 138.696 240.38 138.696 cv
240.509 138.696 240.614 138.801 240.614 138.931 cv
240.614 171.601 li
240.614 171.73 240.509 171.835 240.38 171.835 cv
cp
f
248.952 147.78 mo
240.38 147.78 li
240.25 147.78 240.145 147.675 240.145 147.545 cv
240.145 147.415 240.25 147.31 240.38 147.31 cv
248.952 147.31 li
249.081 147.31 249.186 147.415 249.186 147.545 cv
249.186 147.675 249.081 147.78 248.952 147.78 cv
cp
f
258.274 128.667 mo
239.206 128.667 li
238.895 128.667 238.643 128.416 238.643 128.105 cv
238.643 125.484 li
238.643 125.173 238.895 124.922 239.206 124.922 cv
259.408 124.922 258.837 124.682 258.837 125.484 cv
258.837 128.105 li
258.837 128.416 258.585 128.667 258.274 128.667 cv
cp
.619608 .74902 .847059 rgb
f
248.643 140.804 mo
243.33 140.804 li
243.019 140.804 242.768 140.552 242.768 140.242 cv
242.768 137.62 li
242.768 137.31 243.019 137.058 243.33 137.058 cv
248.643 137.058 li
248.954 137.058 249.205 137.31 249.205 137.62 cv
249.205 140.242 li
249.205 140.552 248.954 140.804 248.643 140.804 cv
cp
.839216 .447059 .227451 rgb
f
249.449 185.61 mo
240.476 185.61 li
240.166 185.61 239.915 185.359 239.915 185.048 cv
239.915 182.427 li
239.915 182.116 240.166 181.864 240.476 181.864 cv
249.449 181.864 li
249.76 181.864 250.01 182.116 250.01 182.427 cv
250.01 185.048 li
250.01 185.359 249.76 185.61 249.449 185.61 cv
cp
.619608 .74902 .847059 rgb
f
300.378 147.78 mo
276.638 147.78 li
276.509 147.78 276.404 147.675 276.404 147.545 cv
276.404 147.415 276.509 147.31 276.638 147.31 cv
300.378 147.31 li
300.507 147.31 300.612 147.415 300.612 147.545 cv
300.612 147.675 300.507 147.78 300.378 147.78 cv
cp
.933333 .894118 .85098 rgb
f
297.416 128.667 mo
260.434 128.667 262.202 128.93 262.202 128.105 cv
262.202 125.65 262.031 124.922 262.763 124.922 cv
299.745 124.922 297.978 124.658 297.978 125.484 cv
297.978 127.939 298.148 128.667 297.416 128.667 cv
cp
.8 .533333 .164706 rgb
f
271.73 173.474 mo
243.962 173.474 li
243.683 173.474 243.458 173.247 243.458 172.969 cv
243.458 170.232 li
243.458 169.953 243.683 169.728 243.962 169.728 cv
271.73 169.728 li
272.009 169.728 272.234 169.953 272.234 170.232 cv
272.234 172.969 li
272.234 173.247 272.009 173.474 271.73 173.474 cv
cp
.619608 .74902 .847059 rgb
f
277.982 149.418 mo
243.33 149.418 li
243.019 149.418 242.768 149.166 242.768 148.856 cv
242.768 146.235 li
242.768 145.924 243.019 145.672 243.33 145.672 cv
277.982 145.672 li
278.293 145.672 278.545 145.924 278.545 146.235 cv
278.545 148.856 li
278.545 149.166 278.293 149.418 277.982 149.418 cv
cp
f
298.3 172.888 mo
287.778 172.888 li
287.648 172.888 287.544 172.782 287.544 172.654 cv
287.544 172.524 287.648 172.419 287.778 172.419 cv
298.3 172.419 li
298.428 172.419 298.534 172.524 298.534 172.654 cv
298.534 172.782 298.428 172.888 298.3 172.888 cv
cp
.933333 .894118 .85098 rgb
f
298.3 164.563 mo
287.778 164.563 li
287.648 164.563 287.544 164.458 287.544 164.328 cv
287.544 164.198 287.648 164.093 287.778 164.093 cv
298.3 164.093 li
298.428 164.093 298.534 164.198 298.534 164.328 cv
298.534 164.458 298.428 164.563 298.3 164.563 cv
cp
f
298.3 156.237 mo
287.778 156.237 li
287.648 156.237 287.544 156.133 287.544 156.003 cv
287.544 155.873 287.648 155.768 287.778 155.768 cv
298.3 155.768 li
298.428 155.768 298.534 155.873 298.534 156.003 cv
298.534 156.133 298.428 156.237 298.3 156.237 cv
cp
f
291.829 149.55 mo
283.717 149.55 283.39 149.764 283.39 149.213 cv
283.39 146.602 283.176 145.804 283.727 145.804 cv
291.84 145.804 292.166 145.591 292.166 146.141 cv
292.166 148.753 292.38 149.55 291.829 149.55 cv
cp
.8 .533333 .164706 rgb
f
269.232 160.386 mo
250.765 160.386 li
250.489 160.386 250.264 160.161 250.264 159.884 cv
250.264 157.142 li
250.264 156.865 250.489 156.64 250.765 156.64 cv
269.232 156.64 li
269.51 156.64 269.734 156.865 269.734 157.142 cv
269.734 159.884 li
269.734 160.161 269.51 160.386 269.232 160.386 cv
cp
f
302.35 149.55 mo
294.238 149.55 293.912 149.764 293.912 149.213 cv
293.912 146.602 293.698 145.804 294.249 145.804 cv
302.361 145.804 302.687 145.591 302.687 146.141 cv
302.687 148.753 302.901 149.55 302.35 149.55 cv
cp
.839216 .447059 .227451 rgb
f
291.829 157.875 mo
283.717 157.875 283.39 158.089 283.39 157.539 cv
283.39 154.927 283.176 154.13 283.727 154.13 cv
291.84 154.13 292.166 153.916 292.166 154.466 cv
292.166 157.078 292.38 157.875 291.829 157.875 cv
cp
.8 .533333 .164706 rgb
f
302.35 157.875 mo
294.238 157.875 293.912 158.089 293.912 157.539 cv
293.912 154.927 293.698 154.13 294.249 154.13 cv
302.361 154.13 302.687 153.916 302.687 154.466 cv
302.687 157.539 li
302.687 157.725 302.536 157.875 302.35 157.875 cv
cp
.839216 .447059 .227451 rgb
f
291.829 166.201 mo
283.717 166.201 283.39 166.414 283.39 165.864 cv
283.39 163.252 283.176 162.455 283.727 162.455 cv
291.84 162.455 292.166 162.241 292.166 162.792 cv
292.166 165.404 292.38 166.201 291.829 166.201 cv
cp
.8 .533333 .164706 rgb
f
302.35 166.201 mo
294.238 166.201 293.912 166.414 293.912 165.864 cv
293.912 163.252 293.698 162.455 294.249 162.455 cv
302.361 162.455 302.687 162.241 302.687 162.792 cv
302.687 165.404 302.901 166.201 302.35 166.201 cv
cp
.839216 .447059 .227451 rgb
f
291.829 174.527 mo
283.717 174.527 283.39 174.739 283.39 174.19 cv
283.39 171.577 283.176 170.78 283.727 170.78 cv
291.84 170.78 292.166 170.567 292.166 171.117 cv
292.166 173.729 292.38 174.527 291.829 174.527 cv
cp
.8 .533333 .164706 rgb
f
302.35 174.527 mo
294.238 174.527 293.912 174.739 293.912 174.19 cv
293.912 171.577 293.698 170.78 294.249 170.78 cv
302.361 170.78 302.687 170.567 302.687 171.117 cv
302.687 173.729 302.901 174.527 302.35 174.527 cv
cp
.839216 .447059 .227451 rgb
f
293.039 172.888 mo
292.909 172.888 292.803 172.782 292.803 172.654 cv
292.803 147.545 li
292.803 147.415 292.909 147.31 293.039 147.31 cv
293.168 147.31 293.273 147.415 293.273 147.545 cv
293.273 172.654 li
293.273 172.782 293.168 172.888 293.039 172.888 cv
cp
.933333 .894118 .85098 rgb
f
307.502 128.667 mo
302.083 128.667 301.627 128.856 301.627 128.105 cv
301.627 125.65 301.457 124.922 302.189 124.922 cv
307.608 124.922 308.064 124.733 308.064 125.484 cv
308.064 127.939 308.234 128.667 307.502 128.667 cv
cp
.839216 .447059 .227451 rgb
f
318.54 128.667 mo
313.121 128.667 312.665 128.856 312.665 128.105 cv
312.665 125.65 312.495 124.922 313.227 124.922 cv
318.646 124.922 319.102 124.733 319.102 125.484 cv
319.102 127.939 319.272 128.667 318.54 128.667 cv
cp
f
329.578 128.667 mo
324.159 128.667 323.703 128.856 323.703 128.105 cv
323.703 125.65 323.533 124.922 324.265 124.922 cv
329.684 124.922 330.14 124.733 330.14 125.484 cv
330.14 127.939 330.311 128.667 329.578 128.667 cv
cp
f
85.1101 156.34 mo
85.1101 167.381 76.1594 176.331 65.1189 176.331 cv
54.0779 176.331 45.1277 167.381 45.1277 156.34 cv
45.1277 145.299 54.0779 136.349 65.1189 136.349 cv
76.1594 136.349 85.1101 145.299 85.1101 156.34 cv
1 1 1 rgb
f
65.1189 137.346 mo
54.6453 137.346 46.1253 145.867 46.1253 156.34 cv
46.1253 166.813 54.6453 175.334 65.1189 175.334 cv
75.592 175.334 84.1125 166.813 84.1125 156.34 cv
84.1125 145.867 75.592 137.346 65.1189 137.346 cv
65.1189 177.329 mo
53.5457 177.329 44.1301 167.913 44.1301 156.34 cv
44.1301 144.767 53.5457 135.351 65.1189 135.351 cv
76.6921 135.351 86.1077 144.767 86.1077 156.34 cv
86.1077 167.913 76.6921 177.329 65.1189 177.329 cv
.819608 .52549 .552941 rgb
f
65.0464 140.985 mo
63.8474 140.985 63.3843 139.107 64.7268 138.676 cv
64.8675 138.631 65.0013 138.61 65.1271 138.61 cv
66.3259 138.61 66.7896 140.488 65.447 140.919 cv
65.3063 140.964 65.1722 140.985 65.0464 140.985 cv
.831372 .839216 .843137 rgb
f
73.3452 143.143 mo
73.2533 143.143 73.1566 143.132 73.0554 143.111 cv
71.6355 142.804 71.9736 140.776 73.264 140.776 cv
73.3558 140.776 73.4523 140.786 73.5535 140.808 cv
74.9738 141.116 74.6355 143.143 73.3452 143.143 cv
f
79.7623 150.08 mo
79.4841 150.08 79.1953 149.97 78.9397 149.708 cv
78.11 148.854 78.9018 147.692 79.806 147.692 cv
80.0843 147.692 80.373 147.802 80.6287 148.065 cv
81.4583 148.918 80.6665 150.08 79.7623 150.08 cv
f
81.5775 157.467 mo
80.9845 157.467 80.391 157.072 80.3987 156.287 cv
80.4062 155.515 80.9905 155.131 81.5752 155.131 cv
82.1683 155.131 82.7618 155.526 82.7541 156.31 cv
82.7466 157.083 82.1623 157.467 81.5775 157.467 cv
f
56.8272 143.143 mo
55.5369 143.143 55.1985 141.116 56.6189 140.808 cv
56.72 140.786 56.8165 140.776 56.9082 140.776 cv
58.1983 140.776 58.5369 142.804 57.117 143.111 cv
57.0157 143.132 56.9191 143.143 56.8272 143.143 cv
f
50.4098 150.08 mo
49.5056 150.08 48.7136 148.918 49.5437 148.065 cv
49.7992 147.802 50.0879 147.692 50.3661 147.692 cv
51.2703 147.692 52.0622 148.854 51.2322 149.708 cv
50.9767 149.97 50.688 150.08 50.4098 150.08 cv
f
48.5948 157.467 mo
48.0101 157.467 47.4257 157.083 47.4182 156.31 cv
47.4106 155.526 48.0041 155.131 48.5972 155.131 cv
49.1818 155.131 49.7662 155.515 49.7737 156.287 cv
49.7813 157.072 49.1878 157.467 48.5948 157.467 cv
f
65.131 173.983 mo
65.0052 173.983 64.8714 173.962 64.7307 173.917 cv
63.388 173.487 63.8517 171.608 65.0508 171.608 cv
65.1765 171.608 65.3104 171.629 65.4509 171.674 cv
66.7935 172.105 66.3299 173.983 65.131 173.983 cv
f
73.2679 171.817 mo
71.9775 171.817 71.6393 169.79 73.0593 169.483 cv
73.1604 169.461 73.2569 169.45 73.3487 169.45 cv
74.6392 169.45 74.9778 171.478 73.5574 171.785 cv
73.4562 171.807 73.3597 171.817 73.2679 171.817 cv
f
79.8099 164.901 mo
78.9058 164.901 78.1141 163.739 78.9441 162.885 cv
79.1996 162.623 79.4883 162.513 79.7664 162.513 cv
80.6705 162.513 81.4622 163.675 80.6325 164.528 cv
80.377 164.791 80.0882 164.901 79.8099 164.901 cv
f
56.9122 171.817 mo
56.8204 171.817 56.7239 171.807 56.6228 171.785 cv
55.2023 171.478 55.5409 169.45 56.8314 169.45 cv
56.9232 169.45 57.0197 169.461 57.1208 169.483 cv
58.5409 169.79 58.2026 171.817 56.9122 171.817 cv
f
50.3704 164.901 mo
50.0921 164.901 49.8033 164.791 49.5476 164.528 cv
48.7179 163.675 49.5097 162.513 50.4138 162.513 cv
50.6919 162.513 50.9806 162.623 51.2361 162.885 cv
52.066 163.739 51.2746 164.901 50.3704 164.901 cv
f
65.0759 157.327 mo
64.9851 157.327 64.8953 157.302 64.8157 157.253 cv
64.6677 157.163 64.5774 157.002 64.5774 156.828 cv
64.5774 143.798 li
64.5774 143.522 64.8005 143.299 65.0759 143.299 cv
65.3518 143.299 65.5745 143.522 65.5745 143.798 cv
65.5745 156.015 li
76.6921 150.357 li
76.9382 150.231 77.238 150.33 77.3625 150.575 cv
77.4875 150.82 77.3904 151.121 77.1443 151.246 cv
65.3025 157.273 li
65.0759 157.327 li
cp
.447059 .470588 .478431 rgb
f
gsave
262.87 335.901 mo
38.6467 335.901 li
38.6467 173.079 li
262.87 173.079 li
262.87 335.901 li
clp
170.5 263.766 mo
141.216 263.766 li
149.205 246.45 li
162.511 246.45 li
170.5 263.766 li
cp
f
201.279 248.637 mo
104.514 248.637 108.443 249.483 108.443 246.737 cv
108.443 181.688 107.629 183.952 110.342 183.952 cv
207.107 183.952 203.178 183.107 203.178 185.852 cv
203.178 250.902 203.992 248.637 201.279 248.637 cv
.611765 .623529 .627451 rgb
f
199.165 236.169 mo
107.207 236.169 110.557 237.036 110.557 234.27 cv
110.557 185.144 109.751 185.841 112.456 185.841 cv
204.415 185.841 201.065 184.974 201.065 187.74 cv
201.065 236.866 201.871 236.169 199.165 236.169 cv
.184314 .239216 .411765 rgb
f
155.679 245.167 mo
152.202 245.167 152.198 239.904 155.679 239.904 cv
159.156 239.904 159.16 245.167 155.679 245.167 cv
cp
.447059 .470588 .478431 rgb
f
188.042 232.538 mo
119.664 232.538 121.083 233.559 121.083 230.041 cv
121.083 190.149 120.14 189.471 123.58 189.471 cv
191.958 189.471 190.539 188.451 190.539 191.968 cv
190.539 231.861 191.482 232.538 188.042 232.538 cv
1 1 1 rgb
f
174.081 189.65 mo
170.31 189.65 165.695 189.67 160.058 189.695 cv
150.688 189.736 139.028 189.786 123.58 189.786 cv
122.938 189.786 122.494 189.809 122.199 190.107 cv
121.202 191.109 121.23 195.351 121.321 209.407 cv
121.355 214.789 121.398 221.487 121.398 230.041 cv
121.397 230.255 li
121.392 230.822 121.4 231.129 121.632 231.361 cv
122.708 232.443 128.821 232.416 151.564 232.316 cv
160.933 232.275 172.594 232.224 188.042 232.224 cv
188.684 232.224 189.127 232.201 189.423 231.903 cv
190.419 230.902 190.391 226.659 190.302 212.603 cv
190.267 207.221 190.224 200.523 190.224 191.969 cv
190.225 191.755 li
190.23 191.188 190.221 190.881 189.99 190.649 cv
189.18 189.835 185.521 189.65 174.081 189.65 cv
137.281 232.991 mo
124.976 232.991 122.15 232.775 121.186 231.807 cv
120.757 231.376 120.762 230.829 120.767 230.249 cv
120.768 230.041 li
120.768 221.488 120.725 214.792 120.691 209.411 cv
120.594 194.414 120.571 190.851 121.752 189.662 cv
122.217 189.194 122.829 189.156 123.58 189.156 cv
139.027 189.156 150.686 189.106 160.055 189.065 cv
184.729 188.956 189.174 188.937 190.436 190.203 cv
190.864 190.634 190.86 191.181 190.855 191.761 cv
190.853 191.969 li
190.853 200.522 190.897 207.218 190.931 212.599 cv
191.028 227.596 191.051 231.159 189.87 232.348 cv
189.404 232.817 188.793 232.854 188.042 232.854 cv
172.595 232.854 160.935 232.904 151.567 232.945 cv
145.758 232.971 141.071 232.991 137.281 232.991 cv
.933333 .894118 .85098 rgb
f
190.539 191.612 mo
121.083 191.612 li
121.083 190.431 122.04 189.471 123.223 189.471 cv
192.719 189.471 190.539 188.557 190.539 191.612 cv
cp
.266667 .258824 .266667 rgb
f
121.425 191.297 mo
190.229 191.297 li
190.237 190.897 190.23 190.677 190.07 190.514 cv
189.161 189.586 183.187 189.612 160.955 189.699 cv
151.839 189.737 139.354 189.786 123.223 189.786 cv
122.324 189.786 121.575 190.44 121.425 191.297 cv
cp
190.853 191.926 mo
120.768 191.926 li
120.768 191.612 li
120.768 190.258 121.869 189.156 123.223 189.156 cv
139.353 189.156 151.837 189.107 160.952 189.07 cv
185.077 188.975 189.423 188.956 190.52 190.072 cv
190.878 190.438 190.868 190.88 190.857 191.348 cv
190.856 191.433 190.853 191.521 190.853 191.612 cv
190.853 191.926 li
cp
f
187.521 191.118 mo
188.432 191.118 li
188.76 191.118 188.863 189.964 188.432 189.964 cv
187.521 189.964 li
187.111 189.964 187.284 191.185 187.284 190.882 cv
187.284 191.012 187.39 191.118 187.521 191.118 cv
cp
.745098 .752941 .760784 rgb
f
187.573 191.035 mo
187.452 190.979 li
187.472 190.757 li
188.28 190.084 li
188.502 190.105 li
188.481 190.326 li
187.674 190.999 li
187.573 191.035 li
cp
1 1 1 rgb
f
188.381 191.035 mo
188.28 190.999 li
187.472 190.326 li
187.452 190.105 li
187.674 190.084 li
188.481 190.757 li
188.502 190.979 li
188.381 191.035 li
cp
f
148.243 201.19 mo
129.923 201.19 130.466 201.387 130.466 200.753 cv
130.466 199.255 130.337 198.678 130.903 198.678 cv
149.223 198.678 148.68 198.481 148.68 199.115 cv
148.68 200.612 148.809 201.19 148.243 201.19 cv
cp
.619608 .74902 .847059 rgb
f
161.934 223.318 mo
129.067 223.318 130.466 223.586 130.466 222.737 cv
130.466 221.582 130.316 220.806 131.046 220.806 cv
163.913 220.806 162.514 220.537 162.514 221.386 cv
162.514 222.541 162.663 223.318 161.934 223.318 cv
cp
f
128.152 201.219 mo
126.747 201.219 126.091 201.36 126.091 200.739 cv
126.091 199.334 125.95 198.678 126.57 198.678 cv
127.975 198.678 128.631 198.537 128.631 199.157 cv
128.631 200.563 128.772 201.219 128.152 201.219 cv
cp
.839216 .447059 .227451 rgb
f
128.152 206.805 mo
126.747 206.805 126.091 206.946 126.091 206.326 cv
126.091 204.921 125.95 204.265 126.57 204.265 cv
127.975 204.265 128.631 204.124 128.631 204.744 cv
128.631 206.149 128.772 206.805 128.152 206.805 cv
cp
f
128.152 212.755 mo
126.747 212.755 126.091 212.896 126.091 212.276 cv
126.091 210.87 125.95 210.214 126.57 210.214 cv
127.975 210.214 128.631 210.073 128.631 210.694 cv
128.631 212.099 128.772 212.755 128.152 212.755 cv
cp
f
128.152 217.629 mo
126.747 217.629 126.091 217.771 126.091 217.15 cv
126.091 215.745 125.95 215.089 126.57 215.089 cv
127.975 215.089 128.631 214.948 128.631 215.569 cv
128.631 216.973 128.772 217.629 128.152 217.629 cv
cp
f
128.152 223.332 mo
126.747 223.332 126.091 223.473 126.091 222.853 cv
126.091 221.447 125.95 220.791 126.57 220.791 cv
127.975 220.791 128.631 220.651 128.631 221.271 cv
128.631 222.676 128.772 223.332 128.152 223.332 cv
cp
f
gsave
158.354 201.285 mo
150.612 201.285 151.036 201.153 151.036 200.468 cv
151.036 199.665 150.881 198.664 151.801 198.664 cv
165.275 198.664 173.375 198.612 178.239 198.612 cv
185.956 198.612 185.531 198.744 185.531 199.428 cv
185.531 200.232 185.686 201.233 184.767 201.233 cv
171.313 201.233 163.22 201.285 158.354 201.285 cv
clp
150.612 198.612 mo
185.956 198.612 li
185.956 201.285 li
150.612 201.285 li
cp
.454902 .411765 .407843 rgb
f
grestore
148.243 206.777 mo
129.923 206.777 130.466 206.974 130.466 206.339 cv
130.466 204.842 130.337 204.265 130.903 204.265 cv
149.223 204.265 148.68 204.068 148.68 204.702 cv
148.68 206.199 148.809 206.777 148.243 206.777 cv
cp
.619608 .74902 .847059 rgb
f
157.814 206.865 mo
150.633 206.865 151.036 206.743 151.036 206.095 cv
151.036 205.213 150.88 204.251 151.761 204.251 cv
163.654 204.251 170.884 204.205 175.276 204.205 cv
182.457 204.205 182.054 204.328 182.054 204.976 cv
182.054 205.858 182.211 206.819 181.33 206.819 cv
169.437 206.819 162.207 206.865 157.814 206.865 cv
.454902 .411765 .407843 rgb
f
148.243 212.726 mo
129.923 212.726 130.466 212.923 130.466 212.289 cv
130.466 210.791 130.337 210.214 130.903 210.214 cv
149.223 210.214 148.68 210.017 148.68 210.652 cv
148.68 212.149 148.809 212.726 148.243 212.726 cv
cp
.619608 .74902 .847059 rgb
f
156.694 212.808 mo
150.753 212.808 151.036 212.699 151.036 212.115 cv
151.036 211.121 150.867 210.2 151.69 210.2 cv
161.204 210.2 167.036 210.16 170.609 210.16 cv
176.532 210.16 176.25 210.27 176.25 210.854 cv
176.25 211.848 176.419 212.769 175.597 212.769 cv
166.098 212.769 160.269 212.808 156.694 212.808 cv
.454902 .411765 .407843 rgb
f
156.678 218.953 mo
150.755 218.953 151.036 218.843 151.036 218.26 cv
151.036 217.267 150.867 216.345 151.69 216.345 cv
161.19 216.345 167.02 216.305 170.595 216.305 cv
176.534 216.305 176.25 216.415 176.25 216.998 cv
176.25 217.992 176.419 218.913 175.597 218.913 cv
166.083 218.913 160.251 218.953 156.678 218.953 cv
f
148.243 218.675 mo
129.923 218.675 130.466 218.872 130.466 218.238 cv
130.466 216.74 130.337 216.163 130.903 216.163 cv
149.223 216.163 148.68 215.966 148.68 216.601 cv
148.68 218.099 148.809 218.675 148.243 218.675 cv
cp
.619608 .74902 .847059 rgb
f
168.587 223.382 mo
163.407 223.382 163.643 223.281 163.643 222.737 cv
163.643 221.708 163.465 220.778 164.252 220.778 cv
172.442 220.778 177.482 220.741 180.582 220.741 cv
185.762 220.741 185.526 220.843 185.526 221.386 cv
185.526 222.415 185.705 223.346 184.918 223.346 cv
176.727 223.346 171.687 223.382 168.587 223.382 cv
.454902 .411765 .407843 rgb
f
253.301 284.053 mo
253.301 262.987 253.485 263.832 252.894 263.832 cv
65.5198 263.832 75.0353 263.621 75.0353 264.238 cv
75.0353 284.053 li
75.0353 284.516 253.301 284.835 253.301 284.053 cv
.682353 .345098 .294118 rgb
f
241.87 280.258 mo
171.158 280.258 173.866 280.916 173.866 278.738 cv
173.866 268.998 173.387 267.525 175.386 267.525 cv
246.098 267.525 243.39 266.866 243.39 269.044 cv
243.39 278.784 243.87 280.258 241.87 280.258 cv
.819608 .415686 .294118 rgb
f
208.628 276.481 mo
205.094 276.481 205.091 271.132 208.628 271.132 cv
212.162 271.132 212.166 276.481 208.628 276.481 cv
cp
.682353 .345098 .294118 rgb
f
166.489 280.258 mo
95.7776 280.258 98.4856 280.916 98.4856 278.738 cv
98.4856 268.998 98.0056 267.525 100.005 267.525 cv
170.717 267.525 168.009 266.866 168.009 269.044 cv
168.009 278.784 168.49 280.258 166.489 280.258 cv
.819608 .415686 .294118 rgb
f
133.247 276.481 mo
129.714 276.481 129.71 271.132 133.247 271.132 cv
136.781 271.132 136.784 276.481 133.247 276.481 cv
.682353 .345098 .294118 rgb
f
104.195 290.063 mo
230.509 290.063 li
230.509 284.46 li
104.195 284.46 li
104.195 290.063 li
.819608 .415686 .294118 rgb
f
234.324 285.606 mo
249.105 366.942 li
249.601 369.673 246.236 369.445 245.785 367.757 cv
222.854 281.941 222.646 284.368 225.352 284.39 cv
233.135 284.452 234.05 284.094 234.324 285.606 cv
cp
.682353 .345098 .294118 rgb
f
88.7048 285.614 mo
88.6423 285.956 73.8659 367.048 73.9167 367.392 cv
74.3357 370.227 76.945 368.881 77.2464 367.754 cv
100.238 281.708 100.325 284.368 97.6647 284.39 cv
96.2534 284.401 95.0683 284.399 94.0723 284.397 cv
89.574 284.387 88.9295 284.377 88.7048 285.614 cv
f
98.531 301.114 mo
98.6369 301.445 123.685 379.975 123.892 380.254 cv
125.594 382.56 127.264 380.146 127.001 379.009 cv
106.878 292.248 108.204 294.556 105.866 295.824 cv
99.0232 299.536 98.0637 299.651 98.531 301.114 cv
f
96.1599 275.615 mo
96.0149 275.139 li
104.524 272.549 103.737 268.053 102.741 262.361 cv
101.811 257.048 100.654 250.437 107.199 243.709 cv
107.556 244.057 li
101.189 250.601 102.275 256.803 103.232 262.275 cv
104.23 267.975 105.092 272.898 96.1599 275.615 cv
.517647 .32549 .290196 rgb
f
165.95 356.869 mo
164.253 356.784 156.104 359.076 150.926 365.529 cv
150.926 365.529 133.014 350.673 124.695 327.753 cv
140.23 318.585 li
140.23 318.585 153.387 341.165 157.462 347.193 cv
161.536 353.219 165.95 356.869 165.95 356.869 cv
.388235 .462745 .564706 rgb
f
125.042 327.877 mo
132.776 348.979 148.83 363.344 150.889 365.124 cv
155.538 359.495 162.542 356.995 165.248 356.631 cv
163.952 355.467 160.463 352.137 157.227 347.352 cv
153.423 341.724 141.572 321.447 140.128 318.974 cv
125.042 327.877 li
150.966 365.93 mo
150.744 365.746 li
150.564 365.598 132.679 350.578 124.428 327.85 cv
124.348 327.628 li
140.331 318.196 li
140.474 318.443 li
140.606 318.668 153.674 341.083 157.696 347.033 cv
161.699 352.954 166.088 356.615 166.131 356.652 cv
166.789 357.195 li
165.936 357.152 li
164.581 357.081 156.449 359.098 151.146 365.705 cv
150.966 365.93 li
.231373 .2 .282353 rgb
f
157.634 337.262 mo
154.576 345.496 153.474 361.285 154.068 367.565 cv
152.175 364.723 145.599 360.115 134.034 362.812 cv
141.161 316.975 li
121.409 314.564 126.737 315.214 116.12 313.917 cv
113.071 309.516 104.236 296.765 101.178 292.353 cv
112.279 285.811 110.169 287.055 112.978 285.396 cv
117.222 288.532 152.173 294.228 161.623 299.4 cv
170.835 304.446 160.686 329.028 157.634 337.262 cv
.388235 .462745 .564706 rgb
f
140.706 361.717 mo
147.474 361.717 151.787 364.441 153.712 366.641 cv
153.268 359.528 154.515 344.846 157.368 337.164 cv
157.584 336.581 157.835 335.917 158.113 335.185 cv
161.619 325.918 169.831 304.22 161.487 299.648 cv
156.416 296.873 143.862 293.925 132.786 291.323 cv
123.373 289.112 115.213 287.195 112.966 285.732 cv
112.203 286.183 li
110.873 286.969 110.873 286.969 104.964 290.451 cv
101.585 292.442 li
116.281 313.651 li
141.485 316.729 li
134.378 362.444 li
136.683 361.935 138.794 361.717 140.706 361.717 cv
154.456 368.657 mo
153.832 367.722 li
151.99 364.957 145.495 360.43 134.098 363.088 cv
133.69 363.183 li
133.754 362.768 li
140.836 317.22 li
115.96 314.183 li
115.887 314.078 li
100.772 292.264 li
104.677 289.962 li
110.585 286.481 110.585 286.481 111.915 285.695 cv
112.996 285.057 li
113.146 285.168 li
115.052 286.575 123.729 288.614 132.915 290.772 cv
144.027 293.382 156.621 296.339 161.759 299.152 cv
170.536 303.959 162.503 325.185 158.643 335.385 cv
158.365 336.116 158.115 336.78 157.899 337.361 cv
154.939 345.333 153.724 360.92 154.35 367.538 cv
154.456 368.657 li
.231373 .2 .282353 rgb
f
146.679 335.901 mo
138.505 335.901 li
140.766 321.357 li
142.634 320.024 144.361 318.512 145.902 316.798 cv
145.91 316.798 li
147.678 316.798 150.148 316.394 152.309 315.512 cv
152.322 315.515 152.334 315.519 152.347 315.523 cv
150.201 323.406 148.233 330.12 146.679 335.901 cv
146.353 316.294 mo
146.372 316.273 li
145.754 316.262 li
145.735 316.262 143.817 316.226 141.152 316.078 cv
141.009 316.069 li
130.364 315.473 115.786 314.655 107.724 295.132 cv
107.42 294.394 107.124 293.665 106.836 292.944 cv
109.391 292.02 111.291 290.992 112.669 289.985 cv
120.105 301.38 136.744 310.819 151.528 315.28 cv
149.761 315.917 147.849 316.245 146.353 316.294 cv
.309804 .329412 .423529 rgb
f
138.505 335.901 mo
138.218 335.901 li
140.444 321.583 li
140.552 321.509 140.659 321.433 140.766 321.357 cv
138.505 335.901 li
.231373 .2 .282353 rgb
f
145.91 316.798 mo
145.743 316.797 li
145.606 316.795 145.496 316.682 145.498 316.543 cv
145.5 316.407 145.611 316.298 145.747 316.298 cv
147.971 316.345 151.505 315.667 153.933 314.13 cv
154.049 314.057 154.203 314.09 154.277 314.207 cv
154.35 314.323 154.316 314.478 154.199 314.551 cv
151.746 316.106 148.226 316.798 145.91 316.798 cv
.231373 .2 .282353 rgb
f
184.499 263.874 mo
187.003 259.715 195.576 257.55 200.628 263.832 cv
184.499 263.874 li
cp
.611765 .623529 .627451 rgb
f
174.8 259.885 mo
180.276 256.447 191.736 255.173 195.11 256.51 cv
198.484 257.848 201.158 260.84 199.948 261.731 cv
199.344 262.176 198.102 261.81 196.733 261.444 cv
195.364 261.078 193.868 260.713 192.754 261.158 cv
186.619 263.612 184.84 266.546 174.291 266.188 cv
174.8 259.885 li
.976471 .596078 .537255 rgb
f
176.704 268.42 mo
171.041 269.824 149.661 275.067 143.2 275.8 cv
136.779 276.528 122.826 263.793 118.16 259.247 cv
117.215 262.075 116.206 264.586 114.425 267.143 cv
112.059 270.53 110.447 278.666 111.572 280.493 cv
112.554 281.954 115.202 284.174 115.527 285.396 cv
115.866 286.667 113.746 290.741 104.321 293.46 cv
92.4544 273.1 96.3338 279.757 87.0051 263.746 cv
106.493 235.08 93.2995 254.491 108.649 231.913 cv
117.532 232.041 142.872 261.628 145.386 261.178 cv
174.582 255.952 173.063 255.895 173.94 256.869 cv
174.896 257.933 176.613 260.293 177.528 264.284 cv
177.963 266.129 178.432 267.991 176.704 268.42 cv
.247059 .403922 .388235 rgb
f
87.3396 263.758 mo
104.454 293.126 li
113.533 290.457 115.551 286.587 115.253 285.469 cv
115.079 284.813 114.042 283.707 113.126 282.733 cv
112.468 282.03 111.843 281.364 111.428 280.781 cv
111.293 280.781 li
111.289 280.571 li
110.142 278.46 111.867 270.311 114.192 266.98 cv
115.924 264.495 116.924 262.056 117.891 259.158 cv
118.034 258.73 li
118.358 259.044 li
126.539 267.014 137.943 276.108 143.168 275.519 cv
149.552 274.794 170.399 269.692 176.636 268.146 cv
177.94 267.821 177.773 266.578 177.308 264.568 cv
177.251 264.348 li
176.349 260.412 174.657 258.092 173.729 257.059 cv
173.622 256.933 li
173.2 256.428 172.967 256.459 161.021 258.637 cv
157.163 259.341 152.1 260.265 145.436 261.457 cv
144.418 261.642 141.352 258.719 135.081 252.624 cv
126.324 244.114 114.361 232.488 108.796 232.201 cv
99.8313 245.385 li
98.7414 246.987 97.676 248.554 87.3396 263.758 cv
104.187 293.793 mo
86.6701 263.735 li
86.7707 263.587 li
97.2009 248.244 98.2693 246.673 99.3625 245.067 cv
108.501 231.627 li
108.653 231.63 li
114.376 231.712 126.571 243.564 135.476 252.218 cv
139.939 256.555 144.537 261.052 145.337 260.9 cv
151.999 259.707 157.062 258.784 160.919 258.08 cv
173.413 255.801 173.416 255.8 174.057 256.57 cv
174.151 256.68 li
175.098 257.735 176.81 260.074 177.752 264.001 cv
177.832 264.322 li
178.258 266.144 178.74 268.207 176.772 268.695 cv
170.527 270.244 149.651 275.354 143.233 276.082 cv
136.466 276.853 121.922 263.275 118.285 259.763 cv
117.345 262.523 116.342 264.887 114.656 267.304 cv
112.288 270.698 110.792 278.584 111.798 280.319 cv
112.197 280.914 112.88 281.642 113.54 282.345 cv
114.594 283.469 115.59 284.529 115.801 285.323 cv
116.198 286.813 113.878 290.998 104.399 293.732 cv
104.187 293.793 li
.180392 .317647 .317647 rgb
f
177.904 267.954 mo
177.913 267.941 177.921 267.928 177.929 267.914 cv
177.93 267.925 177.931 267.936 177.932 267.947 cv
177.932 267.947 177.923 267.95 177.904 267.954 cv
.498039 .364706 .305882 rgb
f
106.627 292.419 mo
104.746 287.675 103.213 283.309 101.843 279.31 cv
104.15 277.646 106.772 274.761 107.163 270.114 cv
107.887 261.581 101.353 260.649 103.517 251.568 cv
105.19 244.547 109.926 241.938 112.465 237.669 cv
116.334 241.967 121.382 251.63 124.409 256.064 cv
127.975 261.284 138.413 272.107 142.872 272.361 cv
142.935 272.365 143.004 272.367 143.079 272.367 cv
147.573 272.367 171.343 265.834 177.217 264.2 cv
177.228 264.249 177.24 264.298 177.251 264.348 cv
177.308 264.568 li
177.773 266.578 177.94 267.821 176.636 268.146 cv
170.399 269.692 149.552 274.794 143.168 275.519 cv
143.006 275.537 142.839 275.546 142.666 275.546 cv
137.24 275.546 126.286 266.767 118.358 259.044 cv
118.034 258.73 li
117.909 259.107 li
116.852 258.249 115.885 257.578 115.465 257.578 cv
115.428 257.578 115.396 257.583 115.367 257.594 cv
113.333 258.358 109.892 266.631 108.874 271.09 cv
108.126 274.376 108.825 277.521 111.083 280.017 cv
111.137 280.231 111.206 280.417 111.289 280.571 cv
111.293 280.781 li
111.428 280.781 li
111.843 281.364 112.468 282.03 113.126 282.733 cv
114.042 283.707 115.079 284.813 115.253 285.469 cv
115.526 286.492 113.861 289.817 106.627 292.419 cv
.211765 .360784 .352941 rgb
f
106.667 292.52 mo
106.654 292.487 106.64 292.452 106.627 292.419 cv
113.861 289.817 115.526 286.492 115.253 285.469 cv
115.079 284.813 114.042 283.707 113.126 282.733 cv
112.468 282.03 111.843 281.364 111.428 280.781 cv
111.293 280.781 li
111.289 280.571 li
111.206 280.417 111.137 280.231 111.083 280.017 cv
111.19 280.134 111.3 280.251 111.413 280.365 cv
112.395 281.827 115.043 284.046 115.367 285.268 cv
115.674 286.419 113.97 289.862 106.667 292.52 cv
142.492 275.703 mo
137.067 275.703 127.234 267.574 121.821 262.696 cv
121.55 262.358 119.611 260.489 117.909 259.107 cv
118.034 258.73 li
118.358 259.044 li
126.286 266.767 137.24 275.546 142.666 275.546 cv
142.839 275.546 143.006 275.537 143.168 275.519 cv
149.552 274.794 170.399 269.692 176.636 268.146 cv
177.94 267.821 177.773 266.578 177.308 264.568 cv
177.251 264.348 li
177.24 264.298 177.228 264.249 177.217 264.2 cv
177.268 264.185 177.319 264.171 177.368 264.157 cv
177.635 265.28 177.829 266.526 177.929 267.914 cv
177.921 267.928 177.913 267.941 177.904 267.954 cv
176.928 268.199 150.375 274.841 143.041 275.673 cv
142.864 275.693 142.681 275.703 142.492 275.703 cv
.180392 .317647 .317647 rgb
f
142.044 264.877 mo
141.936 264.853 li
141.812 264.792 141.76 264.644 141.82 264.519 cv
142.23 263.668 143.579 261.562 143.809 261.332 cv
143.907 261.236 144.063 261.237 144.16 261.332 cv
144.257 261.428 144.258 261.586 144.162 261.684 cv
144.01 261.841 142.688 263.864 142.269 264.737 cv
142.226 264.825 142.136 264.877 142.044 264.877 cv
cp
.180392 .317647 .317647 rgb
f
145.259 264.75 mo
145.153 264.75 145.055 264.682 145.021 264.575 cv
145.016 264.558 144.453 262.781 144.153 262.272 cv
144.083 262.153 144.123 262 144.242 261.93 cv
144.359 261.862 144.513 261.9 144.583 262.019 cv
144.912 262.577 145.473 264.35 145.497 264.425 cv
145.538 264.557 145.466 264.696 145.334 264.738 cv
145.259 264.75 li
cp
f
118.158 259.497 mo
117.972 259.413 li
117.623 259.022 114.558 255.57 114.301 255.185 cv
114.225 255.07 114.256 254.915 114.37 254.839 cv
114.484 254.763 114.639 254.793 114.716 254.907 cv
114.896 255.177 116.984 257.552 118.345 259.083 cv
118.436 259.186 118.427 259.343 118.324 259.435 cv
118.158 259.497 li
cp
f
112.556 282.672 mo
112.454 282.65 li
110.052 281.573 105.602 280.893 105.558 280.887 cv
105.422 280.865 105.328 280.738 105.348 280.603 cv
105.369 280.466 105.501 280.377 105.633 280.393 cv
105.818 280.421 110.193 281.09 112.658 282.195 cv
112.783 282.251 112.84 282.399 112.783 282.525 cv
112.742 282.617 112.651 282.672 112.556 282.672 cv
cp
f
112.025 199.402 mo
112.729 208.122 119.673 208.676 113.299 210.925 cv
113.299 210.925 114.317 218.756 107.887 220.73 cv
101.711 209.047 li
106.104 200.993 li
112.025 199.402 li
cp
.976471 .596078 .537255 rgb
f
114.001 233.315 mo
112.978 240.785 105.682 242.481 103.517 251.568 cv
101.353 260.649 107.887 261.581 107.163 270.114 cv
106.445 278.643 98.2111 281.237 98.2111 281.237 cv
98.138 281.182 59.3708 252.207 59.3708 252.116 cv
59.5007 252.116 57.9944 248.66 66.0588 244.416 cv
74.1584 240.361 60.6472 231.189 67.2659 222.831 cv
73.0608 215.51 78.1775 226.058 81.4045 204.453 cv
84.6262 182.849 99.6975 183.273 104.789 186.963 cv
119.819 187.686 116.927 198.911 106.824 210.139 cv
101.138 216.463 115.018 225.844 114.001 233.315 cv
.301961 .223529 .188235 rgb
f
114.001 233.315 mo
112.978 240.785 105.682 242.481 103.517 251.568 cv
101.353 260.649 107.886 261.581 107.163 270.114 cv
106.445 278.643 98.2112 281.237 98.2112 281.237 cv
98.1462 281.192 li
84.7956 251.014 li
77.5652 236.903 92.9822 232.591 99.1438 222.237 cv
103.388 215.107 100.84 208.314 102.286 204.154 cv
103.727 199.995 109.587 203.816 112.046 197.197 cv
113.99 191.971 111.756 189.228 110.729 188.305 cv
119.997 192.216 113.567 202.646 106.824 210.139 cv
101.138 216.463 115.018 225.844 114.001 233.315 cv
cp
.266667 .196078 .168627 rgb
f
77.4993 252.116 mo
65.1462 256.485 li
61.6702 253.871 59.3708 252.136 59.3708 252.116 cv
59.5007 252.116 57.9944 248.66 66.0588 244.416 cv
66.2083 244.331 li
71.5349 243.493 74.5769 241.239 72.7415 236.581 cv
68.2171 225.07 85.3015 225.753 84.6262 214.598 cv
84.6262 214.598 87.6834 223.215 79.0256 227.923 cv
69.4646 233.125 86.7386 245.224 77.4993 252.116 cv
f
109.5 207.891 mo
108.363 203.168 101.531 205.677 106.911 214.045 cv
109.5 207.891 li
cp
.976471 .596078 .537255 rgb
f
105.595 212.475 mo
105.595 212.475 105.579 212.628 105.549 212.916 cv
105.519 213.204 105.461 213.627 105.476 214.165 cv
105.456 214.7 105.516 215.354 105.603 216.095 cv
105.709 216.836 105.868 217.664 106.081 218.562 cv
106.292 219.459 106.562 220.422 106.855 221.443 cv
107.143 222.463 107.468 223.537 107.714 224.679 cv
107.968 225.816 108.19 227.016 108.191 228.264 cv
108.189 229.503 108.004 230.804 107.403 231.954 cv
106.82 233.091 106.032 234.076 105.239 235.007 cv
104.442 235.937 103.618 236.807 102.832 237.656 cv
101.259 239.347 99.8103 240.945 98.845 242.509 cv
98.3606 243.286 97.9831 244.039 97.7258 244.737 cv
97.4622 245.435 97.3318 246.076 97.2776 246.61 cv
97.2444 246.876 97.2302 247.114 97.2331 247.324 cv
97.2253 247.533 97.2263 247.711 97.2429 247.855 cv
97.2644 248.144 97.2761 248.297 97.2761 248.297 cv
97.2761 248.297 97.2541 248.145 97.2126 247.858 cv
97.1858 247.714 97.1721 247.536 97.1653 247.325 cv
97.1467 247.114 97.1472 246.872 97.1677 246.6 cv
97.1946 246.057 97.2937 245.396 97.5256 244.67 cv
97.7497 243.943 98.0969 243.15 98.572 242.344 cv
99.5163 240.725 100.907 239.031 102.47 237.323 cv
103.248 236.465 104.06 235.589 104.837 234.665 cv
105.608 233.741 106.362 232.769 106.898 231.699 cv
107.164 231.18 107.387 230.614 107.484 230.029 cv
107.58 229.597 li
107.619 229.153 li
107.644 228.857 107.682 228.563 107.663 228.265 cv
107.676 227.078 107.473 225.905 107.235 224.783 cv
106.748 222.539 106.138 220.454 105.77 218.63 cv
105.577 217.72 105.462 216.871 105.395 216.117 cv
105.344 215.362 105.318 214.702 105.367 214.158 cv
105.376 213.612 105.472 213.198 105.519 212.912 cv
105.569 212.627 105.595 212.475 105.595 212.475 cv
cp
.219608 .156863 .137255 rgb
f
72.4035 247.647 mo
72.2859 247.647 72.1756 247.572 72.136 247.455 cv
70.8142 243.595 72.6306 241.377 74.3869 239.233 cv
75.55 237.813 76.6482 236.472 76.8763 234.679 cv
77.1413 232.596 76.0075 230.901 74.6946 228.937 cv
73.1697 226.656 71.4417 224.073 71.4417 220.199 cv
71.4417 215.803 75.1414 212.736 78.1135 210.271 cv
79.9993 208.707 81.6276 207.357 81.6276 206.193 cv
81.6276 206.036 81.7546 205.909 81.9109 205.909 cv
82.0676 205.909 82.194 206.036 82.194 206.193 cv
82.194 207.623 80.553 208.985 78.4753 210.707 cv
75.5935 213.096 72.008 216.07 72.008 220.199 cv
72.008 223.901 73.6853 226.409 75.1652 228.622 cv
76.4846 230.594 77.7307 232.456 77.4383 234.751 cv
77.1892 236.704 75.9875 238.172 74.8255 239.592 cv
73.0906 241.709 71.4519 243.71 72.6716 247.272 cv
72.7224 247.42 72.6433 247.581 72.4953 247.631 cv
72.4035 247.647 li
f
94.135 266.153 mo
93.9485 266.082 li
93.8313 265.98 93.8191 265.801 93.9221 265.683 cv
93.9455 265.655 96.3 262.877 95.8899 256.891 cv
95.7571 254.949 94.1067 253.044 92.3591 251.027 cv
88.7507 246.861 84.2595 241.676 91.3752 233.511 cv
101.222 222.211 100.004 218.201 98.3176 212.654 cv
98.1086 211.962 li
98.0632 211.812 98.1482 211.654 98.2981 211.61 cv
98.447 211.565 98.6057 211.65 98.6506 211.799 cv
98.8596 212.488 li
100.599 218.212 101.855 222.346 91.8025 233.882 cv
85.01 241.677 89.1418 246.447 92.7873 250.655 cv
94.5984 252.746 96.3093 254.722 96.4553 256.852 cv
96.8826 263.095 94.4514 265.939 94.3479 266.056 cv
94.135 266.153 li
cp
f
145.749 316.545 mo
131.401 332.589 101.353 330.979 87.7678 329.961 cv
74.1877 328.944 69.7742 325.462 64.9318 314.426 cv
60.094 303.389 53.9846 276.055 55.6804 261.457 cv
57.7073 244.002 75.5525 244.828 82.9006 248.72 cv
96.864 256.089 97.4231 270.928 107.463 295.24 cv
115.63 315.018 130.656 315.773 141.136 316.361 cv
143.839 316.511 145.749 316.545 145.749 316.545 cv
.996078 .682353 .396078 rgb
f
72.7409 246.697 mo
69.6922 246.697 66.5749 247.286 63.9025 248.692 cv
59.341 251.09 56.6691 255.397 55.9622 261.489 cv
54.2698 276.057 60.2995 303.153 65.1911 314.312 cv
70.1189 325.543 74.7653 328.702 87.7888 329.678 cv
98.3152 330.468 130.148 332.853 145.12 316.813 cv
144.343 316.791 142.897 316.742 141.12 316.644 cv
140.977 316.636 li
130.791 316.065 115.399 315.201 107.201 295.348 cv
104.369 288.49 102.289 282.381 100.454 276.992 cv
95.7835 263.274 92.698 254.21 82.7683 248.97 cv
80.1779 247.599 76.5125 246.697 72.7409 246.697 cv
101.594 330.845 mo
95.7814 330.845 90.8469 330.476 87.7468 330.243 cv
74.4533 329.247 69.7093 326.019 64.6721 314.539 cv
59.7565 303.324 53.6965 276.08 55.3987 261.424 cv
56.1194 255.222 58.9685 250.646 63.6394 248.19 cv
69.7878 244.956 78.2195 245.919 83.0334 248.469 cv
93.1619 253.815 96.2761 262.962 100.99 276.81 cv
102.823 282.192 104.899 288.29 107.724 295.132 cv
115.786 314.655 130.364 315.473 141.009 316.069 cv
141.152 316.078 li
143.817 316.226 145.735 316.262 145.754 316.262 cv
146.372 316.273 li
145.96 316.734 li
135.325 328.626 115.831 330.845 101.594 330.845 cv
.819608 .415686 .294118 rgb
f
101.61 330.279 mo
95.811 330.279 90.8797 329.91 87.7888 329.678 cv
74.7653 328.702 70.1189 325.543 65.1911 314.312 cv
60.2995 303.153 54.2698 276.057 55.9622 261.489 cv
56.6691 255.397 59.341 251.09 63.9025 248.692 cv
66.5749 247.286 69.6922 246.697 72.7409 246.697 cv
76.3113 246.697 79.7864 247.505 82.3445 248.754 cv
80.7979 248.908 78.7606 249.579 76.5618 251.547 cv
71.8538 255.757 80.0281 308.521 85.9724 316.57 cv
90.4807 322.674 101.472 324.861 110.57 324.861 cv
113.469 324.861 116.175 324.639 118.419 324.251 cv
125.629 323.003 136.196 318.543 140.567 316.613 cv
140.704 316.621 140.841 316.628 140.977 316.636 cv
141.12 316.644 li
142.897 316.742 144.343 316.791 145.12 316.813 cv
134.544 328.143 115.559 330.28 101.61 330.279 cv
.87451 .596078 .364706 rgb
f
101.791 330.556 mo
96.3347 330.556 91.4477 330.237 87.7678 329.961 cv
74.1877 328.944 69.7742 325.462 64.9318 314.426 cv
60.094 303.389 53.9846 276.055 55.6804 261.457 cv
57.0122 249.988 65.1742 246.411 72.6993 246.411 cv
76.6272 246.411 80.3805 247.385 82.9006 248.72 cv
82.7233 248.724 82.5378 248.735 82.3445 248.754 cv
79.7864 247.505 76.3113 246.697 72.7409 246.697 cv
69.6922 246.697 66.5749 247.286 63.9025 248.692 cv
59.341 251.09 56.6691 255.397 55.9622 261.489 cv
54.2698 276.057 60.2995 303.153 65.1911 314.312 cv
70.1189 325.543 74.7653 328.702 87.7888 329.678 cv
90.8797 329.91 95.811 330.279 101.61 330.279 cv
115.559 330.28 134.544 328.143 145.12 316.813 cv
144.343 316.791 142.897 316.742 141.12 316.644 cv
140.977 316.636 li
140.841 316.628 140.704 316.621 140.567 316.613 cv
140.77 316.523 140.96 316.439 141.136 316.361 cv
143.839 316.511 145.749 316.545 145.749 316.545 cv
135.288 328.243 116.479 330.556 101.791 330.556 cv
.721569 .364706 .270588 rgb
f
grestore
263.376 283.53 mo
343.691 283.53 339.146 284.03 339.463 282.431 cv
347.824 240.182 348.422 240.587 346.083 240.587 cv
265.767 240.587 270.312 240.088 269.996 241.687 cv
261.634 283.937 261.038 283.53 263.376 283.53 cv
1 1 1 rgb
f
263.376 283.003 mo
282.757 283.003 297.321 283.032 307.956 283.054 cv
331.37 283.103 338.035 283.115 338.912 282.688 cv
338.913 282.65 li
338.917 282.55 338.923 282.444 338.945 282.329 cv
340.829 272.813 342.293 265.586 343.469 259.779 cv
346.069 246.946 347.145 241.634 346.639 241.152 cv
346.586 241.113 346.325 241.11 346.149 241.114 cv
346.083 241.114 li
326.702 241.114 312.137 241.085 301.503 241.064 cv
278.087 241.016 271.423 241.003 270.547 241.431 cv
270.546 241.469 li
270.542 241.568 270.536 241.675 270.513 241.789 cv
268.63 251.306 267.166 258.531 265.99 264.338 cv
263.389 277.172 262.314 282.484 262.819 282.967 cv
262.873 283.004 263.135 283.011 263.309 283.003 cv
263.376 283.003 li
cp
323.48 284.131 mo
319.421 284.131 314.333 284.121 307.954 284.109 cv
297.32 284.087 282.756 284.058 263.376 284.058 cv
263.31 284.058 li
262.855 284.058 262.35 284.059 262.002 283.633 cv
261.203 282.658 261.703 280.19 264.957 264.129 cv
266.133 258.323 267.595 251.099 269.478 241.584 cv
269.492 241.429 li
269.532 240.376 270.16 240.187 273.968 240.076 cv
277.911 239.961 285.794 239.978 301.505 240.01 cv
312.138 240.031 326.703 240.061 346.083 240.061 cv
346.148 240.061 li
346.594 240.057 347.107 240.059 347.457 240.486 cv
348.256 241.46 347.756 243.929 344.502 259.989 cv
343.326 265.794 341.863 273.02 339.98 282.533 cv
339.967 282.69 li
339.927 283.742 339.3 283.932 335.492 284.042 cv
333.149 284.11 329.416 284.131 323.48 284.131 cv
cp
.933333 .894118 .85098 rgb
f
336.253 255.707 mo
335.48 255.707 334.524 255.675 333.37 255.675 cv
331.759 255.675 332.107 254.02 332.107 250.198 cv
332.107 249.075 332.912 248.905 334.695 248.905 cv
335.469 248.905 336.427 248.937 337.584 248.937 cv
339.195 248.937 338.845 250.592 338.845 254.412 cv
338.845 255.537 338.039 255.707 336.253 255.707 cv
.807843 .87451 .921569 rgb
f
296.766 255.675 mo
323.717 255.675 323.768 256.193 323.768 254.412 cv
323.768 250.592 324.117 248.937 322.506 248.937 cv
295.555 248.937 295.505 248.418 295.505 250.198 cv
295.505 254.412 li
295.505 255.11 296.069 255.675 296.766 255.675 cv
cp
.619608 .74902 .847059 rgb
f
275.595 255.675 mo
286.153 255.675 287.334 256.096 287.334 254.412 cv
287.334 250.592 287.683 248.937 286.072 248.937 cv
275.513 248.937 274.333 248.516 274.333 250.198 cv
274.333 254.02 273.984 255.675 275.595 255.675 cv
cp
.8 .533333 .164706 rgb
f
334.232 265.048 mo
333.459 265.048 332.503 265.016 331.349 265.016 cv
329.738 265.016 330.087 263.361 330.087 259.539 cv
330.087 258.415 330.893 258.246 332.679 258.246 cv
333.452 258.246 334.409 258.277 335.563 258.277 cv
337.175 258.277 336.825 259.933 336.825 263.753 cv
336.825 264.878 336.018 265.048 334.232 265.048 cv
.807843 .87451 .921569 rgb
f
294.746 265.016 mo
321.696 265.016 321.748 265.534 321.748 263.753 cv
321.748 259.933 322.096 258.278 320.485 258.278 cv
293.535 258.278 293.484 257.759 293.484 259.539 cv
293.484 263.361 293.135 265.016 294.746 265.016 cv
cp
.619608 .74902 .847059 rgb
f
273.575 265.016 mo
284.133 265.016 285.313 265.437 285.313 263.753 cv
285.313 259.933 285.662 258.278 284.052 258.278 cv
273.493 258.278 272.312 257.857 272.312 259.539 cv
272.312 263.361 271.964 265.016 273.575 265.016 cv
cp
.8 .533333 .164706 rgb
f
332.534 275.214 mo
331.76 275.214 330.804 275.182 329.649 275.182 cv
328.038 275.182 328.387 273.527 328.387 269.705 cv
328.387 268.581 329.194 268.412 330.979 268.412 cv
331.752 268.412 332.709 268.444 333.863 268.444 cv
335.474 268.444 335.126 270.099 335.126 273.92 cv
335.126 275.044 334.32 275.214 332.534 275.214 cv
.807843 .87451 .921569 rgb
f
293.047 275.182 mo
319.997 275.182 320.048 275.699 320.048 273.92 cv
320.048 270.099 320.396 268.444 318.786 268.444 cv
291.836 268.444 291.784 267.925 291.784 269.705 cv
291.784 273.527 291.435 275.182 293.047 275.182 cv
cp
.619608 .74902 .847059 rgb
f
271.875 275.182 mo
282.433 275.182 283.614 275.603 283.614 273.92 cv
283.614 270.099 283.963 268.444 282.351 268.444 cv
271.794 268.444 270.613 268.023 270.613 269.705 cv
270.613 273.527 270.263 275.182 271.875 275.182 cv
cp
.8 .533333 .164706 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.0.0
%%For: (Tom) ()
%%Title: (Set of programmers_02-01.eps)
%%CreationDate: 4/24/2021 8:02 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26DoCqkQ^97&J-6NR<@="e`"#j7Lf`]6!%*8L3ChE2Wc\qg9J*L+kPD/@8d(mcjI5L3\9QsLghUU.41Mas5+d4K_X;1b<
%2D!`E(8^L0:KYW2DuK@DR@+lE_m"0p=#+_W)dPW'A4l,?P,>TK4@C7m(Jeo_e$XR*W#h1]l*+&g0BS/Rb-J;O1K?,P;]#(!b'5#j
%ElGeQ[9P207F/&Q4/Z<9>e!cbk>PBu9q'jNTCTm<.eFFg!2$gX45J1\dns5LdcBWJkWX(_I'%ZbC?7[$*tQ8ICo(<1<O9Z]kBV/T
%h0.>LO2=derBN#?2?`uHUE>JTn2s^o<RmI+UDJ?[c5V#IK!AZL980!YBct6A9`7J0,Fk4Sr[\ES^X91^'0]WTD+HP0_8->qYZ(kZ
%1o*K'>P\BJ2?6qCG`ol#EL8E@;UpkqcnWe@@k:dnrb;?EFf%%SNWC`2@g2M:n!aMFkT5`&%=_p+^R'or@4DqVobt!!X%1im6QX=1
%VQ$$qCUp\IVN@nmZ7Kl$'`*$3R4q.H2'1YtV0G:q@,o"EO5j48,-2Dg(3;?@J(a>WU[6P%4/nhqBMI\Vp.JiQ\9Pk('nAkJ_bSod
%+?W"N1,+Aq9>bdq*7$Qs'b/8XWF(Uni#U5"4flg-&`A*uH]]m2Ma/2=Y&lO<4tgP)%FXl"_cM?XX-8"]ImN_!Sh:%NXbMOCrk^^%
%heaQX1V%jcTf3@IojSuC:r1a@,4>S1I]dphIr0Slhrkf_P(nZ0:A9Y<5dl1Zs7O,iop^GWOK6cicca:2BtJ=jr9JiRX-qsMBUjb?
%C9^IuRPFN^^<r9m@u_GR3%h,WoFC_(mupFV9CmR<88sk^6iBX'o%3*_6(TIl,XKh&JSO!lr!7A_;U^P(^Hp_$5RUd?&@+Np`sqH9
%IsI(b9g9(D'\9d!0K(^i_H</PHM0Aq4&o!^mUXWn"-&X?'iO./"7.]].3a<I[a6b1^)Q.(l`",AHVmP'0!f8%X^%o3)TTg+Y5\8-
%^Xn6Trf)EEPJ%2IFBkDM$RBADUKY)E2T@3.92JL*d:K>2k!m[l5&aK$[;'rnFn"NR0Nq)FM(GtnJ3]8HQc0oljm:YS9=eKGn=B%\
%XlhQ@OM"N<%#B['0j=OT:*\/I[qV)%1h3E3(p-$Qa3i.A3/U%'/hCN_p"-7JNVA%J<SKe1rg>u$k-C8"A%GAd#H;`$S'H^X5:b9g
%O%`Qr^t:9D>_E)-(QJ)kV-;)Q1$e,!B92G4diYH*Suus8o(4#*Sm'"<beX!17mc$6?ao6gnTVG"b"qV]nG:lA`TqHK)8b0+23fg`
%hl_%3F%T'3=\14up/Ra%<'MFp4=<-eKh8XNs(j78[s,GGHXuU7kLFT5os9#2MD=j$5$+EN`Um_"QRR]sS.DU>7Q(^^-WM5diMLK\
%I=qU;;2%*WQ,<qH^[oIn&[`E-)BJ?L+dER<[q`$metpiV<3E*E=iSlJBpk8oX$98B8")e%f#*sZ7h%BW0P%$rdbVJE%T<8s9`]@%
%We=U<n9^.lqm.qdB$tcjL?[ER2[EZ^QJYJ>;a9cb%qO84?o8I<K.p<*=gH]<?1eH&:d!ao,K&(fkej"`3tIDLOahe2rMCle:MWo\
%hp`9M$f.a1Aq@u)h&rgcoCmgrW)tRJ_ro/HNrbmmKnhe%Ef*PD^//qUHuMn#A+ejup,jhkMqg/$r+X0loYpanp??=pFI>0)UD$Sg
%7YtgZD)jC-$ob4/0>m.qAUi`6Qn^i=NHKm3r:<!NjI[@piG\K&^Lok):cA[(3BJc3XR-BnOe[J%RfjtRf.qXo)9cB)=SsdgK]g@t
%`0Ir7Y2":_75fR3YF)HI6"b(W*BTS$S=K@p'45Y:b>!ApM(^e/^>.oRH/d"AI(>(e2t>uV^>*Z"jj%nSDQ"O*?Z'93L@rs(Rl6OH
%Ag@59jXe7*i9[f\f?_<ZSuPd?fi2C^4)*JmT3sqH.A!/5_J0TDh)6%+72jr8mpu86%\n)=k%5'X9Rh+?"rMg_kOj8#i'53BA'+WJ
%p0F+UbG>/t]KZAp@>AJm_uds'3^*G0IF3lRMLYKob!@adW9t)RKACk*ImEsfI(]D][sf"PG8#_kcWpK5N?!`gR>>Q@g[b)MpMeY:
%7O/LmPJG_kkG`QJPYMYfj60W\Xi&s?>f7ts>cPI4:T7G%$\O+O7L-)5bhiEYHEg;GV?R&T2Y\1Xp(Q=RqM?6;*</mfAruD?GWk;\
%h=^P=WiES%RI&j*,esj&fZeI:Q2MYD%0lY"&hKBOneo)%,/S6J<qKD$BM?lee`^NjD\e*,>TX'Kgb??aRpiDa+N?btVTRTWANm38
%^`KsU3KC)]r1/08f`=!FG/Nl>#Z1Q-7a1="Qt*QG0l6N`l&O"fs(hng>50>d*F5Nt`P:lYR?U/+c=A]P]9:8MbF4AY/lN`_d`?!g
%AGP#nKSq",GI&K15lZ%M36')1]bP6Rj]!R2l^nV7P,"YOO+nPXa"*?B%CG$VFR9jeV+XeHlDrb0W\r[@N5]c8@P#IMXZ/="J/Fa]
%YDMb;#d6OJf@]tcK1`>p!>uF<'ut=.)hh^N'[ao"6B:7]@.)DWaI"Z*%%;,tQobLlHaDKj.8:A+feo(l#tE66S<PAIMW[32Rc*B*
%AZAQ4F%9Z!$_R.MbnrV5h_sO)P2JRB_KRtc&H-gi2b9fG*7i#%(R>oR#3qM0FmEk:d/fZf5Q`L/Jb&_/?]RfB_7unVfuR2d\PtW.
%<=-::dXP6X%)V=??gNCmdbh'=gk'"BI2"7T7g:rAd23/!d8t6["C)?bB+1<CI#<@o]m`G/NRLnIWI&`5NVMDTmn9M+[=#)Hi4R_X
%.ZEeS2ii08"IR>BZFFVG02Ubl<T!"ZeH``YW1ra-4TBjX)>]]R(]qG&Tl1K5Z<>Vcn7mJ)a$Q.34m01,h@0O/c?JFCNI$<;^S@!e
%)XD#.D)G<7+E&S#GNrg"@q7!aX+n5PONt_$!>M^t3\YlQRj>C^1&i3<4/cS*dY91LL57&Y\Nq&frTaa63MR6&&(B878enZ-!L3M3
%+n>AEFKudJLs>.6N/9n8K3pc2A]nOBj$+ts(-C9Kmn+p!%"O9CgQ+GJ&!De/:GPeeJ[t5A-;"\sN!FFE+`>=C89q[#;=<_/LG>$U
%RcL2VeMG<9RH1*L_KQ6+;<"f%rd6=jqQAnR_uRls$ApVUATTS<P)Br/YM\#<'_*9d7>YIG`^IU:E`$^a0$5c-Dg,cZ-3c`TK[hH^
%1q.n"Aitd`!2LE`0Gn2S-DfgQbNAV2-,uqn`OIJ;kZF<RpM6r"[pCWJf&B7Mr:?c`ii'RL.I@piBg66P5fTP(T:"D33k;)/$oRsb
%.MP*TdA[raqid1A^Sg/BT4X19N1:>`J^`70^*[l;,1h94Y.54V2N_eFbI,a>C*M7VEc#9hBkYA(Z"kV#,1_3q=PLaq9WYXY<1@!*
%'<-/qUtWaf)],J3<$&j==UjD]#B23gV\peYZ/mi<f][ObOZ-^DZ!sKUf42Ze1"i@2.83`#"t0Y</S)`iCn^_HUr/u:ed&lS'6R29
%m*8WB;nRP221bd.QO^'\:crQ)aF6eHYQ9e^#Xb[qVBHrUgGJ-/(&CW(Y0[^!D)aO1:l2Q"QnNXEb=RPtRfqscPt2ji/=2.nP&[MF
%23t,e+P"&4\Q=/0:4gCcb'9E[\OBSF:;#46QN71.c]<D`iau!O%sfq2QnK1)jQu9c\ok`(@Nce$IC&KPi,+a^nD;*Tb'HGa'.NF?
%Pg7OrJ?*R7gi4B#`$"(da6lQ6_H:C@%1BPDDEB1>?J4P<->sZSrnJRt]A,*`GFN$BlQF273MssPl=E/\`aFh_+sf7HWq/0-kfLB_
%)kQ?>*[0hjdr-^.D]6pb_Q%=_RoJPQD2oZJrs<`O\^\sSZ*+6m3U&KUs./NVG(OJ7s#UQePPsAE\D)+Je:@G2XKf#4CmcgDB^a'7
%n'L$Vae%rS!]/O$NSSIj'pk+IhoVI.n`I^W2[[f?caSrD(e_t)EKhf1dd;+?E[\mq^FuH]ep$+*h$S)bB:-jWs'E5aLLFVFFEG#Z
%+shS5>ksL6k/-CU3R"Q=bGdh[T^]mZR^c3.2l_cTFiUYl*D9lkbRk6cfsgD5TqJ:!DGos&S'BOh.G3jF%T.YUIb+?bQK1E,\hcls
%cWe.MR)tqlf.,a*Z+rX)L7F42&T<cF#-ua]gB]#kG^\'\O%C<#FJDW:R9E,RH[Ym$^dqDO*JkZQ"jM:FNG_*YE2?T!-hh^:c5F:s
%Id:tO2%YthNg:oROO5=a1^P$o6:R0#dI.M^kl?hQ)<po.7ueo>UIiO?&i,o/N$]^Ch]FTl^c0L1LtmrKB/g3GrFtC21,q\Urq8d8
%qEe12KkYQ.b**L\@iKh-2\:GJ0u,V+D>mHX%s<tYEX]akNVOLn*'@Um](g.bZ_&4%dSKf*#gsf\n9=8Uq0uGB`sL.hfYg/jFBjp[
%[Zpc=TnsU]SW?45M-RK8ONMasZF<Peh5ZAJrZaiY@Y!Eu(R^)Q:r]<P`'cWb4q$_</',>#M()>aGGPXFC^PZd*%)Jg@U"VEEh$*:
%qINM^WP13g^=5Bbn.&N,lDA15Ah/%&IHcbl?^dM6+'ZX.W,qg199.bN:B,Jk:\"@q&lsR]EgV]=nA^*GDF=+_VOQ"JJ2-ncMAYD$
%@H`'%C`G/,m*G;#9Z[t2AiM]Z!WF/s0B]dHb`1sDNQ\%i>gIYc[%kfDVYKn]546?V)b2,oih?;WlZ+Bac(0)mA'-nI%rJsB2#e&1
%BJI:Vn^&U(g0Kle'+\s>U"t6S2YMK2rKY?rE+VRoioc:&E>]7,n8V4Uk3.mpA)/7erJcn@f&UGfOMA,i5u,PE(m[Q#22PhuRQ/;h
%RK/NY7Hce3:is<!'V2'MiDqu:?4./*DT[?)T]e<L.%8ZN)(A1#j0a3YbJel/`8fqBBA:s%2[E!_2ujqnhj8n&D@h[k$4bmsH:-`]
%]r&j,BcZiWo?dRVO3i/5[TrGD'1Y/a+#)!`WH:"_gFHlG33?KdHt.<T"u*.<<>sIY]Kt0W[JW3?`K($Tggd:8dQH4m!`c43X6Igf
%Ci06O$H47X*Q'dKe"D,:oC07j5-*dYFoT'Np:F>WAJ!N8K/T9"55C8/ACs_WVW'R#3(`m[T'4f39)j-,F<Er_8p]k_R+_XFWRZGi
%qA.hajrH<W7o*fdfVfH&ofm5e`Zi/F<pIUq4`*`Ndr*-P`l;%"5[hsnOi/(-XsCa"!683;]u7/uPI-[52`L9hrmQ3(UE?lb96Y8q
%YU8en`1<C-Et`b8im,O)cA`l*S@EVRGAcEc:#*:9487JtGW]WAa!-r?c4uVS-.b]s<E<RNa)+^T,(:t;lu`m>[`O(lI>m^!O"mVA
%a=rR$I>m\4>J71`]kpXt*a!lDTW1t@%WJi?H*18nW69.HcZ6#WeV^&hMPX95>Q))P7qc(%V&pXn@Gq/8(C^r2]TIe$2]UlE0,uHH
%?Xs$EM246/fYf&U-h6Cb+Q(1:l@h6MCp5[MUE<fW)XPdB4MHGsm#PbUrlsS@K7lqcd5Md)A+a?,N@`u%]e`3$rRUH(kj*0m^Z^&e
%BBT,I2b7:9I5C_/0<NY&mdJ=YMR6V1oYulEUNC5N.m0uX"8->W<kQCpMt:$fF)aK%*Z!OJ#Ye<6jmuG4*/nr.f0-7RoiFCP%QdjS
%9WYd]2:o_])&m!C1$8HlF8Ru@Sc7$.(iQ[NW79Rr;Jusr9hh,WP_t06&/T&&`R@$5DZK8cqLIs#p64N,qM@FR']"?Prb]eRrm+4/
%3$F^n]-id"AtpV1/-W2fSc3KKr>ca]%.`R-=`e$K*>)ej.QR%!>F%RVA0u41LAkF"!t7-4mbJ;m3)*'T1(Ho2<R+Vuo3iWh\0f?Q
%:?<=r"notOA.0G6;3:;uaOn:rkf,T(@glW5a)tl#lS-_GP:W],7G6b)_/WbK\<Y:JXN0PGqeapnN[<ouBQEdJqJk8KY$5uYpOBn.
%d@IBp41P],;O8f?-"6iYTK0p>Il`"X[u@tEd<,A8\DT@V=QtrgE8+>nN4O6R1flk05EB+[Unr`;&'lk0/FW9NnZIe,!L`'[*ZM^[
%-JtUg`gpM3rO[@Wo-PYDJ$?l0ia&K;YrK=Y1at0l_kuB%0`@B7fHDdU\;kK!4m)hK=a[s",fB%7-kCcXEULsaZEXahEAFF\$l?,(
%5(e/4frLQ&bCq<r`O.7,oO)FWG^hb,_NXdi@?IZq+as,-Q/TUl=jf*"@mXe&OP043RIqp`0bJ#m;;'[UA0-\\l1sa0/8o+CG@ge!
%G+YnOMh;+ta5p9oEdm%K`5bl,%=YB4^7u`Z'D51Ph'!hs<@gg1*ts]P37<_IT5J:*iZFJ#N0)Rp/l$-3Ig,7&p'823l#!\m\L=@b
%OB-l/!i/8)B<FL?m`H88Z)l&L>_3[1P"[Jo\i.qT(;eHF82I=$_E?X*AEoL)ELVTXe%K5LJB$N1:lDo5/\K.?RXb/!IsWL@bu_Y#
%jD+>]5%>.U1fHLENO<f/EbXm;$E8rfD![KE"CStd%JB%5.[S=b-soDe4Y@Lk9D!E[IG*TBV0O;b-U^5,:?MgHlS:[icu"O/3ks.,
%L+l@$%t?-qe/A;Y"81D`\U&qWqA!J/=,#Yk"o\_7R9M6W$\n;$KX:B.`0dr5M6hYaohJ.r8eXiS0$Thh^EibkW%M;CD?7\=mdm[S
%@n5'KqJ,fG"rV80<QV+BL+4"C_VPf+r$AgZet'"f'uEPIH5NN;7%,"m<HZfiC!+YJp[bTgRDqnroSqT(VPQ.nNK9]+,P)`MG_dI+
%h[J?Pr\K@kkF17-B20?bghA;[Urq5JE386=6Db8GHGdO:BEc3j"GEYO2dXm[k.ST50,?=NCpb2fXUiH?&m4Hs0LoF#Lr54_2jJ@R
%7p+EiB_r8mDBO%nH6u?fR'peW#KM"9JIeP0V1TADJIG51s)lQ$`s:4?/^J[._B;4mPdjIeopOT\MRkl'd5.9lK]sC%UOJ.S.dSF^
%*T+7P_KmE--c.n[@6Frl9SDg#K5#"-lV*!!7+b7fD1%YS,u$=KAaGg?Y[A?\16<RU.pUQs?l-GhANMeuYTj8'$D\74`'Bp8m(P5:
%#eZ#8Squ`iaGs&,$Y`8gJV4d[R7%<m8C%cF0Z3X4Baan_*W-i^c]s]%`n8FK0c%(k,IOFa\a&?i@==BbQZ<ODXiShEMBLi<U+4M_
%d^(L^"YmT[("f`'Lc/NXG(UT5-IXKu'+TMrK]<:7_3'<=DKRA]'G52&M5D&m36Js<a>ClgqZlEt;Rs#8%2E[aB)j8$ee6m^cUTMt
%:l2um3D/L,l$I`ZEutqW%@([rcRsU:B>hI[(C4mViNN8%UcT`<mO_c`U443jM(,;r;M+a^F6eknF7e@:qX;sE@@I%JK=(nalECf.
%GHjN.[89RZl;a0XgaWo5qXNc^riDL)X8ZJt-J>fXDBn@:D\U[.Hs!=bUoK*CRFA"2!CVpN/UNi6d'WI;hs-]'^[IM,gT2DBgO0<J
%k&g#]WglL-ESmnLRF?U(R5:a([k]\#LTpl&o9d?IQ/s+dnM3%-W14JA.k?$,T4^oGDEl`c`8ejmXT!/K#\CSJW>>([_V+dn$]-K;
%;U@1,cD.Un;F#Vo3`blD'LpI<0pI)&lR^3c&cJa?%C/mV,QB*bbSAT.@Gg-!l:;Cqs-1PiJ;cr;J0),>4R.E2s,N9%0Hq`R_)UKW
%NJ1QJq$!bYZK[2QDaV]NYtF:r-TnU#Qa7M,;lLX^j^eBPRC3Y&Rq--gm*_<N7Hopji:mH;@@.r>bb)WZY/(`GB23=$:C>Qp7Ye)p
%mI[lDe,HRS"C'f/p?8aZo@q&!-n0<$<*E=c<_\Sa=sGnI&94\09Q9:\J(:>77ZUWrs8L8XS44LAFm1pNHrs*SaAKKr1S;tVQq&,p
%&,MGTdr=)Q7f:#e$cC13"Ro"3$er5PHG^_G+'mJ+>i0VHk2Y<2NRuBoPY?:8ku=f)s4#(%Q62Ksjg=`l.#2s+&dYOnX22M4PUH+D
%gBb_`nG6PkA:7rt2/iY!aQS!"'88cXb433gp>1pf*B#>JC"lBj;m1)C$.h%gF/,sV]W]4Rf>c-X`NrP30J(apQ)KL3S=hs\F$*f7
%#OC*LMEj_?Xu?L[acYDATT>#-hW3HAhN,P/Mc=hoQmOEmbM*sNr],;79Ac:L3gG>ehU9$Ha"c?n%,I9qZg$b`YYL6O`MtEN>0MX?
%JQQF2[Mb,%VA-_[29p7g<l.1*2H#6Dek"o.WCfODeN8)s;6<eILR!b5Z#+"N7p%C/Zd#eKhUu^kCU$pbAIG2/iP!E,3tTZ-bGbiB
%DXg5aXqo1bd9_\<r$kmSS>;QhVLbeumB'PE(WCeu_D8'SIZ<RDYG:*-IOg,b9DuMnc())@gAIl&OC^R9__5]fgC;_U/mC*Z70L@(
%1!8GYLoUV1Ri_Z'_t&l8-q=!5F<`^gML*L9ITjUba(;D&Z!+,gg\`Q!3T+(?_g`k,A:5U&@nUqIDI;"O&?7sSSa].:CXXEu>%,pu
%mGtS)9$tO5aoOc-)LEJe1k+p:!r84\@;KP]"@Es"[F7V"-p+EF74iWo)@+5ZXVAJ*[=,[d;"V\PWph653Qh?UR4keC-QNm[&<SGD
%c\e]B`b8W-hLa7m.&BN=BdK7PjVmfo3inb:7Y@")REY=_j\qGFlYV=LL]Y610[#]da_U321FlhQDM<a0PCVCG<bp6[EQC8m5_EQ<
%bO5e>@2W^K7>3E>m;HMc705QHSfrk?YM#%_CDDOI8uXR`)DEe"M[3JY.CbCJ45HeWN+V<\?T.Q3Y>n6'C)nY@]l=n;HtlC!ct1p4
%Kjsn9G^s+-X:nCe\MUZjhl]\@l\jl-+RXuLbC0HbI=&LR/@s?D97;dhgNKk!ruNo;;SsJ[!hKo\[SA'uhTk4t]LuEZK>372el*m6
%jk2O4d-3u'"TR6Glm*PL4[AJRn7"=V^8eq-C"5qF:>LuSff],GD%7GN]q1&(JV!\b\dU:_BI9#?T"('L96-#!h7K_AY".#A+[b>;
%HNnmTKB9U+Arc^D\<N^f^@i\./;tdgHJEHgH4Ri8c*]8E3iE_I8ie(l.,2ZkG0_o6-/u0FrR2.\)e"H!RCVm]R*2A1l`<k-*1'U#
%;SR?i5eKtl]:_(.?=aLmQ;HP+o\juP]K!\,MDhep8F,nP@A!i`++`0'R9h+C2[ef/01dFNJ0N^Y%#p4g/25.1J5iHaIp[p6UQYJ)
%2,+eo#`a0F8PnEa3%"b];AK,.NeGh/Fci7PhGj9hoQN_efCIpn`L9XJ,LR\X)Ce%kdnh^25XJS]TUms.ACa,##-P_65WCPjOj]09
%TogYo="mNA/u>0:$&(\R9Z3TWFTof`Bu8U.,*qRaU%'lqZ6#(F7u_+d4E!nA>;9lH.qJ,pkBdk']fBBDQC<WBf:"f,Mj(k=^9$GB
%$E7jENs+n6'_EZ=NoZ*c\D85gWgs_bC_[?.6_JB0oq:Gkggjq(`*S=i=3K-F`(:WK2]8s8=IlCQ,ooRZL0<#5>9"-LLQk:f&-P$u
%l"C%\2rr:gW]]KK2i.e,0FT'j&'@=;qfX,Wr,uA+]"Ob<7E)aY`B:9\ho5.d1Z!EeWUp8Inj6=e%udlSloG$PA2!\!\=#;/#@/Z?
%TO0.=?44>K//0$3\Xb*BZ$Jm2Ai-mDL"Za;6:K5*>D5At_gOClBAI(lPU(c<I7\)^H]1(O%C)HIR`V.6_oUT$qm]:fUm>pca62m=
%\li4an&dM*oo-L\Xi<]dLPflS;!T5X[*eb9bBD,7l*P=qd!<N@mNkLe/R-\m>?2Qslp,4N1d2&5[0eW8[EdP^Ql@L[!kC+XpP/Lt
%+q4]tjJ/iSbJgeeFXQi<X:+sb(:Q^E%3WYOLB?X&2Ha?U;o3Q&$7Gj3(T+BMj:u0bk,3H>^#%^oFQ@aIn#2<t?13ES\!M%od]$7V
%*lSeQ;Er$(RUDH.^8em7[MWBM27l9o[\r1q>]pPAF`=NGnKo.?\On`I0%L@]!?NE*b.KKk12Cuf&7:2pS^KM@XjnlaFY2$BU0bBZ
%J5sGo4Aon6PAhEn4NRL8k%HO5@Cgd`NEn6LR`c_*=NI]uBXYKhR6BGE$e^>N$EL/0&qrf=5In.eNE0N]BRP6^G;a+l17TaWP=QrW
%CVdj1[F<(k-Vs)gV>V4Hb#W8Sr-7VmI!9nW?J.ssb&>PCXF,$_CjH%`299\&Ieq[RIp]hCRXMnKqY/ls'8cOg)i;Lcqbr?igrh-m
%XmbUmmf2&:*t=F<Ss<Z$$i4hGN3C:&hWKe:I@,:SInfabf:I]BeVn)ndD:*Oo(i/FICOd!^M\KpDnj6B(&kdVq^YJ4F^K8TrfCI+
%f/.t_oj?H"qCjj^QTn[H&&+U`VtnC.H;)4=^RnbZ87*F2f@8dNRB&K?5!@]=j.#Afb4-+Ynl20>jPaR%4tI'?F_a,kJ&g/"pq"!2
%ouZqgHq;XlJ[8roSsB,PJgR/$\PBld@;Gi>oAb>V%rUWPoBb,"g3U,'>><g5:ES5)98a%Ua58C'>FTC=/Ah/:kKU>[b9&[gn%Y7C
%GZD)b0\.)52SG\`?t"1=EG99+gUl%V]oUA!f+W0!n%Z3*Hf\nCq_ENW*\Y8-?u75+f9S&\:DTZ^TuZ[60/T!ac+./t#?N!HA(.XU
%b(Q>M.H#O2PT0-P[D*t`n%\]cm8qu>o@,O]B`F<Gffj4GfOLXYH[YP9[m07+`UgM3*tD?_1J_Z82OC9ecY+qVnbpYJ`fmIDS$U(X
%&"]tQEkeb_/S?+gqu/dkejNApfC":JnE)&3A7i$ZYNC`Z[B2r'g\\/N.XeUoIJdQ"@<6W_4T#+7m4E/BD!ee,]it9iJ![<E^.Kq=
%WKo],V8CF;eY@oG$L?B'%#tC6q+jeLj=3=c2F!^MXZ]nFqf]C>l?kmDq2aO[[JB0lCfas0Dk<@-CTFYq:S6*^ITooY$snG=fZn<j
%Vq8'4T&o=HS256KGtXEDHaTC#((43[B/%KXl^'I%:3#s*QFL1%gU,7uYDVo1_R&q4B<2#@EbaW^nWUYk[_)FtqSMM4rKiB:ho,0"
%=A2CAV=TPCb_pCr`5Z"Q`*6PD,bD`O@]!(M_<)heSk@5q^&+CGYT,c5@TTU'>r;<$IE&b\Xgt0Erp.:(bUkrXb[:/?Bb<b)Qq^9!
%IU5cC5MXmagp7dA&i1SKna,:a#@)4tfmKBYH^ai!R,:"U-6Bg'8L>3Z:TYoaSpWOi/:Q=NQ:RT!c6no1ZB#Z2rnqoc<4jnn:KR!2
%m+NC;iQOK3R;a6CIn=nE[%-WXmFmD)9>3qJ^I`fEXJED:<T<Q8>;,O-aijY$e!%fgM.[!sOB>_9Y`W&f3.77JS1WVkC`RnQQ?Y,_
%qNTXh023g#/_3r94/nXs`88ssq8C+N]:F1p[[Ko1D=>Wc)tVmT`(B@N<8q3RiF_)el/PDFoBG'M0Ce.HmSi-2Z1BYhG&hhlaLj%Z
%9:TXdlm+3AWG:F-epNV$0>IOY../IT-bcM9ISWob=tc`cgSroVFD5T9C3FH?G&$I9h4(Btor$s%@V+]fPe!8eRBjeLSq`YR^+I*i
%o(VRu9s#r_5#"2NT6`?eXSi(peGA:cdF?a6=)r'Qo6,"dkL5@fWVt&DS3"m-/kisXSfCP>2sEc'<c_2<ValTmWO"\rID3"(9kE5/
%$hDcCcVpYBIiH:)n%Wk?ViJpoVJ##>bN\ihg"Yc1,PT0aYi#?,cE+]5mH7E5kso)^cDR9TIeth4Z1i9gqSeT-28/VTlLFM_Vq5tc
%ptOiJl1`ZupSU4\V5`_/6)m$f?6&()^KIbSd4j%'_tD4;b3\E4]rCt.kP+C/>edeXnE'K-4`f`8[sLm0:&\Jgl1Fkd-a-.!Hg;X1
%rk0-AlJfM5Kt#@@_hXMtpYI6`TATOQFE2=R[64EXhYHT?bBm;t/%'`#lLX(1@\rdcL7+HX\$n0":qQaA7dQrY1N%>X@HPtom$!hp
%oDE:aq;pqcRGCr*k@]gfjKk9K;q6(J?ZK6*B/8AMm``/hY6Qk[o5oF>O\*[JqcB3;ZcUmJBi]OY/$mD(ioBC3m-5Q"1],rjGr<52
%m]%sf4T"X<m"a3=cXp*f<mG$)cH"VT`nTQjD/oRBrRo?J`VYSPd_#DIjE'nkb3P<gpX`^djo+TFUWi[h:J[S=J")uZh>^BbgqA4*
%^0eCBhq:3,?bLdZ'[lLMPK/NjjE^64c4/Rj\]<V*lJ1OQb.G2iP*'h+Kqm>3:S1PL\]i7Fc<P83FQ]Z>YGUINYD)6:V=fOpH#I?Y
%ao'U@Q/ql7mi.PfKB-$ErnYcj\+<sbM-'<%-c['9rd2q7*mAGJ?[.[&rAabkrOh\!_:'4klG3l*?MNIOCbbV@I51Zji%15ko\_4r
%q;[*BnatkYr;=Os"j8Qj0!)^Q3a:83C7[*F4l"+1]\S!;?:[djAer,JqT4HVe=fCM4IeL(?@-@&D=9W8Zrm8$E3lj8ICPoP9L!q)
%q7qHHrb?@8bb&1S?(<Aa?S*nU4BYeYQ5<U==80GD?$qo!0.rhUTBsP#TAJug?6p+8(Mag/biHXpa5*OQH^7;g].@BXjK"KT\&ji)
%8,&1G=)VCjF"[p3V5]gTUSYrI_m:XR1[Q`qf3Wi-g0_#:9-<$'r3A`OkU_-Hpi9ulc)j/bm5NKqk#3Y8A\P5e9UdCG)fO!-f=#0)
%BOER$4h!er#dH>',T\&P?]+68\LZMN4\M<%oqEkI3&n0T^1UM!lgaoWlUc(PB>%LKo%n]e+Sjg8KL_X,I:rDj4hku9Y['9heR!I6
%^9J3][?pUMi8-9egWkL+Vr$j21lP\>XtRl:O1\Wko)6FiI.uQ*<JKu2<Fj(_=)f"Y*`S]gXZ,?(?XKFFhCS'?46a]le+s"4J`f4A
%YkHT>`Rbpof%SQ7H[L'[lCR,"Epi\[rN,bOPB=KG5-kD%p\`48GM^FTlcRD8M\!Hm#0LP%s/l=b`J]oZC4/hQ+.fS#q:Siq^'3!_
%c`Fnh?QB8bZR;U-p#bA2i+mRu38]5XE;;fnrTiS,Xf2G[YG]^5hhRPpjm;Nt%2rj?hQ'n$7BSl4>1qQ<?WfDGpq3qrH2I138i:1o
%I:UVt4-,u8J'1#:\4gg*9)5+A++6BRnFc>2e+`0hT013=5Mf%=VB;G%gjA_(o[:":4FI..r8dCfg#j`0Y9%LE3W6/i&pR<sQ=caA
%0!8PEIBlrRr,f]\F7;#ool/r*\WdGm/aYc0HFE+lpR`JNbp8llnlM[<`0\eOX*3c<G',V4raPQf`S:"7Dtd1sC\JoVI9R(cfCE^\
%8nNA9bM)RP[8K#u5f9ZNpE%uQX4GR[oqQ9pjnef+o95/\mqS7"Dh"srnT$j^h"^g@Ecn/LFn]QjC%b,AF3T1g^\R"j@WaL(+THoV
%rnD@VXd,a+?u%F.HF%b&?`cFd/C-P0mO\3ASo;sD@@65MB@=E<^G!ft?^S[1obSPPjf93d/iTE8a?RaOCd1%2ojiDlIfA*qRuch,
%m;Ki4o#pit[J05`35+hPkkO`?bKH+=afDuNO-Ne-5C>J:7K.3j_D>EPRIeVjG93A[3*3Y3FFWu"cK30gDnGTbEO,He]=,G#r$H4H
%ITp#Jln*GuQ[>e$k/Y0EcLft"rm@X'rT*Ctb5TBse(Xg]<I;7UIIlb'JT[BL51k>\WHN5arDJ'7pj?Cpm;E`;?LJ,?1Gm>Ao*'@;
%E,OpU4FCmno+"RoV5K+E]f.U*QGV<68'dM3c]5a+c^0Y*;kFhcrSsf:NXqH=p5^l,k@\]SUedlFXF5K(r8toEZe'-<a"(4=cBlT2
%AG>Z:m`G:kk-qhkCIaPBH+SBBroWSQIqIt_q>A@s486_WDt!B9k#U>E>j\EG07:Ir^#/V_k3W'0O-]ehOij8F=MER9qVh5.Eq)MG
%F+3;I33PI>pr^>GnhKatm)c1$a6CO?opP0%:S5p):Hg-i-YI.\cRX@cB:n(o52,g;4O/4ZABLJBZCgo2r[$knG]T=$o4IT9HVSg`
%l$&I%?g$NomH]'a>^cSAZ'nGDgHPM!HM[!hD<f$FK;2C_qr%/#b2L1Qfh(>ei2lk7lnIhq<DR:qoMJ&)9G_&QV_[\XMf5$8BsX>O
%T7!.>j\+&/%j$4&$ZkVaLZeAhn*0HB\*n(p=6Ior$eqtr0D:H=:G8k#`PeVO]!-4#Y`qA_b[$LW=nuc\-2[P`o#GQTD[2$]2tnH.
%rU&gt6N13R@f,[q0Up6jSSYBR=-[^#<:8/rCHqR--Go]1]DRljZU[O]r"j/7A`<VnE5/W&?[O?!Qd!LhLL.8iI/1X.>J*(Fnu-)e
%qpVBoUXQECi^2WN%J/EUqS`4/FuqQ]:>![mr%.[>UjW$SHX<,43=l,X8]1Ami7W!e(@,A_pjT,C:T7;gAe@b38Oh)>bNfk+8=)-S
%@Q@)VVckl0g3S2uSg?2*'pe,(Krn<q8TeFG<2t_j]"F69):*CW\4V\K]\Yo=qe`\o<'S6?/lbMMp48(@:K>]GeU4CHUMi1p:8U%1
%>=F9AV(VlUoR&A,juR,C[WPV4l\41W4IAK!_sE>CPBRPliO+!,[]p11hHIM3?R<Sk;UB`4X!<OZZqj2Gc>qZG6Q^?nohN$4\t8)j
%V9<?D?ersc7IO<L22=+P7:Yjc^Aaj\r]:Z+hK`8RG6SRIHp@JAnF)YZ[Zl(T3-*_kobD=$3k%n]S1.O&;2D\Zl+s\*P`ccP6M`Vr
%8;k0+L0r]-ZKRk3T]Z4;7_#l?<7E_`6&n/'kaKdEUTD[]ro[97WbV/W<\M@25??b0XL#qGC<)@",crOMg4[e4<5>\"_i?EJ69b[I
%f;9K+%DBXWr7X8rP472>'!l]r%B\#0$&eZoI:4Lrq=%0mWo`(_(96&&Y.#r]#\MW7,\7110\:Y%[M?M[-&hE!L00o\8MWR2CImnV
%VfG]^Orf%t$e8c7="9gY>N5:GhcV/6QYiN2%=l,-coUVH''ii1an*gT\C@qAeocLG<-nt9#4FLI[rpbEaApMjNMJ$1<MIs$EV@l6
%-te%:g`19=C\1K?`.<X3,)%V98-;GaRg-G4#9eY?\L6/AU?\pURQ.RqjDuNia`>(=7j5T!;jjlF1X-T%Y*(F!HKNPYa<ICQd$DK'
%DMMQj[+8X`j?"?CBNNVjT8XD)d`QQk8c@iV*kb1fX'YY1UpOp<0'KsrQ$V8bmRXN>-RNt.N5S%Ajnt%^X/sl*Pmcnkn#/df=1V5-
%T<SY_X+Y6kfFdWgZ4,^9oFZ52g0(9(!\/3B6k"JeN7P3hj25Ep_t_ABWYNt"B9859lLT&];(Q9nrH_H>^*DGaIhWN[XQNoh;UhO#
%+f^_88-T_Yb,4gXb2MqL@s`:Q'nP['>"R,dI"eQMlp#TsgmV9Po8@iN>556j^D%07?/'A^"@$BRlIfn3IGg;>;%hARW`"iM^:-&(
%6-+!!4?.'q\[nB)a2*;VmIh%7)tL"a:;Jo-;1qZa_/O,l.A*ZC-?X)O9Vtal?TC0on>(-9e?sseDE_Ok.U+)E[a<3SD16Dqf9J_!
%=G92X)lFda_aG[ViM&8rTk=L&F74!FJ9R<ZL)ikQAap2nh:Dq7l$s/j7f1&[DMs"oP(1rF"B^0.o5Z=5d#O5<A99;/RmZ%T$E^LM
%Z4isXm%>/W427<sJ[N2IF0:Y69!qh`;5omtXX=3t$e5"UHQ>t!SYk[:j?1s[]dDHnZZTf%Y3X<W_q#KR:)i2I>S_dcf*KVKg'Yg=
%&O^0>V]/]a%Z"X:Xr!+"3f&HdlAjI'qTYZY+@PC"9k=Jg>><Y*'Y:Xsrq6C\=MDTd'Fb;L4(j'ADiT/`Uf)@C/=pN,3u)RVZb8Za
%9(bBEhMV9U;sO@Z/r_U5;q--SWg<,Qrp,'Akl:2.7PdlC:ri-i[RndsqL6kVJMcrIkW;AnnpFq%E0IHh#f?t#V!est(54?'JK<Bt
%CXI'lkG$'k8k8_IqQKq0Y"Pr1oKFFhUhADiiL*![E?%PE%R#`ZGUCR1qMqgoR3F(C5N$/VPS_BHQ32A`^hCC+Ep]Z4#JtFC-]-lO
%MmhkH-[sF/8^ii9P<SqYqD<dp>/!QQfH)++4aKp98hHKe*RL"IVZrDudMIF-$9r5./p3s+9BqLs2CdfZK;MGc[k-fUg.BVuH!JCs
%#Vlpm67-E+!^fS<Su"rRD%^6b0Pj>50jPl>o96?;8N^`J<ml.B_OaIEqD>Wh$]e=%1U1X@JL(A4!al/D05)A>+F;HO6jEai@S'-)
%VKZ.6UfVM*=reL5Sm`4e<e..UT3`J`3oF-B<g`O=`P>)lJuiVL]1JLhq0(2,#Yj\#5nBReotNEf:cs0[hB34$Zo?57`n\5smO_Z4
%S`gT>Vgk*9aTrf9#3kAZV*]KM"?N?V8"`8efWWaJcHZ;;2'P-QfBJEhr`+iG3?:Kj.t[C6V[l3'U\ReNO=#hC#IWmjL*`/C#9cWh
%:XTEW9$:$,[P+@Ua"jl(Nm2?R'$>(?2/J%=g':OBJC%f:]Pod#oc8@R9dK02UrI7[J_I>!KLa@`iTU*5@lYY_=!WLEKPhAlfTq@_
%,;Q`J#m:%WQAn>.pI^Y!QVCC6"2(74CD%)\#U0&]MD!m/7!I/*U2I,n`MM\$M=taYTI;co_t#of5mm!9+G&R_?j/%uGdOh#$Rmej
%OHB[bfd<X*oOJOC>-9*F$!Vk/<f:o?9M&c'i`S)M)-Oo&oIMT+-QGqiN=[M@"rJE-7^skU9MU3LW[:1;RhJ*!*cOeK+=OHB82^b2
%G5,3L\,\9p;$_+Qc%).rpE:&@clM(3'"jM8:*idQ$;o5_JtjKFjJ>Z=iWs#H^nc2MB$t[9b95W"G:IY+==ndYFpcu5H8Pekq?2%J
%K),LR!%C0T@=jeZ;GPXPN$276pHdfcr,!tsaZ*I-ddUon!D(^J\2O!j/1h-U8#\b:J@7*3\IDkgW*961=K9=b+_O'W"MS7]C89W$
%1SO-^Z9UG^*_?FD6r>!;M!m[C#ngbK(BW)raWU_S\1&7ZKW_*mnC!N1TLR+tg!a?W;nPmH,rLfinEC7R#!6NlW>%#U3Bb>JQ'T_t
%A2Fs,Jh0'OW0,F9M&HB)2T\gIb1c\`hm:*@6o9q"GEB<Z=i%r^^^tXuKQ>fNb&&>V!;7(q(]_d23$pY#6WeU\B#hPQlt-8fQe'_'
%/9M9:N`6iBhBr@.8'@^g$.;$`mi5LH1_J"b5]777",CGLiB^!]#SuG%@Y4e&5kPR735VYkP^nIE3aa?W!RCt3Hlsa`d"F&D@C_[1
%(#Y67GL/Z1Ju9WEkW09+C'k#"X@"`c+MprAL^9+aV4U=XYa2L!M)57tP%k-3Z1,'KifMT>T!NPiD?c1TOe$:a9sUsT3*^*#5o:Ot
%4BU1OYJ_<MUfTf^dR''[YT&RbjC06:E!re3Pg"rT%?X)jhfGXR@H\]#V#naSOs1H6`14OX&\(P/@aid#-7"Pcl\1Xg?jPXk1.FP%
%OE3lB"QHX:8YX+VS:im&<jtVg85"q7r+MN_.$DdYcQRjWF/:qT;Z`%[XNRo5&E>7OomNNM/UF`>E(AD'KZO8S,Sk!m_,U*q+?W5;
%=\:li^>^Za:GQ,o--&S/6F7C.Gh`F9:Lq834JjSEP0heB+Xq,4Bb-Yu+<YMlNkiW/`(m*V83hf\/>\;]XG,^a9>$\C#O:iA%X&8J
%'hU_a!G@%6F@aLLC^kq>D8MF0;\F_K-=.M?9Rq/#L+GUG6<@$oj4g/?Z3%G@?j5._FAGj]aYI=[n_M8SZ:N&hZ\!_p&UKbE!@8)/
%"\IoN2&D%D4;hpB6,bN7;6U9u\,^&J#:Pl+4%a`0?.`7aAXX2U]>U;:i@l"@8m4$eP/RN)cr,rP(Tqe"85$P2Eg4?_!CtHK(maY3
%-'a:rn195U_[@,6Ya");Y\l!Kab]RP=r<&U7tS2m$X"sjY_U<t;(C'A%2-c9JXM[C-/8a>Q="#AMhmXabFo\J&'SAtcTX"a#OUu1
%TnN_8G0isACf75d.U_JgTL,s`EF?7J/"//K'NVTJJ/5L.Xf_4@CD*88+VmW.:+2U$M"77G=>,fP`AJpr8i@.n'/Z=Z9X&)bQ(cW>
%OgSY=aiWXW_4-%!%a7H[WW_UR9aH:l"%!l=,m_;r!nu+34?6O,^gm<q@3lTWH!kD0E[FU6jj9qO%3US%A[Kf`Ga7&t6"i=qaN/'.
%=m_AHM7j.4L2iF@/VEmk_n8qYqU-eCY^omY.9k[uLk52TA`6rKa!;&<k*mV%IBrZT0.4>/6E47#&9De9>SVDaI&r:/+pl2[ScqSQ
%Wrk_28*Mkh_n<3)a<;rYZC/dU@%t'EN24sr.SL(hi^*8MNN]CJPl\N9[*fZaKuCbb>TnQb[#)uSa(Nj%@sAb@F,)3I&*qs'IIS7^
%ZfFT#f$U"M0l.bXs5f>6Cmn&LoZ8g.*NpVhiN]p_$:kA3_3+D@,)>AQo$AZt6q/S%3=.ArOhB-EKnQ*:5iN*:(<?NF8.(Pg5nb,(
%0"@E>-DV9aQt-5SHGsED,^b:Vl\sVS%eKS>-lsAC?(#/>d:=?UEgjjuCMU!8F=huECrmUF9Ar.cq(2.D-J'Ik!,MZ=WMWBtGsi2N
%&uj(Z$\fWPG1U5\">@\pp4*6^jP.82`$7=+<cC?;A:QsW3/i3i,_U&u9'eVnD?UQ&<hf'VfaWii.pcK>@R$Fm$$A0n("k*g>%&'S
%,5Tt>#@0GOPiNbpV38+!qS@egU#@;DE[>4Ha@MBr7NI=66&PS$%oO0@g%:YQI:s)I=1BH@;D:ChN`fJnc#6]pM&;@D&51T<(-HZ)
%=<t(Ikk_IQOT^&'Z?Ac_Ykpo$fS$"1lEDR=Z7pl(du"j*&*7?<VLm]U(6c;PJths(PXKVr'\l+EK<M@7+NoCNTiS.o\dn<N(0b'S
%Geb)T1'hr?Clu5I9G[B`IL&YOjShFTdM.,nFNKn)Pqtu7,=!sD&s3$#e"$mh.l%otC%3;pAhjHR)Zb^PW!*Y`\KOcT5&<W)Z9@=6
%3onSu(5ri`X>USmU2=X4ilMU<UacU()kNWqL)WI4N$rk)G`%=)@+J"O[Ygii%LZs'PRr+n?0FUSCK1,Xi>4i3J6.TtHn[.5iCM^7
%eZ531bD$,#T4RJG2)cC[r0@ia)\uY,]KGBj3Y[QXYSm$^p-K=(iD/5QOVLQ)gXRLf(@4>60HrKr'S+Ak4sM`7F'P\TN/*>!+N-t*
%F/,rElpqr_*_Wi>Y=!%I/K2Q/9Lr>E0KMmH=EJh.U5QC)TPQ5i@#M^<J7kiN!='nVPhfjX%A&30C;>`0B2CJMTEa)mKM4JSXX:7u
%&_c>[*f2Ed!j3`p/dnb2jH*RVC%sU,Gn?K6XM'%*_kP;5P7MNKX#QaY+2Cm@jfl,3X<g_o#uU-,r+@':(gDSLU#fSB<f)()*V!R2
%6KI3.\H9(^j#B,]6(TDo%.n!hN+SN/l1ms,+ZRJ-*8Z]@jIsKhL;d3FGk`q"M\b,)"ilI62@)i0[Lg[fZ<Y<^4\JrQLg+h^9i`G_
%9-E5/&PiS=g49:1kQ_(r[i>uUi0e)XE0p_H<eq-IJi+]U+eCG.&CY]G.PCX0QjrGh)\uL\%K9^un?1(lFdl*@-c-TT.ej$aEKCe.
%9r&+ZV$dmIFX.ia!R#KdB?>9mhPuWeN`HWf^hmg.@p"QI1r1=9*+j#]g40T("Yl`m9"@2&=>%K-#Z`Pn6j3WdUpN6BbK5+KG)D;p
%@Oodb<fa$g=].("&gL(Rf^]Y_-A8[PN\868'98A]Y\,ZpI?<)OkqKk\Yna/K:=SQLll7?.Y'=J!RO71%83neo#f8ig_Xr)*9d3=9
%;2]2?Sh8JFN3Lg_SjUrU<HJB6jaiLE%p64S+2UHgBFW#fk<0ib,^EQRoIg&\k"b0)jD1CEYdfS<#"S"]2@Ul##jVi9KV:IY"H#m+
%#T\)palNa@!"mAaG1iE%E2O!bhr3K2Ho@>(ZFj?EiA!P@,Y`$E@gn/DH@_h:2Mi]OKt'r[-A#IG\:1gN!_$^)MG7B0s*1ROV?!)u
%/o4dNUMo2t83:c"(SN2g3J<DHIDdM[lI`bIKmaYuD`et$jDf:p[$>YT;2KNN7m,EO<=8O?I)AH:b^S=Bh'*mb/.Q,0KI0+TCkX#K
%EPahiK"Mhu2j/U-LKke\Q-`7Tcf$5.kM<NG5*I:f9eoVI[PCu:KL7g01)s"m6&ZibR>]^^$'Z1hH*0sdK6gYWdooB]"tm=fCh?+<
%>)lER')SD>b;l0NA[AVkbBjoL/V-^-Z/Ajl3aunt;Mj%MoQXjIcWZX2@m^:pG,_E@,,F"&K#=<57Miidc]Nm/`!!qVkTZdbFJ;_u
%\'<lH!JcLf6@=G>J1_<NF%?[5JbGoP?UnLc>:$"(!'0N_s,lKd]+Z65.&fB)BIa.2hRm]ZHkOn@CphN+=DYt@!?fPG]+HKBN.<M,
%O6#+Opu/$'%Al)@=G$'O@R$D#K0H4C1NH!^g-Gbm\B=%ZV(?I!CWK`?SIBfiE$`jWZ#qG$'CVu<)<CB#U238P;Fo^/0Yq2F'rMj5
%rZ`j\?ccU"&^#,;)B`fo.)B@9#7htWiMontAfa9c!?7b25p@;6ie(l<:O,<h268EXm,bj:6:`AJ`X`g1-+hfjFG$dkMg>1-<9Rah
%WP\kf6_Z)+2o,"sZZ1($!P)')-DBA*[lDClE$?+o".TN=M2t4$JjS+*,ZR?MkXNEZnh)k1(S698.2,fp%YM_e8qi_<")2O<'(L't
%BG\c[*9?&-*1(B_'NPq/&AAW58^gW#,q]<umK^&(Hu3u:P22?\d"\C?3.2&SM%(rg748Mm^,g2,.]]0uR_\VJ3a.-Q7,W&".'r.s
%8,M=cL=jBhZK)]W#_1^0L+-Q9^Ig0Nfu-@99a\l>J`l>.!;L^An$!)S(i,buYaC<spHZ5k]'Q\ccO^3t;kuGp72dM`d0=,FB)kdf
%E[VpGo\n^Y>8mA>g)q^TOoZMAA4ufUF!)%W..>T8$fW\/eks-eq<Kr,.np%]m<Of5&4VH.%?%8H4V,SkU8m98gY`c?<Am@5&a[=D
%.<s5"PRl%H6c]I?Dc<Z(Sq,WI*W6LBju4)pG#coVg(;.'*,>hPA.A!q+ch6YP7ED:LtPA-.(o!ZT2G+W1Ajl*+r?NW9OF`'&St=F
%m:lktW&EC"+9ok`OW)P5MB7-L)[WIaPH\&3"6%`pB+d:^JTIQBbD@hWM7$&s=EO4piQ&f.fRi3j>POm=[_]JqEj\lND;X=QX:4l,
%P5&QIkpRZbKaM*faP!kd6C`SZM%]qQ'te[6Iu#<Q3d1uV9;V5h!Mnd)n#5U6`u<+@jpd4dm+ELZ`RKV/%%\\Pa\b>h56-1Aqa\.W
%`6P[@kA;h!$;:[Wq^moo!QX3S"rIhTE`1p#='u-!1SBg>@bXbELMS"`(bFau+K,i"'+\fIf[b#'FD.tKU/c>1Sb>MUi2Z"HB.BOo
%O[54JaS@l-4(;Gi1$$P/iCLqD#_;C[V8`=u+J\W:%Z@J,Ke8'4i6b,di%TS"n_jPu_SS<f'28%:@JesR9gg^1,Qo?neHfEAD5+>d
%<2,ih,XO,'AB[OZ%0=#7;D9(*K.!(gN(KC4b[qWR`Y"4h+ki1H6:.:H%qoH3P.frW4sjTK,Ctnu,B(>JD)icaf-Ar#oBe6HT`YhB
%mjdb;"WhFKAQrP4U63/[jJWb:[G%.uKn'M-UV[=cQH1c=BXEQm#BlIcQ;Ff^i:N\a<Zus-Z=-3H]Rtl;M\chJ@9C5a[$!TaCho[Y
%gVk!t--n=AS$p^QMSF]&?]FKlP0^ul]s>>-JHK6sZS!=V:^h0&P&M."I:_;&_0@qkJJ;hZ&?<*1^#t7IOJi"K+3D-J'Hg=(9aY%f
%R:tSr6:N!?c8/HI1al[L4HH^Ab/?.u9Q3P=iUp5%JKG$_0Kpp?PU6d)HmIgjgI^:2*U."U;0WF3M_-l43QMnbBC:)ip$b^n-OO$J
%:@,51cKC-/T=9u3Qt`e[ODu`%3q4L/1[W7)-?1RO%UDj!CnKUhf]jIu)@fsm,Tf+?84IXLBas,;3,80rR6:fdE=NNJ0-OH]&>7gQ
%U*>-$T)QX^`lKBY[r/d/\WTbQEK^WJK_KA*)@-o!B.;I8n46:FrWZ*46u#SSq$i7ahVk.OBoDq18#o2>W*gMVPuUYKb^9Vdr?\(q
%4r76<X:\9na5J2If1[I`Ut$CdLCJ\;WSQco_`]o!2DRfH"$n`?g>I(H7pJ!!<cCMMC^1V&*Cu"ZPb:F'P#J_eC*B4gMO'&/Piu$r
%/lH7B!&cBsHcJ^4-;)lE7:`oB]`KWnE?pNbQ*Ik"*Nkn@:/VB4_.]T7j]6/,fEM&aE\\W)^JUGN41[*PO:pXE=]'$4=_(P]W['An
%ntlW(3/]_"gEnm2\p@SH6_S8u43<$h;*/4m?Ul!56JruEV/.0X73+Q+iT$l?MWpN_8s*u:B:=qVi<bdn9R].u<B/G7=n?Sog'8K2
%>B+uZ(1LJfaaoP;$=XC',hiq5O\5,+^_o5k;W*\k_u:f$6sq:uW/jadgD2&:TWmO?6>R`Q=ErkJi]G"-OMApU/=^#JV]1E(<$E$n
%MP+hl0h7L88'bAA$K=-,5j-X\Xmj?X!KPV<[pa@L`\.hrfK)]9ZSSN^k5e=T+rEW:<,W<O*^"MLab@%#"@C_3*GpY6N-`90V@kJ#
%q]J7Xm)J9^,Ne:d3_\j)-SSCBnU[%GK)WP_'gDB7/hqDB+9liL_<3\afUc,Y#tNYM[;3r9%u7*#N+!li1UG?G`hj)Si,GEl4*Q7I
%,B'Pb*1CnIMS"lHGc=Sn,h'I2mnG1-3?GW6FY7#dArP,GN+!liF))+s/F'aD<6)ZB.ac/qUQ5]ZG_jCLM-[q!QrXXYBcKm/i@'jW
%)Pc0/_Z>`>cs]&9!5:Y8YjfZC[j4Q*-k^X+-#J!+U5,Xo*1U6"S3Z8qd'sQLEdZR!"2c#gdWK_tX_HH.+i;&9f22i3f>\XCi`NP*
%&1M_.l!iX['+6FDF)D10Z4VStI'goT'3GO)Rtr-EaK=rZ%>\ss]u2OTU21qb(F.PCI>D;4NcUZom-<lk2HTbO3/jnueaX=UAZA$D
%1VaKD_6E.E_K#5\CJGhr<aO^`kQ-'Kf/ME=(`(sf6\%S;QHa`oZZ1FlBdR!scY&[4_-@)X(3\(GII>]V-B^aUbP!n*l69X_d"u'1
%#D)YQ*$(54LG=O;3(@CnQmdmA<?ZNGPr3l4"^sa>V\lZV"o"UtXDe@[1=9XgM0(bIoS/T<6l@"'!'?><+h!QB3Y[3Kr&RFj@"!FY
%8@!LGY<tbZYH\D*Ue`g#C^B;</4i0cO87Kjd,8+D*u42t^R_(iPMAA@_302#dBqHD]QBCD7P"2a<J%b%#g]0!ORV2,o.Ya6q.U5&
%Wiqn>SQ-gn)9:.,*c+etZqZ6t#<k#:ooYlm-9Qh\T,Q$"='sK85RKT[6\bsXRC1Y;Gis$P(Y7W>4@:0>dSm^JSiT!YaE!CGTe!Aj
%P6,-RW@cViI6i0T@dD*6M-<GJ<!S,QAa0sUL)2;W;W,e\Q;&4cR?ASUB5I-^Y,^jh$UP$o\,lZO[V^3*@]I$Tpa__pH86lUiE-Fe
%Lbu.W7U1)Rj!l]K+bg(lTIYj$BF$//Nh!QM-)u%U;'\?R9KnQV?F6ii5bt.gJP#4+nXb`uC)sHV#K+ZiG'I@98@:-@qtu1;<d+Xd
%BOjCBnki8Ora[lS\FOL^=V)oGk@0!:"K\=+*2F0=S3XK!h+Il#<<q^EaUDUM)-"QFOO31S/1/DY^k+Q?`i<79glHd07bsR_fa1]*
%qrEK#<-QO77KTFRMnp!Z6U0qpg2=U\P-g(f<6,:`6HEJ@G4QSM(8#mE\OdfuZoJ"dSZ+rV2JF<*,4;iB7tHe)K3^KLEC]-Ei,"`@
%q(E]<!?<d^\nr*#(0fUsf&=_#^j3MiZ45*tjqVN4.O)Yd\HUKUOH]7[4D_h_GpPER$-2dW),Z[["6Z1MJP$V!5Hb"%p+@%):aICM
%$qNS&YG@HE<+DJVJQ)oM_sE+H<Hifa=#eP7>^_,m-a"rA(HVTDK$9Mjf8*m-@\U^>$#J[V"=en]]H'XV6qBKeU@JEV6>/ZAaq@%[
%0-j:>6-u$7G=H-P.]"8u[#<3q6sYcFfaWk=m[!G5R)4_B3m#4W5n6@!P%/`($6**U!32^a*M">[kpm?%%s3huN)VuablagZ80LP?
%Rrl1N))Eph+P7n0EAU=epH(]qIn?4tM#/Yeia[22_t8]&<HfC/BO!QF.)aa*"+l\p.m@_rPm?7mn3pSN8@*EX(=Mrm=MDq>7S\Z<
%,.LNiq&+fpl5#BhYoVr+bT#p@THXl_6L8WR2^3('Xob=Q'`sN:J`E(;AiD9@]#R-m7hr*L-3NUmTW4MOQ'B!XORRt46[`=4LdJb*
%F;8>O_^T@BHNm)E+cjuJ-,CR;s!_4+Wqm!]9qjHTKV@H&H<\RXl81;Ooi8RG=4(sgUVm"a799.Bl7WHe4%dpGMdGorEjSed]8Ze>
%r$$CA-F5#@C3`-d]d2'(]l9.h<=iY9MW8T;90jF9L):P0)5Gjo"lZb>mI;V6V8tV\LSZA]dSQG9n9QQS%nB-;!.leIjXoJn'EZ2]
%0B^.:TF<j+Ju+KG>5EcAKAnTu]7F4g&H$-$=q*MiFt(kLi!OXphlt1ZdIIL<3\4mRU4^G,9M-E&3h\nJ+GSrB^nd#"=qo\Q5)Mo$
%koYsB%@!95/C?_RRt<F%lN!j?Fe4r&aThAd"cq(E[M;3/Ed^UDKDA&5m4c4^E>>,)*QK<S?@7doTmW3kX'uDI;kD/OcdGc1>:==P
%\7u*J<WnhK-tm2^hC%(nEiQZ>$sGZe`]ag>F*=Jo*>C$!-@uP";'>/-[rt;0>$QE5RQ918o`3JZ>\S8$<@Y-oEMk>p>GtA_WA]pT
%:4auVE^#4lWsD37E5P1*A60#oAkugfaJ8KW]t#R3Q.BSXCL/$Q&(nn0$laI>HnnN;"Y$`C8@K5W\EG-B->Z[@b6He'_hTSj#Xp2^
%[R#YEk85e"9S$tt@dh[qAPflFTWJ^f!eirQSoEBX`[2p*r7SfdiXK^qg"Pa].p;_raVdCf@3]DQ*B\j>JCk:QS4Sui9L^#L]e]FY
%S=*bp))6*[L@$\2@BgQBd8+OK!\dFd\JJrN%,$5`.U7Q.(U>>aM+pMngD/?jj%u0FjB6SN"Z`^=k\scIO>)e$c1P!]-\<HU$`5IO
%i/4JUJ0d%T&6)S@qZ<SdOFV5@hQXMIdHkMe+p6UfZ!t]f%f`l3NdA=SP6OY/&]]7@=7L:=(\Hmj6Sr%BNThoX@Y^_&0n&D_!:`I,
%T'Br5<sQ6E2k\!=;Up>XMJqI$I>>?BMl7J0Iag3:SsBUVTLrH\:7_m$.k-PlNe2qu`VY:d5RYsI5YPGi`^."!4!H/t&Wo;6\tYA6
%5]VCD36T1ArXYiH*03I=JqLI/RCpDba5]j6\r7+4*:DUI/RpX7&^g/oZNtOOi]C/&(fn*\3H5<;!*^qsL$F'4872s0<>;YL8^PFs
%"'G8Og0KB=Je6AKJYL_YH'e-p<=99D16OquCcDXGF2XuTCWh!VoI;I$_V-lINT'Ym%Z2rmo@o)+4]mm75RgAI1&;5:0CK%T\:A:_
%b'(cW<l!_7$?02(@`M(hNoZtmLcaPiREO_3G3Ep0,$b_rBj]aej\X'5#JT&g2c2T*?`,@e+B!'W$3m.n:U5&!?o9FCFdV*KfWsNH
%n67C<"smPsmK0n"+8-uFY]8_)1_cnEIE,9f%@,iUWb;\'"KS:r+=s(@kouSVW),%eAuQ#DcP.d=Jk$P]WHQ86eb.RKjV#IW7BXmR
%=CfD7BqRjf^l7@7KSM$A!%nlKN!/Dk_Ir&;_<M/t3p4P(8Z7hcE#23A[srd9L?mo5+1iI4`Y]KL390WZQt,G]9[criH)g54X&"85
%5!(barFtbm\FeE.Kdigt`uptRMVY"#EM.(;GXqm(n<rki/:GOX`L\*jMc@6.Ca=A]KB:5nl<33;,3[iH]jYp2.o[Su-]pMMD'qAt
%ka3K,m)dtm$B`T-*G<sQ$#Z9%d]kGhDl--V@;EohH(S-km"PRY-K6kT(KL/LS$T%1U*K=HQV_=`6pbJoS.qaSNnR%(%ShNU*0#qH
%+r+Ii%A=s'SQ$1$J+1m&lik4jEs7=SE8'$rp*9lR))VF)E'Qt'%l,]SE<b34@FYZ'A=3fQBPd(j3bW.24pQO:h.Y0BY[G8>%!/'E
%JnLO$`(?iJaWr:2Np8"7F]GmR+CeNRIJlFu"!U[X^,NmIJ3e]FiJnT**G.5]Wo>hJ7mCmF0T7*P/:W4u"s#oqGhCR.S[jpDNaaeK
%3;T3T&$@!@L;)@ri]B>CFpGa<$;Y`.A'7nCXrNZ+e!9lJ"GlP:O40*uY"W_+8:MmE\X^p!6S@#pm4cN<9>/t`c1p18iX3V8ZI+P+
%M3P$u!ZO6oPbAp>:=VZMo%c!mnGpuH0a(:;1l7[RPXVW6XOYa]%h,1k,h[(THdtt8#3&+AeSCfbBQCp#lj>_&aHJ[!K1+2]NftMJ
%^1.\%cn3fW(0L"),UCYB_-UTs'Esn)j^qfD`9%\g*:prhG>^2Nnj5J[kU/LVQj8Z(oC2pTcdmFMnNI=-UoRmE$6qOIdNZ^9[b6`9
%Ohp=`B=X7:LC"G@9R=8P!Sm'Ng]:%gV[S(lWGFI9,1@:K(!+>39an29?O/YCfF7l"*9g;Ba7Q)K:VaW%](%u8$8/ndHg4k#a<Kn:
%;NTr&[n3B?Vj45pgM..T.+_JU^pWtIM(G^*2_Z5WU_t3K#E(SOQF=;h$"2_5g]1,hk^lT2+cR<+UWqtKCbACkBjVndd'0j0M[jQZ
%;E2:[`V1h?/V839E/0YLe[&eqk_pUJ_e8]bZ!\Y8WpLH>(0`rXJK[Sm'dGki*8Il+jiaDi;rHtVAE4+"2.ZOi>@0?u6+b%;n[OrC
%Frl%ibIY0]cMYM&EnJhTWgpIX>KOu)W7@RPS&1cJc4eu*F^uDWhaj#dk510^,tqC?S.HS]:ol*?F^Y83a,Z=g!NlL.N"3'$Ms-aM
%aO"HH<6,(a:$AWLaN`:9*?`lX]C[NOb-<pBT3<ok-#Pb@>?):^5O,dZQE'Grf*pRY/$AiDN`L/i,W;dH1Pta_)eE'tgA$dA'X#hl
%G/L&SV\_*&W^\\4,b.nX#RqpiWJ[n>&f[Bu!DeHO:RoK5<4*HGi4t,1OE@>'_QLV9Fq3g==!)=Q2'>Y-)e2uL`TVri54L4q"Q[Es
%!*+U*<AoDFULZKL&?b+#<7rg)%g&)hTt"p3Rs\!NjW5'-<-eb+5U0jDI?7k\NmS*r!\lG`bc'e`l7b4XB$:hrjCs^k119@XWi.4'
%^i]2L4(:<P%SK,h,9^lFJ7B#IHUqYQo]ZJpkurJ4OVsuR+En4hV36o57^X'bUk[h\1%I([-Hd0dEk?:X4j&[=Tsm+B0eC*p#31gi
%U:*U4[2KCaBn03fNNY>f21R4+e9sq[P<l$1:k>`l_mnj6\f)%Ul8VWm;[Y[$*JPCHhAF/p0!79G28r""FJ8n9XLQ]I%Y6^3fmpl;
%U0e.<NK??`o>PNn&Ro:T31LAmhOCG65W]B0/As8t[m?=3=Um`!\2&>phB>mM?IYM,e.CE:U(.OImmRKu(Mg";X)+T,@B[gbD\_e$
%T@;3AL)BVBJf"U>#Tp?rmW!qq`PI@dW8^+!1VuG27MgWe#1SANWj3)Uo[F,)I-Kt80U)b$0Gl2ZOo)R1L'9NU&2WJ.l6*"hG`&)4
%4+^i^!HJOE#q`!bPDN'O\O]rE2S[tkJGnK.6TKNUVs3H'Z9AmHg4pL\g_^.;/lrV6=8\.3i^\P<>OD,-e/N@u0hSMP]"W\&BdR[V
%[B?[Y@X=U\3=WQi#]BNl^hOs$=Fan?&j(L6L!]7ZVo+$5\umP#UZ;F^>`"%PlFm^\V/X-Wk(VNLo=8tEJerVQ\kEDYGD[l7*QAp3
%i:sCT@8:+=rSf<Y:0jk!$Y-T?68%O]E;Z]e>s]P\Th8/XWg$XmD8JoZ`3nIEDO.%U;Y`)iQ6mP2+mN<>UK-gWVbj9*PfJRVMtsqm
%:nd?pVQ)T>Wc9@e^o=f;]UWbWVM2DM4^*glK_olq[<c>21:bt:PX%WV"RNq&9)B3:*KZpP^t".LN'4ni5U,P?aSg;@2P:JY/_&nD
%2Z?2gr.+U``(gM>^[*ko,iX0'YY?:::+EOEp8"QTFi6nubJWRV:=E*2It009eIcWh/^Z7B"2pkBM3"4DlLHs_PFHB:!o2>FR8g5u
%<e[fS%_OZ&E?<f>e`5qL6):oXSj!<dfmMTklKC'*gQ['p2=:gWeRAdKi\PCL\U$'ak.!142%Y68]TVBU<dj$1RmF^*btSX6d7nFh
%9!sZ8e.Ho]nYR7oe3tfk!XMGY-83^^45so)eZIJc`Z]D1h:]`S`I(0U2<6SQ:iR&VolK;^BlU2ODO,FtG2V-O,i:*8kU+S&F4_5c
%UOg"a::.%dH.:KZ*)2Dt8D%LBe^oi6SCT<qd4@5Q<W*2-<JIMt7*_'tLdFf:o-:9N#9:@_q6h.%S)JT!gOu4jP8/_2!uYu4OgYqp
%HIE>&aAJ:O1_739[SsB]@<2"IhTGi%PYmX";pi6[Y&4RtSY_?H[5mnWip'EXQ6WT_['Y2]G+3262l5'MU8)TEDKM+6q"8cnmAPhs
%i*&]cMK1pX0LDs,lB5ph'RWWT5k+k_#78n-bCJT-BZD$\9^3NE0Fj"*`.^4dL=rW<+^4S^oqWg;IEKW"7da%$)K@ZUkI<r$'PDUZ
%RD6tWS1nLVI\A8dP.cb4?[V',<Am:0^g',4lKU\UoFh#G&geMsQN2<Y^+((2H]C99`4#n,Oe?G\X"-hr@*bh/%<inp9#Zf?[+*m\
%5_*V2>33seQKACYEXJ@JqUKLpGgU%X(HNH^?q`6Clh;J)>j`>BCE\t40DUaTPh8a:lb@E5-2@OHD;61:9p'2IB^C7?^69=VEVg"l
%iI2siH'u0!_3^\E8qo?8Gc:E+qn+;N>I[:%Mfof=L[m$#3GRAae^Z(;K9/9hY-krY\lrC(go@E;psN/@q^)^%[^iJH;lhQ[d1_NV
%buQ9hHL&lL<WO;=[?XOEiW'aG11m<hl>"7W:%u4;Z'1^9hkW\WFfDFi,1,ckjb'A(+8%3+]45T\F[m5k@4$DV''t.ClniT+QB%82
%JaL'l/L(+K=G<eT"p\.m^u=%V(br#s'C`(]/J93R'#,t8*54ZV-"D)GJ7]q-WAS-84t20t?,tK#Ba:*/#SOt$jmqOK:Y#1(j]c"L
%ZKF?*DnCS"&noS]:e$lCVG4TdQ]5&0N<HJBCOXePW5WM7kL!`rbB&NXFA>J!9,1]5oP8I;8/i%fOe96HEC99&KbSse?on@4'B=`.
%EU(,L=ct^*]kBp":l1sUaEf_+6*Bu#8c;7n_/4<p*=Bie08sf1;E:>N+h)D!V7?ohP.J`H\J9I,Q?lT#^=JQ%:<2k+fV[gg25Si>
%,[r(E*>'pu[#.o9ZnsXc\8P,8N(,<8(65QolT/&S'Q)b<Q],\T]pqs*=Id/J,13.D!OVYu>k$G-Ro45gbcu8P@$o%C!8WMZiL3V6
%9=l0;_M[;l_4&A?&BGu'8hQ1Rga$mo6L1tdl`9<ZNhqaf.9Rm[FC[GkduS28Od`8P4*Rj8"HMM"4fZWBe93T>BEX2d)GQO>;SV`Q
%JeEX+N)8U])rU*sic.Zl)BP-Zg4HGBBH9/(_t(E#k^=+/3ik-?e8jXCFiO+J<mWUC::tUNi+oEO7YF6,["93140>Pja)5s^?A$8(
%c&7;9HEPf(WeAF.ENV/fbG(WZPS5XBVPg!9jf]>(F-@rsk%>WTN-!FE]S6^LnuebR)I@o%Tng@rHDn=I]?u#5\+e'@qM"gpl)h]7
%,gtuCf:s;sm](5_U[REpV$3[#SYF]+-khi18CT-B7BuLF*q)%s1c`/07nY'soNU3b_7sY(QCHI/:Q\k*<3+?-K_j.G_Cd$6:Q<cM
%'[<JN;9cZIAI>Yb]_hhn%p]bqeeR9[p5ZeoU@m*''s4r'<f2t"=IsT9ajS:s/WE*<jqUn(3kXSiXZ*Ak:/SJYY@ut\qFWWbBPE@d
%daG)Vgius)=?BiD?d\:1Zu9tRgXe(XlYEtYSK#B\4!Uu.-3i)/XD8iu:C42;Y0ho2oitI+1r5aKNHIM9&1ugH_oj^7kg9>/:iGgc
%NEiZr2DXmAZ/ZB'6ES[YUOs$:F>gVrW)g(T=`6]djQ__<1.;b]1a1UQT4D_OohYdql#!l?ik'J8h6c$"6f#>K=p)TB-e9AP\(1qU
%a(T1e:St*KRW[*F,1tU(o*`JloE"/Xf+^5*(2fpb=jq\4o:"5L)bXa^NA>nr7lR+MM/Tu-CPl0MP)UbVK8Xfh9nPo0/PB8cD-><,
%j7S\;&(/g'T1Yld53Kr?lB&F6jVLtif,]k`<j[;Bo"Vn^ldtrp).Vj]\Ps5pcW/M!3X0=XYk`-q-6?2`7^^gF\C8m[%#Z%""la<b
%q1U]>;;\*p<V[RHl)mj,s"4Z)6J3Z]r>j`qn=!O)<3)qPaf(KJFSK)Adc8J)cF"ul8:<%i\^bdu];Xt:W'#UTj/-g=dsC="FmG(1
%q(R6'j`/cTk&Se-6!B`BZY=,Rdr'J;"C+$+IXt`n3,B5FWoAhY+EVUi3d0hk/ZW&nD(HIS"[jBnegB"[[]!l(T%1KPBX50jA';+3
%[!mF\gtK'4NQ:@#eJP*Y.@Nq'URH;JgD">gR/)Fn*T>/<&JTBBlK*MDp"$=Q,dYM9#`P3Q9%gTHC@=V^g^NMW]WJ/e8(C4<COS.U
%SSN'\N9L3l^g=q$0<F?`T(F^Tms[tr#E_22k?HSo[]WI6mT+E2[tPDFF`C)*]/5s#.VU`6Gd/1j&YCsb4^kB-l7pec]m?BD9[jdD
%YGig`FMrH)F_>[lFj3WCm^d^F[l+gj9;;]f5"7?Df.]!CV0'HPiC9ZS"%M88\rf!j3nJIqeCpptUXgcPVC'WsrG,-1)255^>9sWE
%[_C&<!kpB?>1Tn'&</cO&SG_qO1Mi*an(tYhpPJr85$"PEV%?f=RB3.IQb<0;2p;$L[i]c>sbD'"=8Gm'iuSCN`8#qbtf!36)"F;
%M//<Zs,NX:>gSJi^E.Ph'Zm$9'^l/KM:^<f5]S$LTW&YrhM&l%c7Z-.ED=2o'2HA*Z@4\qC;iXm[`'Q<8ZTY(K3Gbp5O7oHl1HB0
%:D`+)^#k>['MgTRlF;#4+UGG=WOLi,//ARHi-@]#%R<+O6Z*?V^[e+J3f$a8_#(OfpMj6(i&:Dj6G<XF,s2J1S;a/PR$J0tipp!s
%01?XIS[NYe<1KmegZhY:%O##UagF+Fgh:`4[j%SXqkt6'_t>-G<J-0tKW8k(<DNd:3CZ`5d"RI(jg@MtE@2OZpP(""jOW)hb?%be
%Bkg)a)cS*U:`tMeNp:#Z_`R4:oOUXb_*r3UP_=6W(sh8Pqog+Ij"]`lG(>2]8?67/0_kcB7pP3f9\5K^QpO3(_t$YTP,c3o`P^[/
%VA<FOiej[dTl'utEY/=J?$8_O^]e_<W_Q2.ZdmR$ZPEZ#Ds8+d4`6]XVG+Z('j,=bPrUskJot7aUH\Qu0S`qlIbl]%>H"Sr:oXsr
%@sO?DmC:S^C/t)[Q7c^efjN'!\7nW,#F\hi,CP8+PuiUDB=?!Q.KRh"Ml*@Bd\u/^oo:HoWBp\6OqU\kX3j<[n?(RDfr,Xp4s6C9
%Ki%re"cRVLLI>kNo(hZ$7Ep:T0)THNC"1ji.6a&9[U9tCN,;k0[Aam-$qCEb-q3r&QO?mF;-ImQ6#!*(*E-X7DH'M6A(ed8#6$KE
%RXCBWCdr+ZN-9H$7;:YdSC'_a/p:9>eaRFkqN_2G\[F!d't#qFZ`8;lEPt<[%N'Pp&tH"*UUXJpJtkdVhp1)?i:Wshb@I?uS8*2s
%l%Suo&1=LQ#$9VrBn2k?DY1ZA7YdF?mWp*Zok58;%W4@7L0_='i[$i>85r$`NdBIiX=edV>'$]D3%aHI;rX<tec;JA.9_d%@t^7T
%CTBd0I=OA=)\ZplU;j!uQRG+FF6hk6+A%D02*t5/dh4NAS!L"L;8Lg#ToO\Ir:O<h^(!%C7/D&j0MLSe\Q!`tq(PKD;h^-7\@h_`
%b[+OToa:Q".".m/Fmcm`(91g=ID%Ql4$j.!YMS_iDh6oL,htKUI@JJ\06L's9:o5^';^5]SlLZY=uC+g!P?q]YZNDdk_J2j-2M4D
%0?7')<jrq_bD!0JR*&rTs1c6kgT`:iXp!Vcn/pYd!5;Emh_.,gl@9)@7Wa];H9d9'$jq\r6/kRK;-gh#Im:Z5RG[]u;()'oa<K;9
%.Y,ZH\bFeFk3hBok%;ecru_5ml/2?@^\d!][kFq78R@VLf^n"2it\JqpkSn2+2@in`P_`NrGV`*gM^HugE43/bn&]\s+br4B($=^
%]D$)bM;-qZP.A&Y]l.c-s2X$qm`HZcr9jC\rUXrWs5!J_m2c"0jgh;Hroq&prib5=U]9uR&)Vj8I;e]M,DUFq0E%ee^]2R%G<c#W
%Da/aGaq$"M9uGkIBm@*AO4&:[NYIZC-DVM65p(BR[4^[$TKt.%NWKh33C#Qfm>,`pjgq22H@SL8OA^q5W<SJtDuHb(c[-<?I?EfD
%7SPC%=gL"j/U/!AP.<q+C8Cf[C)^N?./L5u6T]Za?>!%;2]\dapL#+]^':]S)SP[9er$YK5tPl?r;PW*.="8l?00Re0i:dB_hEc\
%E5LT#Jl5PN'^:f*5mjT(N-1AN#K73C'*P<5Tl*\R^.5@XW4(i"7uMC+Yqfco]65WUZhDqo:rRVr`[j9rqW439.?PJ&DI/cTGf`X8
%9.ZN5<bQV3/SK>aJ^gSO)/"2T:u",f-t@6QTh9'B4n"I\)OT&:'LD%b%o@I-Xf/\jjbQBj,QeaB"Yi)_71*[_l/j;N]@R^ppl)H!
%Y(t/!HMsO_)B5P<%[Em1%J$`.h;R:B,G1<"cH:=eO,BkT&7"&;Pd<(HI1atm/S1T*;RCcFX9n,I"6*sQAsb0K2Y#mbf&3>J[X;WX
%pkib1No-rH5nF+&&C8t:0[V`M;CjOY't'gcO]7F@=''kb\EA`M:RiOE3Z,Oer(Y7L&#?WRrh^0>(8$^'U5ksje`s2i[7VfUObb58
%%SRi4EWBU42\S!58"Zr+rhOpK0,!k2C<XTV.'$QT1K6a7X(N;H@]C]H[W0:h`+lF#nnprBLqj?>%-1uhg'O&8ii92RV-:)>J)GR3
%8_-1Wc%6dZLGG"ro\GO.Q9jT8Z(TS4`+<l5%`cguYkQmoaQn'<0HqPA^iS-h"+FJ?f+H]/0d7"Z7ta*>l6^4a,NjFk'%$Rk\*cLp
%?WA9C+k`MC,R^V>_I"hJ]Xm=o=Troj+?OX]om5_ipLGE%/FRW:YMQi@\BJ`uP03sN*q<fKHV9Pfp-uPe5l<OfV@HE>Kb.KK4?Z@D
%%MgFPc[hfCQ?VCWZQLSB=%5VrY2rg&<H<n<W4eZsqLKDq#EqI0@T"giW0OY2.*&*i$NhA#H.ftU<IuF;"d-cFo]qA7Sj/8$,,.OT
%0*OXIR>Y&H2*0s=Jq@BgM<]bGa?*##@+sj^,'aQUU(0Y\5`&c]bFIhcJ0IW@Z]:a_D[@=`)*P)MQq.U0,6;@.;W3p]ig\+tL`s%\
%86-DN=G3[o<RdOX84BL7a$_fsS"bqF+\+I(:lQ_SP#,sKDWOCo+KSm=lAufVc_kWGPQcB!]&E$`_Lb6aHg+EnQJ&mK*2Tj]I8d66
%\CTXbH!.5F=8jB7=4<NCqmr#H`<>mTF+hZ"XB-`kj-k6[8A_O(1)pWH<R[K!7R,&-m6bU3=iP>QF<-GXKiq8`ehUGB;^8_&Uef^O
%5j2NDmTBn_K*Yr%h%ub!^r@50!78i#KEV[OV'Y::;(?]&YK$>"/A3g0*uDADS3W[>CH>TY[mh?>>[#Or&/>A#Q_@mUE$@a92fhZN
%dts8c(K3f;WZinM-<mC(6C_ATg'M>;&CiD0M?XEATthTRON>n*OZ%M9=`LLpM<tYNVmH(RlSP<ZAlbiUdQV\CkXiBqbHmb+$2ci;
%KMV_#N2Q:KNKJ_?G?G]5b8.S-:EA!9D2S<6.-1`r9OCHn3K%W5la."+7CE_pX.*_E.#J@07ZU+`&2Tk3*E_V2:s<r1^j2-TU5Yo7
%jQr$i(RnGk%c];R(#g]Y,!s,:M.0&16saD^_ao,cKr,7]PnCk/YtijQ33BlS8-Nj^4D4m)@);tSXXl4I$tS$\C,H3F@j5:j<KQZ[
%]?\I?M>MO!Nr84>[shN+Me.s&MKX#]Zu!sD4rq,uN2h&g:.ekQ\*NZ8G9&kkCU!<hE.,>NE#/8)bGIBC[b$.T6m\5HgW%ajICn50
%0N$KP1fp.:XJp+DZC-Y8XEt6hDcerh-=XIoqh*h36"[8H6t%lKAhV@RST2^V#,ME$[9$tdd&+O!?RV2]iF9i6,!Q=#k9sA*Eb$$I
%KPh0'[hgXrCc)8`:aq&*8n-Uu\c>llclSi4p+);4feVJZ'op6+N`#'R=aMSMBO?n0n+/i3?[iPi8X1UiZ5-!5<AYs;,g.%O*6=d4
%5cr`'qhAKL'EWhe?'3h)q&L]DNP:mUX(;,Fg,KiG10<Xn&>b!2qHT-99KEM-4^8T8SVl?IT(EgCb5b+L9KK9_R)V=JdGGG5F[7`5
%<\-B,Hq-G#+RFY0$DB?!")?sp'Ze'iM[qZ1atD&I1e&>7k&]1Ll56S76.hC%RO8IML-g-k5e=-6TgpI_H@,@1s's9a+3KkrRMo]Q
%!c+$a!l`jo^S$_>1S\i'$+6lA$-s;.37([:elH(,&YX2tI")rRT!-.o3#(%jPki[4d$8!9TBSqop>^Q4&SD9GOER6,iZ\D"2,Qm$
%3B9<4:)MG;S;/2S%k>7DC/sK0,uo@P3Q\fu)q3H\;fZ#E!tLj"h8?Wa&TQa3_E(6\Hsl=,`V](rb('mn\JSpLf%7%cjA!p8pZA-I
%(fWJC!**PZS3G:e[W=Kg&X`0%*ND$\>d%XSAa(S0flQ6?_`B2,7<IP]!S$A0';pn5T6>9:N4Ct3brU],Kt,HPlB60!ej6<[%.b:[
%I!E?ahM;%*/MH0j%].eC^g2.4D.20R`%3f^c7o6+ZXsbpih)+%+4Rcj3m_L+-&L/s'i/q@F@D(_A68r+(CUI6i6_be&2U2+5;4lV
%MS%i5G<fmm<7Y#P*^lh]GrL?`dVhsu_)(e;VkOs-#rHoK*``:1;!XT/kH[@#1S\3ura>2\L&NP4(]?J*7JYOkhgbGZWgeV4poSmB
%6qmj9[p"JL^`dh79.FhCH@%&mBDEZm'QEQReGD]+,4u8E;BP+e3bkbZ9q"V/#o@'KDg`;rlrf\P7:4@JrcK9a3s9Kp.W1UN5c<gS
%9[?$a'R_da9KkugV-=!i0V8`J7S]<J!\KS-k`@pd"H'R)82LTbp+CZHb3<JeE;".irh@#;L&X3MoQfE5UPb;e?2,'R_RCp1j&])6
%JAfEIOM9!,r"o&39AB<=>[*Qo!\Mimk`EN4n#3=^`YZEm\dRDi+@3HjF0fdjpm9f"/,\!LMOYJH8dhu._C#2;%cNm.`J>=u)DJ/C
%GSE@$!6h<^/>InWV6`Ffn-;".%gH[].2.VD>^Os]#4]lS7G#h-l!O/YXRojQDfT%XVp']N(eD/<k(!F/n#mP4HZ/fd%-mX'kRpBS
%mZN.-^%Mb3$iL&GSWX4WdlKUimuZ&V]:qal,Fj+DD%#&<Yl%t;EPPm']o'mnA`:X]d"k_M`Sd!P@=q28<a%d@a;GjU:XAXr`+<j_
%*beub'fBm1heftGB**M\`t<?JT4W)nffAh5=W&P@*$DH33^aA0LC!RmU]fY@I$U.OD1iJBDT!pLT?F/U/4U3brPHrqJ`[4iTXNrn
%6P7WZE@fD4(D[rq4%eGtW85&?*?RNbRS--_GBAsP7U^"M6SD8d?4-uMBE&:`V,bITBd^CS&9143f;9ti,++6u]K69%jp;UomZ9mI
%Y+W5ljbRL_ZWOui]6fdb=g?k)i/\D5ML\/2HP]9ZdG?4_AEA82;2)C(?\E3:Gu]u,SfQSI3Sp;>!G?]OG(VQYZ[*0r!O$#t$FCp:
%,B!W(D*I[fX?^\a6Mh!i>r@Q/J'R)*cKXRr=P(M$o'K!0rB?:UET3+Po,*a6D=ibA#I:=dq:lOEB3dT(%kNfp'E'%`1ko"H!<pKl
%c<_JPHWHSB5$7CKbnaGCraN36FPUc,5gtHq+-c)L'd`D"[b3!<iKnDfmEiT#NX+_oMCJm&*+#?68T.=(YUpsP(U'<Fn&/dUcOS=H
%BZU"+<H1fc%S\hbQ-kR3=nME>G.g$B3csg)kc2.j5c92UJne+MNK"[A8pUM$@NRLZcJ@ZX[q>kjb6VB;;,@Ll*X19F78O/(]P^(f
%arMQ-MR%`)G[CVX&LG$s<2"q0qh'g"8F!en[,=EOeq6?u]<k.Oo]!0g-RJV8WO45h>rK5^U4$sIP!]+lnCan[e#haT;WIkG9r)8`
%Rj),s_^X$EBhh6nWc6aeA`I"AA`I"A^@C/,.BQhL'e,XfoIVHXnd,Lu`,ZE27oquhTda(eKY!PGTFkObnjA>.&[;tm-Kks,JfYFt
%8Kg\+[,`_O:`e[GB\^b(f\/*)7lN'tHWHrO4Ois9RlrJo3d9T&i;fU&mC]s^'+<O]M':;]-Oc,T#/q/<@X)ud_4\m"q@-U:M?WAO
%`=V9C(1$S,X@R7M&">/)e<5&1!A[Q1_Rb#Edn8o:G7.eE((4M9]*/1d/@i2.)`or6cSC0S"]/#lJb=?/K<Td[])N:Kmf!=RH[es,
%#g6MCJ(`)QP.Z'NS"EflWZfKXj/7S,::24f::6aCVj`bg)pji1\l2<pNX*1\`]hq(FdF"KhkR%s8,Ft:Gug.gO(%VnX6L\!*%GTY
%BP>Zp=u>DoG0N$Y3>CJ;jf1>=/B<BK9LE_.@*tDFlT0+0Ecg6FUM"06L-3!?Ah9Sf\e1]$9*$>t7K@`/Yblt\pE^DM>+Yt/SCQX&
%Xb-dK+GQ"$O9L=ShW4Zg'/eH69On*WAhU<H;<W:D\>&aeKVM.%dWdo1>;WE'fc[^m""-11/UuGNmG[Vq/r!"Jrod29"AmXWfg]o=
%.ql&OLnH]s'sK/5iXt(d<tKg3H2AuM/#`,@@=0J15t-cqF*n.0IcY4VK"ho3JiAbS?P-Xr]6Q0%)@@F1:9*IpSK/JfdE/V#4::+"
%&?CoHK1^n*K1lG<?Wb<2_(n=3iM*tHZn(U*m`Kmh5.,;uEc'Np2iO5fNlnuCEED!#AM@-YlUOF204f4UeT(2n3'U9JmclG(N\44`
%eUs<\/!M=D@2D.,+^f%[n\^a9mD26h*E$=V0Phmr3$j:F,o_&!e,FPW_tM2P2FIj"*kf)MmTGD'3\I#7%^fZ>30?@2SEM`N0KI)"
%"ngo`iKc7*6KOLKPQ:lXnXHan;%%f'&qUrWhKGUtBq\jL[fs/F1lmSgaASP0P,'Z`,hptU+:)1A[8u#qgkd?gMX!GZNn43ZN8+`!
%cgonCp*RN?."]8[IM$HG^NB7.A=c">].X;?:@a%q;U5t]h2^_S0J0H&N8?6c?)Yc"fW2ACRnpbF<?(31KB#6XL+8dJWcYRpC+H+l
%C<(`c]e]-:;;UsmLERs!d4V@g1`fL%QU>-oK+r7(@*Hf(+RK5-B/B_#o,#JhW;FEHDN!!dPe(T"6[HLK#l+fE8FURE'$XLB&T0p2
%%WUB'haIs&64HtdA4BIIF:KQlIP2s$i,h<,ab+Pk+RK2k'r!r=6V@9jTWB`ZaC%:MGqE]!qRgm><Ddf5g>LZ>?Irmk(5Sq-mSbQ.
%F7!Wl80$sa3i:FR/WMC2_l.2m()/'uMB]F"jWT7][e=ug3T2#l!XH&Ea[q8].B([j1$)PQ8p3%WJeHp$eeRjVA\b%#27!S9.ZQ'@
%^aS'`Zq:hC&6n14afb5G5T86b6u:mL;"Q$fWO#a@Dh3"H30t3^?ht0QF#fr<H=%"eLlg4;&.nCe0*%DsP,j?q'XI20M3?AFCUjG'
%UeNuuap,eWA;lMo$FRd8qFXr7>Z)kWCI%0__mZE9.CQX6SJ$Nn_F(s^09<Noc16Bu>U]!d\0*gA3FrddAGS\8;jQr;IE$nM?J[;,
%4^M!c*KZQa74a_b7oP:Uiuh4%68tXYBj\uP(ft=rIJGPiScWb9+q\_I:jUflI<Y!gS+b[_,.Eb.d<DE8]:3ZtB!XX<DfB87qo\V5
%i'2Rud[8'b0&3>(&lcs8UCnr#U"X?S(MHa>%/=MLYYt7EW9gW&;mjLo1V7Np[OI'\Tu_:O<IkE=JYm/meS9"YFtW4&^'fH?hNS!j
%m@nSL%*^Ec:BhLS=j2EWa.u0GQjAEsWD3>'(?Y.iV2@*-`,uffP<@N(VNfQKVU/m8;ONZ#D\u&U*:M(=$cc88_LhJ]=h7Y7\cUXS
%Vas-`"sD5Q_16o.@o5-Af%1kRYR(VQ9[P.S'9*&H>rQETh1]`)L'<L.?V/V_nT1`TScc[lB"5A,;)]ln8oaPL_;gCamaDC&T&P3+
%+<(eOg*i:CGkipMa@$fL&/GsVPmUWJo/^b#lDQ-"`.hGpVT"p+n^na`G(oBC-1)K3=^'iap=k4:&:>QOL\.,Xb!cT7<j^+/BHBFG
%NRr&Qo_7DQb.N$IrSW&_1t>39&h_#96h+:a/;1O+k[mOh-Y64lddq4#cV;N\Ml?"JC,&a9f`Dcn4VZI$aAKpg;<=0^@cfVhbF>Z3
%@ZeML5_BNG=TeGB33]4+iIf?uDG]*+or7$E#QoOie?q'4AJ0kqTk^g"j5"+-<fD0]+%6I<PV*(YE1Rd:6OrKN*,_830!,Md5+^&a
%1A=asIjH7u6<)LFN\a)hgt)#t$C\3lD[q[4i_d]u7o3djUk>iq4bPo[_\dtcERqC0PKoUP#.:IAqbh8u?QRcqd5dpWViRLr-_38G
%W5lQ?'4T223HNbcN'd2)%PloL8e;u=FV*jZj*\EDj/HDcU@h""XW,/nI['TWVMWR[CK;kH#u2*O$Q;59]=DBHJiW#R"G'Z*UCXEJ
%+/*<$C684JAlA=S^P9n53!IQf.e:).:XLOU;\BT:rjE%nLu5qO6)-.R.]m$+::kZmQ.$DoT.`h0Z,;tB]V9ZncOT@Fg<jK)(tF_r
%!Ql]18!J-jE`tsI0alCJAOJVcO(_&X&KPf9JK!FuT[B,9Pu]P&fDB_?RIap7ZP;%.):OMkqtuK%HT\H$/rZ_*=/erM;!d^4Q3Q)n
%D*n0%2Fc*N`2=h@qP#'7Hb<#6NZn@a'qYB'$;qtQrnAShX!9SC@o%jP532rr'%E?9(6n'[L1`08Cg)S>9ur83]K;#>5HI)i,E-06
%p?sL'\@5=4eGrnaQLVNkh+:ebYp,qp'C9RBI]N50;D<==Q+o^=d&#h9"`$Fc$u&6++mnJK;NXXWnGoD1(siO@99UFj*t*LGbc_59
%inhQ!Vq2oAnbO*%nVn:2QE61TGP`]NeYQ+1(s]la):0l9p\F6.HT\IL?;LCbor1k5UgsuH`n]lqO.Vn<0/^G9d__n,2EIS)=M&pA
%bB`,4SRsE6p$6P14T1@Q%p(mHjPf^5a&V$EK-FB=*Igm]Km8,W<M$f3%4OL-^ZK%.&,TuG4W[ctOK6*C17fl9nTKOe[VL>$6Uk!4
%<8,"`Re5r50'B-(4FK]sd,L)QfSdri(*,.i?Yd@mo"t>,1<c@:#M)BG0c?0O^noZng";('TG%5EqCbUn3G&SVNu6s90q>j7VBb`7
%,@XF9(A`*S/%IEi`8JZ#!9n-gV9b%m-GCHskt?Y<E,14^`HB`4GZ3#)5C1gXXBN37+A/6T0+JSN@6r:V>Ror0J3^F+KqFOeH"D\7
%m3EhW[31Cp5<#jUjFhJW^48OC"rsYL,oq<g>2@RB?.d`pY@Bc+Y^L#8dTjY@ogZ\9;=337`0A)l"Q(.YRR'aE[RsV%[]m50Nj`Ff
%%K=E6@eIf>jmr8+#EHgb?7jFpOb'9Grm(5[c\8P$V[=Dlo-F+s#opAGG)_B'Du<<A#*UkJ/B)>Q"lD]0M8#osk'UE1Cs"'Y*p"_4
%fG-0Oc?U1(U8(8XdUF[Fg5Jmc*pFd:@'$UDCMOW1hHR.].e[]-p,XVFKMd&CA:rMQrPae3b?p:.FE.+I(W<-i5@CO:/_'T`A,spE
%o[Y8i#N#?eV&3SuV:U=rJ)2VL^%1binafNGj`ZMc?A8ssb:P\po<>V`!,t"tj3[nSd#c]<!,.HiG&mY"co?/d-r9$\YK7B*qs88%
%CeYlj!9BnJSa5fl5rb:^m+$#jaCrbO8u&k&PHJ1`k)O6:e$jCf$fG=@WX<K'Xp9A%5dX:[QJHTL"U024NKo3Qm/W)Tr^74Zol0^.
%WcG)i0FmC/R$D1]EhY2m=-er%rZLblKc:smSH0u.!\Ger"g.Q)Q./U'_]>;Xkj5jd]<+:`Bg'gIak7L7h0Q1QLS3W1HkA%ep/*R8
%I7d)qL_0<.KT+GTp]\W.gnt't'/^%'=[(5&/@-DKCl(L)H_V=(&[\E;f@L[F\nkQbYsE17IrV4:n<Y@L4^:1F@^qNX:M,Zm"DTbX
%DIY7iTA]_BYGP-6()`iNEdB<'oV](;9_`<QZF>;GN`U\<aSo3kZF52[bunR9)68k>mMT$gXX#=]mb*V<mb&(&*`gV1j0Cu'r8Z0f
%Mg4"i%fTV,=(Ip=s(k%X$J2AN@YLD_Ap9Ih3Ic'#;*A9!7_VU_2\ns<ngpsofUMiFUV20K)aat!1ApCD4Nc$f8pm+o&(pC/W9"m[
%oN.aJIm/)VXQ=pqGQ3Jb^NF/cQudIMHs1t(*1^4VW%r6LV)Xg9:P'o,f4P+Q_s1!q&FZ#V\jGeoV-KK?)RGb8kKa<4:#*HUkjd:p
%U/-AeiER>*2^hY)0%3%j6)-:V.a?h!:-*SJRlb(9rZY2uZfM3F@,,a$41^Jf8!h%!pf$kkaCbg$hbhGRgtU0.G!^W0^J!e\fLDV4
%W/fKm@#^4`ctL[Y9!c"!PKmIVk)NQDHYS7_i2Csh31@EBV;'CG<'.Z"(2g(5._-]l&$d_>N%:e>UAnCY;;*#@61*#_W#a\!FhBoY
%C4'QCQI]k#>J9r<n(OUKmMOF%KciV,8&dA?0f:0mM`W_`"F>8K$441.`@Bp$KO!g-G+coFM+ACMIQP8;S%0[*KO6-d53^G#2Pr5G
%Gs#31Pku_j!m%S]W5)sgY7;+DgPqE[]ME\;`C4]@3m#N]dMkjp.7M>CMW.A(n?RAPTJ(m$Acm2fL_EO@!('2f+ir=0lJrj3.LT6\
%qX8QkAML"/Z$aE`?DWc+e>@?OH#%Rn?N^feD6JS;TN\gR@tD!ASYABrhXHjPeIKlC$n5H(n>AAJJBA*qq2J]5Z6-aLh@U7kqV!V&
%Ug>\NlM9jX]j19]d%+7O>]4H4cf^q8Q1N=+8+a"Jr8[D9X,qO\0ie\AL#^0Wr$U5>5It>be4a,Vh%^g>mJt;)><nDalF*%*,f>td
%VMgajD0L90K)I*NFjjWh\`lk.Cq:'*;A`qdiNfLsGMSaf6Q]kA20IbO/CO_7E%u0*"PoEM=[3])_sUn5H//(h]NRQa8_3QD!Hi(b
%JB!5"AJ9&(<&Q-JTAL_b+@I11ZC*u3Mdp,?h@e[%<BkS>bjh&NUN`N[pb<\.@4[$c_*/WU@8%8oKs?ZW>SuM;A]"2H=J04V(/u7E
%E^Y!"V&#lBFmmsOpWp".RgJj3Zs#dXn=Tj\^0E_1Xr!IMLfmq)Z=_.pH3muSEU.WO!V[jN>qR/OQcjVmY(?j<ONd&f$$lukT^ABg
%]j$iHkf#u/cRtU>"gpO5_5p!Z<m9pR=>G:i-F/TN"Ec]dMO@?`.qTf^\RNR2F39R&fUsr=$egAGmNnV9QX)a9*]JoZ5%o)W"H'SH
%H+KcoUlU=QXPj.>0C8Tel9?S]rOP+#)_,dm\i`$\09>Y]SFmIF4f#lc:n'3he\gs6\@=!BJU2FuU:Y&nisf5ia"<?p9ZHXjIHg?P
%N6$m8!L[=;O1@HOR)f&*a()95n_fr2@ltN?)34sgj"]0+kegt=cOS$uh;`!mrt_-F8)Je^\__r`*2Q[Q1cO7P.n%/KUV*)jR(K7@
%.e.K<)`)/F1o<W$bgo4p4c&C2`im.c,5g`$]W,X`iR8ChY)I;#*Bm$VNgRH-l-m7/n_FR*2$I=<e?[CUJW6jU6":'7:<u5,L(efc
%7d/Yr8*F626F6P1QAE*ZG1):Z]%3=;@br0M?np"50o7i&$,'Qi*dWUY$ItHE)]/H9\*/4N[4*C(?aO@/9p($/&kQRH9ONqqrgtgj
%*U48Ccn80\D$\b7`C,"p@FU_Y7:VM67%[RS\&Lk2.l8Q`U+0#*c>=6T8pATRoTn0q5k4*J&5#LC2N;M$3g@`E]pqc$7CkcPU_=am
%[GZZnG*S:\h)1N0,.1g1EnbXMaVnlYkQ3=K?-k4O#.[.ee(KY;m[fYV^3,uk6:9FHCO#9Aa#:Ep`pWY&>Ac%<qgS2`"k@BfGWpmp
%Q"G0[P8a;hL'FFk[9;1I%&PpW&j0jmK9%G/See-H#p4QDe'Y>Eq#DnmZMrR2qIf?d6pXo,m,s/ck>8`0KU;;:*Pne_H/lHgM=GAJ
%]m\eg^ui`9LR4@brnHnF\1qt7`sQ)LR,clMEW9OpmIq"n`5jrEI<*(\-oP/kl0H[h$OLnIR=G)#GQ7UPhu<,#p%lHVIe3*fFg(VA
%5PboJs(;5Old'^"a7[Q`\9RZO5/>"8l\W!ZT>3a,=L1'*:25:JbpJ?2gU07+E.F5q_B'`!H9=iD:bK5fAD4!?k_%D$>W_=NVg#M9
%^*)Od"^"\ZMAJhGDNQ5$:f%Y=N*^rCN5BH/=B:@\\mSDYV.5!)[lGbA!TU()[!m(jUN,nW7Md\gqD]pBQPLa:,$C$q3tW@>U>E@T
%("ZqN_$Rh@RiDXd:A+j?mH*LT0&HQ,3]]T!KMQHX_YRMT;GC]-*5=D*9b[[Mm@-=!H?%?ea#g5:Rps#\G%5RH`fMq`XU!lP+,W:M
%&qeio-(!.+a8`'B*^HrG[9i<oJ)PBbe[p$XJ6A;X&V\Fi)3'9Ij/5f-BsKTT[0A>g_jlPfeYJYG*F,WYAeX&chgQH)1T'bOi<nek
%=&0\V0tqrfrT2Wj9\[!bhT@J:;d3Z<.fsQPN4\S5[VgUXg*bcp-;pSG)1r`bjjF9i>EY.e4rL'mr>KCK"lpYR.W^;?hZ7iBQespU
%rt8WqR==rhWY^?LdbFX0V_f&[I+*qN`Cco!*VhHdbICaH"sPIt)pDO[i3:8SJn)QQ)FM>5@E`WoGLJOA"<Lh(2Y#U"ASIii!2Oi/
%fon19eJ*WEC,"1k1GWWr>?)d?Ultei:1O@2)l?A"=LggcZq_ND"gV[X_Rm)=&rV'%)@02[N8W"cUX&d8K*^H*h310MeT1TLfAIE'
%0pss.Tp[(/YOT=:69qsMZ7H-'F!Ha^@j-NT1npq#AKcS&VFgu??O-[(kPIk2Ie9E[G^UaBF*Nn`X`*WV)hBCW4mP/u-uK[h\di\S
%B&j#sY63QAQ'r3K+LF(JaQknF%1q4%q`;7bm)^^GWe9K$)7sQD4.d*Np?&jna9<\1kf^cJG_TFh!MCEnb5c5CF'b.5IP,S\)9^t/
%]-h1Zl?W#gTrhC/j."01AT&b16H$9<*ZJSNffcch"h-_*7+(TSB8(@PZ6bf3*p83q6+4^,]B2pE8%(f\N:ncqo([A*m)atN\g"Y&
%6O]M"c3mdHm"eMeh6ACEh%RbGNh,#!4]-fr;$>ad\L0jpYb\u\<]ZTl-nE0PQ-Z$9_5es_?f&7>dLCmIhOO2m'6sb8A8P"dDM`C>
%g"HjY5.8CEXBnY&+."RAP5r`\>0D,b+UqM'M^YBV/"\u6%fDBMm[r8ITpX#3%WF?TAXrqY%O@INcN.ng`?+.A[tEtt3=q:_/D!KT
%#EBlh3<NShKjW`H*QYd)R0).Rj=J^A!4N&B>E:dpm@_m*>3>mpK9FhHJF.lp:Z`Y,r9hZen0>C#faZp-kF#opgcj&3o'3OWkC<NZ
%f^o\6g=YL[Q3SG/Y9(UA;2kI[./Oof>#7I13fPc^n:>pAB_GgPYLslEfQ(DQ=Bj8t!#0k.YS2WrOt-Y^TM.9#"a-d%/-5#tatb[K
%[+&+Wm4sPp/Nr@FZ^ekF.E;[g\,4LR&AS)jmja3VGEgR'g3a5uQoE-0["p2Ent^if9"7%7#CW`V[3$q$,o8mLK'c*2]AWlO"We*%
%WSV-CFn0U.QRWGbpgJ$7MfN9FA'h;SOVk*W(#K6h4V_"BCZgdcN;_FV[&/er*6DoR[rSR)s7_$8lT%d785ZNt=n7uk[@TLEYf$eC
%[%acV/BmO[obXd+lS&2%0E/,&r;1]J<nlbCgoDU6#I^P#`NFGagpQfEbgSMU$ac["Rl_^XGl!KYs68:)hu;b[h"A4>l^M7l)KU<Z
%h"hCJ>+ZLl]rToUcEH%OA:N38Du\BM,H_!SJun"W;RZJ1f>kEd6`cnH"=F1#cXJ1?.,Z3XK5Q38!'?gQG=ANX!f]ana0BJO07NWZ
%PT_"&5`=8G3H4>0A#_3[6UhKJBdR-i]-+ELD.Y%gC4CGmIi*_SmF:sRYo9NqF.u3R6XRN-!ue,A\5>M*5O[-m?Qd_'BM";BJs\7h
%N!C"G8e=VQ"_srfg:#r$n'>Z>K%7-#Td$QiC;CO@[$h`h&^/A0*VEh,J]S(oP!rgOiC[b/SLeZ*lT[]!"nSrmYnD.H.`]W]'Zl;E
%1&Eq!8'HpNd55$t)Qf\I`8"c2g!\*f,3P"6.SEVJ'EU^bIm][L=lP/].36LW;%V19iP`'=DG`a@;GDNE#lCiss,mq)gs47!Xj9u_
%cLV)Tf5.K&6>8csR$oGW>Hne@'o1+q/mRZ,aYV7;@^1tX;Zme.oSH3`[jI$6/-O=OTiU2="bOSWSS]%I*Ve61'nWAN'*<fRQ3W=K
%LKT)oik+AAj_i%iN@J$'Ppc_SVa=-,mYM*YK>b-lq^=kM&?13b0PkbZ[aP@/(/M`>I&&<&`E<$T-.7BR*"-OeULpj3m611mqRdqq
%Yo)OBf(HRYH.%1M)<Qa5V\Nqo!Lr3,JU.\Fe[@C*F2;e.]$f!hO"1=hNh2%QXWjBLU,,t7TKV-b@!`JLL+'/P3);hP2L'(fM*g\=
%_6ND=dGUb?16]fg+tpI<-0.IPJ2+_+:b$-`a6%)'%?@>\`;rSO4knI`#rW,YVZh)XP3m,&brWe'!g?q3MiLZ7D5aKi1*<g$3n,&!
%7[t'm_`S^/RW<q-Bh4Pl"Ami+qNPq,KNE/;>C9]uoOsfIT<l&KDoY[ZhK;AHRt_>!Csoa/OPMeud.S9T\W'h+,h'k:Y9hjBU=46G
%nUs7dTbKR3/(L7TmLG+@<hX!!J;9dq@N#oe0R8+5Mo5AHb3P1<.gYI`qMX>m"t<b)Tspm73%$gY#4nL<R?'fD_Tq'i5j+RN@:`X<
%.b>G$IBkoq$TR<94-=+-;B&Spn*@hc"E,WOPbsGi*t*&X_f\9KA[+Tf0SRg[22na8J5]_&8WS2P0Z/jeh9]C3Qg84>6YKC,V2'3S
%';kG80ufa59C->JTWd[6h\M"!q*6;3+K\iq'.9g2aUkCE07B+\]Zn;;PoqecH*sn>`e_d588Me[8KMBFqB"*^L,RJ(P#5-s$P&9.
%R58]]6HE_ES70CUPkr!uVAE8[U=9K<R0d!1Y_FLS(]'o@gK2-K5up4c:qQ.7qC[b;KLb/s,SldS-on(rWV%jJG!&5S^s`gL6:M8j
%JPuB2bQXd5b2[d8KN65)6(t5fB(\1KO?^"r5XM!R85cg'Ha"V(/La($0f,7MWU>h]Y8KBVf\%0c]eS*>$'3)h/8?PDdn,/T8q5Ga
%M,5`sA:OYp/(sUWlgbDUFfqe&ME6GdBNn#7rDmBYW'#*^f/%i&d%6&!6:Ye3Wf'b,I0&)"MnYi,F3&p@bdn'4=3EaX/CqNVN:G@t
%CgX[IVT4nMBV)Yd@SaVL&S-aJg,6gQ2Jb)u7!#+0.];p=\WKQ8%p.KTGVC"9L$t.].+V>SBfl*3"@i\4e4J&2FJ?:'rNUL^+8<g-
%_HnaMAXI9&I=FpiLXjo.[n"Pl`%3[FbKg'K$ZiBpfeT$$BE,<^>i[`cmEph=L!ZMc\79]\2D[b18)=9ThR3l-=DGh?q?X#r]?;jZ
%8R[Cce1V"([-SUUA]<n!q2jf-Q%^STJ>.HPet<YZ5h?b9&/?Bp1?)5L:flj_Njbm.'8-o>Qk4@n-EuT0iY"u(%7j621,>it<8a7.
%nZuZ]J`\pF4-3BHdiZJ"EjcKEPt?%Y^n!OEFE+33;l:Y*6BEHLCn>r&bD6;&$htoR[U$Z=B[r4(N#JSuKb`/t'me_$U?IN.D>AtS
%FYH8;dWKeR)[%1!?2qn>TLn^E&%Sdd4*L"%2HP8h@-V5PZD48DGGX%(I<)>Rqb'Tj8gp(SD-EA;10#.&EQ*.tpoa$7mZ*,LVfF=:
%o$(6Am?!IPN$3:LQ&PBBS9YrQj82s?+sq2h21uUr0U%%.D)]_G556"E'OCCW=d^S`7"*ZK,>dlX1,Q$uRZcCq\#NR>m#!/Zbo$?E
%A_oi6H<s$_OQl"70`-0XaSBlC'VQE_lQAR!h3QHSBC+&qle`NmQ%M\A%\MA?D]<:'m4oJWrc?Ad",0*Thd1Cm+kKQ!@@q&(o0XnM
%*'R+DSMbJYFj@+q6"f>M2X:dsTM5+7</5LV;og/`K2D"RjY'btdCpZ3nKGYrlR(Pmr0k+PYQ"'EWt#?+,rVhF!jDdV-oNM@!BAUk
%)ScX?(f].\J@^dlKLtD"GW8R]pBGoi<UgD=S2q$W,lar5c[(@Dbk<.d^j0*7"m,hJ1(.X?EA><G'Y/'U*c0Eser@lPT%p/[?@B3J
%++\Vud%ZDPn..j]"qc%mSWX%"G1Qd!>[4dEUc9PGGj$SSB'D6kekYO5S'D;%s+KlZA0f'MnkP!9Q%h\QN$a.]m;EIg8.Z>o"OG-:
%LWdu7Q059=Ma)YYRP2t[<kNYopS@dr)r%&Hp]V-!gD#&ii0>$lG'">bs,+71?8*_q.IjK$V`>)+jPr)+i6:=11`sq\hWf`1:s&uF
%.DGX0*U+tmn=@'@*2=Kd-SB^lG#W@MRFb4K0JV+Q5S[SdKS\W4KRAgM-rAui_D/bq'K8JMc7KZ/kTJ:Ci"QkBEVpEk<VQl%'PpVm
%D^$4X\ENBaOkr-N/>&l7l-nQ$,44S<W<Ulah#[(A3)3Kg-eMFl%<0FU<M1Ad"Zd_FEiM5[f)q7ipBQ8X[b+DWH-STYFS;Lm?]QMH
%,#?]4XnF/=79;5&aD[*#<?A@Z7?(KrM^d$^DPq@!GN^0sn_b)qI"f0RBMTq!i!pC=!FA4P768#"dGM8SIJ^%B\jrmq9r%l^Ooc>[
%]Y?dpRG0%1Xf(<(NcN/IFqJCX2L3Tg\s.a+mI)+)H/)uQ/_7m@K.cQ+kig-(bZhFF6u8L-2(ZX-`&2SZihal0"=B2`>^3Ln6S[@W
%^!/"Q9?DF:l)p7dA.f*kMr]gr!AWHb?34c`B<frYWbt+B(K%57CFe@=EJ4rd?i$<^#B@;*7>+&::Y,V*7*DWB3)IbLn;n9fjfKpO
%a//!sgQ#`WK4)Q\mMbF7WuLT6'R7V=?+B7ea\ffIT_2WLrG^#rfX&(<9C?K./%V22<?i\'Le4I6o0'ps$_-rU2V2ZW0>$^_^@qjK
%X#qP+^`B'fKi2\T$]9o<c$\un\ErY*!P6OSo`\Amqe'>G6DIJYI0J.la)ji'Pl]KRfoQ8rX?3R-pb#gu'pQ;nH#\fYA@o6:M!Mi"
%@;^E'NcE73^Cic]66F$s&3lra?5m&c\UXca\"0<.Qb>OB7(6;<^XsH>VF]!qA%\n:N\5)LFr)@jGK>-Eh-NqE9r>"MBGsi[&ZqAN
%>X[Vg\Mb@:5X<"M=bE+X0YiiGlP^\T\ErY*!P7O1q#Y=;H1"OV<cD43=k8/I]dH47V,?8#]DXlD^4M4$P1[p0`J$Jm!LGqt(_l1b
%mgrt7i[5&8(sb(X)%jJLVRbM*`0"^=`e&Nt-1a-hR>s1OE7*-uUN=UG2*TA&5PPp&U)`A2OuJ2:M0=M*J4EbnL*a=N'(dR\B:6&)
%BU<:[D@mJuc.iM'(lNj0-(9GNA5ef#$Q!)3.EgISHXBA[TuG^X;fu/1"'o2!7MlSXW+kIC<(06m*`l?pBL_GK<M[u-(%heJ'iU2c
%GsG7a@95m2%*sGk'?s9Wp@d#21a2iEG&r_7lL"dBGgL)CQIX^84%/%Q9.UW@pKfsIE:6@6m>>X:'qjJipY$cI"1btT6g0?[_hM7/
%j"["5?I(kkm0K80H()WW:I,"1<O@N!DE)r]g!u;HF).[5Ob8m9q=X4G]Z6LZXuh*>fNTEVlYK]u`L9c"38.NHP2$9c-]HAH"p%t`
%;2l/"-b`qC3sjWRN6dN_=i%Uhk,UKc&fi)CSZk;/1p\rP.KHK_`dmh;`\M]#=]3p>k-;RoaKM`]fnk5W2L0pQ;aNndlNZ&^o5[5D
%iiTXY\!QEuAN-2V?9#WD1qrhKWm"N=[+%oDn:%pU\$&ElLnBgc=5UZ^-?h20bq1T'D?'>.n%M:\kIAcN**+89UVP;UTn,Kr;B3fZ
%@ce.\aK'oPWMF=YH"Q+9q%jX]r=X(;(f_iJ<=-#HdS3.4ZhYHTR;hHu?+*!hJP`Pc7%46:n.bro_/gl:gGOSM&Y>SG!Bm309q)QR
%&VM/n]hV?R`s6,gJ09&&pd4YKn?\hq2])%Tj>Ds(>j:Z:oAr\*.j(g7(jfWK@:Q6P"Hao6W?O.U%>]L(/F_94+@a&EodrHP-c=lF
%M%O]sp\fjW+$6MEDDKSB>JM966%(Q8j&b.9&c_G'9*Z>Xlf,b<s87ePaK@.gYJ,;.'#NDt0-[dfragblmp8OlI</jHR9R".%,Q?_
%;]e([`m/VkY,s1HGHInm\@Ye-b3\N%s/(A?eMk\Ls"!?oR18_Q_\^47g`k&MYhVA$/ALYgp_Fjb#8C(h22Emd<=ThlUE1RsKY$kZ
%OJt>hfJSH)h(Jl1L-"h62bl!mRKI7;.>LoqKSXgi+Q)k3!\J_.5uh^-;^2(GWe`024gk7&WA*_+fR@*RDd'SV:c;suX<@S#.^?1N
%jgD@JRYfc'QKc<IZ%aqF[/\SEF/LtT2]Lt)DSU0;0E1M]nFbnlbkZT%&73%s$)'NV0-\&WpG+e=q;*%+0>I<h=]5dCF&h2nmTN\i
%\)3\6MYm,Ef@%hu)t5HNqY_B&/]Z?%#5gou?;M`rBH\in![A9l*Z\;HU]o5pV[\?,^f4`9R_Ne^?%1`Q2!%SjOPdpNj-^Ek?ELkc
%@+#>ehCc#1oV$l9_\KP.mAGGGdWldqNr>A;k:aZIA,bY%dOF;f9KHOt.#nf-4A<@])4*'UG)gZb\7Pc*70Qo\MkH3/Wc5#&_%$Mo
%Krp05AlLT<TSS8?\q$1YCo$b8d]+0.5mK!_LB/^,nWI5(k1h(uiRJG6.eS-.Eh-K;c>Y5A7N7Oj?eaN1_j,\@[^T'-_llZA?C,GJ
%'DtVIIJ(j3A;@&=/\Q6!`iW1q<KFX[ei3'KnD3/jY*Fs@[#>B]8rD<=HKRur7mJIGggCa%6"9%#+U91KU<r"$=;.A`YmDTLeLU*^
%1OdDJY.m+dMo^X/+3DUq#NV91/RiU0$I02S/g*U,_O_9%#.`8!.AOsUDI4>\DA%E.m-NCSqJh@Bb@J=J"p3[B$??Ssk;_D\G5k++
%h04q!R0fMOX2jh\K5l<Ri;>(p\>XG8]^U:`N!^)m8Aeg:P!dbK8.cie:=@/jnrS]Qe&1tno7><nn2MeJ-l\Y;Lf`ZR-M#*:iYlen
%!HS?p0eg:V6k21?RSj)@=#,Wc_ugCr+E7l]>`PR()[X(.%o65;NjCA][Kk%l6g(Nnfbja.V6=Nu`p5J8Lq,B;>Mc\CY)\(kpPf67
%NH^EcC(oDf'%6,.a5Y=kGb*=^lqgq>N42T=I'Y<e*BpfWZa/^3_n`iO?pb!HT.;Hh'N6VH!&nsn%_&]5fm'VujJloAi%(^2?Vk'e
%=6;4F98bj!CSi:lW!0#ZSmDNYH+kUuE!<jr"k-$#K:okDI@*V2&Q0s-"2F,I7rCNh':t(F;?8.<L+n\rU](KIm395Kn6Vc2ihI(@
%7>i2&4'\qd/?Qb9TBp4K'oo0\e'8>2+VKR#1f12,TJbRt<%lSV7=&g\[(KXc,jAMBWAWg91hRJ@oBe$R=0enTq),\X(aN*r9dO<1
%Rd=K0F]aA5%f76[%<C$fR=c<DfRZa2Z-TjNX?(+2-5q[kNXjVFP^EZ]'[=f$>'dF&Kjcc,Dakjk6.f+'1F'P'FPo`UAE=U0"ppE(
%OoCFR+D#5lJ>@#8WZM")U<kQ_pi7kDl"8m?ZA]#!nfGA+TK1-2<f2uJAhkuJ.7l5ITE59122FZ-YLO0S-ubd*]T/sH:s>+p#Ih:g
%dYGobak1/#WG8kIJ=Q`h*dkC;UiI#@2DPmO'@0PB.=%1_!WNV7c[h8BLT!T.A"1Q-FYk4^cZCEHb_DQ%#S-)hq/-Ch$W6)PDNH(*
%@u,>h3!-rj&*0@dng7:06^@s%;h]1d#jctT''Yf$Lr]"+5_H[&,5X9&R8G\RY"/&mU;ltlq(G5l?tC4'mm^W27)^!l[A$,_5Z&L7
%-ksV'1A:?LE6^npjkGopD&JF0,de/'p->esY.c6a]K$Zf%8hdgd>p9,\FOhN$XAu`$uf*nQ4SP(K[d1sjG5i=kcPfP!lR4QHi)DN
%'iD9Tobj&-:5Q7cE#]4<)KIm4%b'e/*Rj@PU-RIWS4F0IaU`^9<Q4()"6'][e][a#Q=7T9!mLTW6KO_P%Dd)CS9<aW$dFKg;8*s<
%1oc:q[r[4HMOFf'4gG]`,on9dE;mR,hN+S3BY&=^7nXsner.BbFB,WNg\aUt'!/G#1\G&*KcY.OB2SNKdKm&D)suj#;=]IPBHC5V
%k^G9J.(5-,_j)6of:#_If=#mopaO!mR3GoT"s_^-RQoasE\1].$s-cp"qqPi!jal%Ttol(lmA$!E-nDjC$"XmF_)tB+5=H/%p/Vu
%mur+a;k'kF7*%C.aL0hbJFrtHjXAVfhYIY6oL%UB'.SbENo(sbXh!R8fUn._JthtTPCV%`PmZRB+d,4tikUEWV#P5RQPIjq'%BCe
%*!^5W^qnfnA^R1"L##)^3VI>Z!uQ]I[PcaSR%-@//_>eWNYBKt;]5.",a-+;VJ'R]_ur_>jCrSa_"FE.Lf&ml'?F)X("q8+MJ%&.
%^t"X]M\1ihK\\O8AhO]QEqp;Lkb9J?;,iHW`Uj=P6^F5HX%FjO`;#bD;:l`!&@P_@U_P]FZV8F+feTdtos>`EnT%3J9Hh^BOQ:U;
%WgQ`_J\+`P*K+$D<E?LsBtHYkMnfBj5por)7/s#1S;Lh0f<gQS&sCAp$sS>#(!us,q5fb&d54HP(Ka5'b(sVLk'0]K9%S#_`+8&X
%d/l#cR!3r[*G"Y]#H(WZgs;Fo/!JT`<\17B(>8W$5,p'Y\Ao"e?m%<:P!eqrR&gm!\"jcCi=9]7m";N>T4JQ)6-#\72M-qiHZJ=[
%AlBDmp@@8,m*kS20#Tj=dqDk0&">^;4b^)17M@f6JXSnL3><4+p.V^0Z.8ZIHj.?[92'>\lH.PHai\).3\f<f4lKWYW1>.f4X6\m
%Q+EcbdE2sBPoNAR$6F&L*1(c"g<A+o*AAC:^o?R0YqlHKIikm1g9+c3`pcjR?q>,Z^D<*.'S^/\Y008T<2]ph7RB]iM]\(M>hnR$
%//tXP),T[;'KoJ]0tBh#9!Zr>+eQ(sDjHjlGWQT/n"0DFMIIUjmTgIW$Oc[Tb2S92C#?_fEkT*RQrB:SN/@no3"V<`79R1,5a<4?
%]<li,MUiq\.J9ADj9_\p#KrC]_TS*t5oSdE9T**8#a(@'PD'A:379]I6&LNT_jmch_k@E8k,o,&eKGmDc0YT0JgRj_3^GPnGd&fP
%:ZHC6K@_"&^_i%!4'mcZ-RZPRJ[o>l#/YOe7i9'#.-fb2UV.CQ4ef5!;ACj?p7t9*/%4u+R?T+*<p?,BO^nTO;H[FSY`!?*+ENL=
%#tlI]O?M2ZQ$DXV4S3->ojU`DeDep@&Lm&>)dlt7<3%ncjXo41X(jD2N8,I_cl,Q_>]!EZH6I]6Y?&o:(Moi2)u*'A3tDTk3XudM
%'oI\;(>>2gP&";@J:=&L.Oe#A9JB^Rn5]7`P2$fepdEIU/rHi0qp2#))]l"c@S7:",qc-.)hDiDmt0-)3:Y[(''@#?ld4"hT](Y8
%5n>YGFHs#bP#Q@[F/"B6(BaOg@a?--3:f6X7k\+-BCW'2obZKP['o%s`3sahA2U8VhVZ>`a[!m,d.;gX8(JZ5p!u;VQD&rs4:BeX
%+X)/J@('*3N!2/1C*Sq7T6%m.W(g1GG'78`:'JhNcBJNrI$gkO!Vf5=q3hoUA9bdAj^T3ba2=)@<;i`A'$OlQ]giUZpa$&A]k"#s
%KC%VZ?/!]X$>Mjss!73>RDo$(6_PE8V\)7\KH^h%D@TRl)8j'8lF-%9R&N'Al:0`s_@T4^BQ0X&JY&G:T7sk.6Y@9^8@C(5qofBk
%aHGW];A"]=N604fMF5_m$]5+k'FP1(En'h!k#[_D%/nMra43OLM;6kuDe4oe1NnCC:$u-Bh9#bra<:u>S4kQU0e,8Q?ErS]mU7TJ
%Vh[/^;A/TK@r%8*-YuMWHP@e!6P'bC()2Vn6&I&=\]MT9Ys1"^S9X(q*08bU%Q2>o>=[`_i#Uu:;MV@epgQYrmQ(UZoWl0k.MBn*
%&M#W#^H3`,LC,.o2<8+I+s<UN:XSk(i7?i.3QTGY>k`MgMV8]g1@18g84`K:l4IlR<9ScPVe!BSs.l/a%[Rl7&>6+T"0g$@S!eGh
%GT]\Sg76d\d^DH&Bl9-^)e/`OY+$V"#lb`[C9KqJert\1i*/)p6_JgLJRrlJ.q^ci!m]0>k1OEn$ZDi4n(0+GPGJU-1lV1'@IOZq
%W'`j=c>8r:6*/o_9jQr%jWo/blhGUkX*$RS]glFR$ZdZ>HYb!"KOIl/UKjQQ.Nqkmh*RR3L!!E<9sfaJg_gYA.>?(6e)1L*U3rr8
%Sn,"cRT334e-*V?8Mspik,+7$VC>&,G(FQ[KK_8^9rGQ]Pqgl!>pe(-eolbI.H1N/=P/0Q*luT_=(%=H0lh4;Yo61(cb:OPS,Q6/
%_W]4ZQ4p3B&@$k(WCsdn[-hgck5On6rW)N73n[0IlGCE`a8k:]dc+hDHA.kSP!r/;cO-nn,Slt"$I`t3pA/ji\c<B8f4+.6#=*Rb
%ekl?;IZ;s8+KPh_&j@fI<p3[\ITNm2*d)OL(R5ik!U_q3?%M]\XcQ008JG04e<3apLBUpcV*<(A":.WN/XAX9WbpQhe7QYAiH*]:
%(SXjLdOOA6*:=e_2VKa`#8paY4c'"i2Q(I7Ds$Ord2CrGM6&%4=CZst)GQWH?8NV"Fh=5;UY[XoiEqqP7o["VTcUUBZ+rO2RWsUG
%_bER6%72lgjFl5FY@#D(D)Wkpjo@]1=&keQOk'O1Bs;s'hd]*[im1XFN"K*aOcu$5Ee8qE'gp2ceN>BN0^lX'hbE+_O1bC0Hn_%i
%/d?8D';DHoS"]5IY.n2?Y2l#ROW*StShM\[c2Ln,kDgj.p`-@&TN#hE@H$k/>5Bap0_/>i*"])Hj/Y'jPE_B4mS5gj<0.FeHAZ#;
%$j+Snn,kd46`u_3Z8bf2KhCVhIc6LV;E#G:+ED:l>a(Dpd;'DK@d/o4c?gHNFM/QWOqk0YLSN:t/GiNscp$a,YpOm\KrOhlb]=pq
%.g]^QCsmSAL<M7J\G1M(3[_T+o8_lkOh65iW&:EcfYfPf6ph`mOMd=]of;\lP6_HNk+j*'kga;LMdVRB2Lo!'0onHS?cceY4_t.r
%DrlW=r8@d9M;0dccA^c]EdDB=?f]d3mlP+k+O<ChSbHZ?2F;7QaCSWi8EGh&d?(#';.%rFl8c]]K'YV#[-1El(Gq2$o4RUP(mSL[
%_lG!/HI0*#^2#iZ:(c=q.m'V\D3rf!k[_0A&N/m,*pF_fOlt.9=IK#'P@RRUV(Q_jPXPc6_'8?:rW+*_'t]'$@89[=?kW%)Artuu
%HL^=k@*nV0WuXEl7["Ftodd`'MZ%ZfN]p_)UnWr>J.%hTe";_!!do)L#'H22;I;;[`\,]`&h+Bkp,5MU8sasl[1)%AnjPIu;Ji$0
%3c)bsSM&$NnS2([84Tc,NF_qQ1M!OQFVgg5<f]%9T5#X;jEu,mb9(Bqa^oV\VZ+M_(sanT]YC6lh=N*m':!m>ipN5DrbrtLjO3D6
%9K&OFmj@(ajDqn-pk"-5:`bkHE,tc,kADR))m40G*K'fQ2),^)bo6tBP@<L4rK7@bc=3;$+;n0PEu9,n?MTh*f]+5E4B=]n-WH[1
%Q/t0F8;5gVK$/p#cNlgC@%O2_L/fC8X%%9jpA8^UK!,H66E>qoXP5pFb]l#<E3BCK[:"Ka=l/e`H6X4U6doJO)7:\Fr#A:RAeK59
%3(du;r60sk'-24h-sqSl8)DGWT,a8'G=CM:CI>sC!=s[hfO%qu1+MM-@"%[QV8gD90\j&mbu0c-6O\;L8`NVk=QPE\8e`b1!^>\@
%iI@.=LlR0?"Y-(9O'.6pBS#f]en4Q&k2PS6k6's>.32KrT3b3h6Y56J^p2\;i="LhO!#4b$.Bk^euVk!-E]<[k6uNO.3pJ!%23oq
%pDZXnZ4n9`!4htCU*`(>8J]6%&Z[\]YT>ofHR14<f4T7*3Nl183E(J)R).qS3+Qj.E'h(YK)qj5OfJXH@'-56dd^Z]>j-jb5?Ur#
%W=O*NaJf>o>Ks+/;^rufUc_q;O#OIj_)4W[HhrF5YhMo)]nTh@%G[W!:=\'DL1LOW7W&F;:Ar+]*D`sP>t<1SSZN%p4EE`KJAUM[
%7Ni^V\d2:_)bK/,8q]W_Z\YLlp[a3FkEQ4,1M%#9:*@?d0GtTH0/#h9TTtl'=C&"HLH$8\3'IVu6k%J.BtX8>$]?%BQW%;mn?-#r
%r3i$7CGo/5Wa$Mg:fdRG<C.M9\9TlCYa5c]#lUpk+fkVDBQch4W00r>jpD%Ca;KXO)B/rKTQuGFA[4%QO=8DLZ,?-g<CWG]A$fi`
%ar9LOH?-!9#Z-.8YVNjm1t0]=nntU@pnu'HJpS^PA!#-*cXO^).<g]8DFbh-5_>XB_\tPr$[!TsXbM::DS#rJYhZtB@qdK,8q9Xp
%V.,s"V#b=P[WV^#02=c;^@O7B&>RB2[>L;KKU*>kd5In_?<f@n4uH.LLdM;I_fYlfWaug,\%.WbkSc/<_s>f!Q(6kgeP+JS%%nLU
%N$GtrRHR+Q3D<+3#'1rW6T+t8g)+Xm@OEmko_rTe8&^^9U6Q]nF]>/7B/Quj<"qd$o3'8YWZkG08He>s-^=rTk(B)`):AL4H>kA2
%dd8XhDIGg5geN]Pe5[A!0Xjt$H=!7ANI%_59!2%f@W5.qRfSC'o:@"\1kB8ScuH#N#Td#WpX@,9.#Yan<=(64;JZu,)GNL%DS7/<
%JnO4Kk&$'9,)9>E&$+Z7=*8K#Ke/lT]C]^QB.^6B%77]t$&$?@/N^lWn7oj6p`^KXQT9rb=ff43/sc1in)q)]9e,SZa]9mlQo]N5
%K"kB*?0LKR:NI9VGEhn0?R#+B+NLdEkWr0k=l.Coom'BS-1FGDpd"),a1O`)<Sf5AYED7AkrrFia\W,1h"7nn:pVK*29<f#9@TXa
%)LlJblWh4Q"UA<9X3G_sB]X8#,Uq&Rp^45&0i?Z5/Gl^^1<&1GeY3N*,`C2A'a#g8m8m!e5Z-kQbh+*YCp7Aukrc+hk8*9geiU>L
%G4Qp()I1G5m>JL'U`:>.jeQ1/>o-MbC9[3="\XoJ6ok_!-g%Wk'TIX_LpbPE3*03c(_a5R/Kq0'0^.MV7Wndq2_3:dR?cEt0"=%E
%E_/(nY*8OaM.g!V,,XuA&4Y'N`Bs0N6\69&KMo@;/%;N6AVKNigUneX%lsTg?;nqF$r%oV(sCJ5KlG':-jm^@[VRqPoN`uJ%>HnN
%Fs<$A8eEAlX@R_UV/6<h@4em<Qo00m0KpQ:61BLGETY^/%^MFWRgZi$e-eX).jO9q'o&5W]aR\E^5+c&%F%I(dc%!IQLSm?HHulU
%I3uBiYurZ271-/k*5*+*k4GQ+`Z)--)fKM[DV<D-Z?93L:uQRh?47^9F2aGnW?puDd(*:'ZQ:`>%WO[CSZFRYCX%K4]%KDIVfiPj
%rpH(8b&6i:gP";G]%;0UEJlEQW0NpSDEg.>AV1t3YsoT^+e!rU'NL-9AfYBEGuB\?Xc#Op"jIf>fG.t2"*cfigQl_2<&/O5MRT-]
%b_s^H[$-Rt`&%UB0QKC9TMs.1p/Jd1"KLZ<jeLV6K3jn*_<a*Qk%SR6)iL9,C=oi.[>ie/-5Je$F$rj4T+^O/O,L"`qh'Yo>0[!c
%W!2,m9>#gB*EpI5J-H9`2kMR/)o/SRYJMTdp92<_/Ii-TUD,B:i5p%L7d5OmkcP&QTIk$;66lhu7&2<03idYW*e_AHK2Rhph9C\X
%6*q<YMOCd5R)O\T7:`hDq_7TCKPgUN<(U2mW^CO=W8U97Sp0^6keZ^$;sNNU4$-(=d'c#jeBe@fg-Z\tE_o"([H9\57_g^N.bh+$
%A!L>nV_NujVkT*NI<Degc<[H`?6o4:9/Ut6XQoWH[,roFBV@%,+XaiX8PgBiEl2KFHC0<%2<gUTAs(a'Cj"K'Q0pW5e>0k0FulaB
%@$0I":Qr:d`0M7Zp41#f<d)TTAA\.>H\WF9$jkpUOJVA.Y6?8;$#+kDp9#35-dfAfaFhbf,,]b$>4pLQn)YBo9$4;s\.0b/l4fVU
%$C;R4=W?E_HZ(OZZ-D-KcN/m0`V&WA-M<;U3IS)SZYo'n8)tQ1p3f/,/bt3QD_!G*70+:Raag#c+eqX72b1I2"X0nl,pU89eu4!s
%qO:M::Zae)`?Ri+(ffeF3-gUj(._](Nu;k:h2uL(9&J:!D0N?e\UVEA)BGf7MebR4oQHUt;4nshHeK+B8*'g)RssejSSr#>SI4#[
%qOMSbV0=f]]?VjiK0la7ooP)X06l.:9-Q1h)3FV-=.p^*kPTFH1ZdsF`L+%_8Ycp]`bhrnaZ<=a[]kcT**-'ujsp?]6r58E3&fV(
%obX;BH+`-G6WjD7dt=+C$e.Or@)%U'L&5LU.j)saWEZ@m^5'\?W1jk[>El)ugBEeOLfu1p`nF]r"i1X1EG!n6g<[`#^0>&b$Q#Xr
%P3XL8!qKu;oLfNOK0B,%-c:c,`s,=p@:hMj2*M1_`Tiqd."A']T61Gr=iiA(UM`E5(nL9IiQ]UBJ*bHOYNNG)(&;!.Gs(hFO@TZU
%1l.Ms6<4TDa;kt0(*;:rR0C($hD;>qWd>Cc**39K;&KqGL+i`&\LNqaKb"<J@nm?'>`,=KHdgZ+BmTDqSK.T*H]2sK=OT]'&s*XH
%n!;[E1gI]Z]/fWKO9<9XfP$MM_ns6LmNuqs,V8!D8V!@C\po;(PlT@9%gF@:DGN]40&SB`&JZk1U`V>NpK]%o(npP"iXKVEpD-?G
%VlCX/lJ:X,G[OdcZXV?<Dc%0f+>>.E3F'nG.L?="@&`4?X5YO&+J-JRSk"D@TkZ?RHurb0l@0E3)K'\N2ucHYZkACfXS:2fFf+<:
%-Z8,J7dW1a[WNq`>W20.--XVS_Zh$ULldK1Z7P=*OCSMsb;d4>g_8YL>Aj]4EWH8DO5-I3`;1!!C65oWD^NO<:#^SF6#+(XbUc;9
%&7f!IWW!;$+EQatB5J\t7?B]UF3Am'<H(G+2\tq%c[)p*S?eY3`/rmk/2bGg[KCi4?d%-T%.YBnlp9:V?MrZOfs_4)VF[Tpcla@s
%-r$ndb7GMnn1WafA/O9U"&2=+<3f>Klu8i>q%07b;Z5%<-#iQHhV()r\4S2ZlTgdRgP^hFr<HLL<!&o5DfaFFl%E/PYL<b).OhY+
%2e(k@^-gla.XU+oPo,VCi1G""\Nk*HD@7He:qN2+EMM_'d-P7?rth`Q(Z(rP0]\H>0c"t%p8!_EWDO$'7G*2o-#LK&D]*0iqf"QH
%T$L.$RlA.PcG1dDe;c`8*&flsN['<60MP-&O[dc*Rl0\HrbYGO)eF5FEiMkU1g)uq/jun):E>Tc40FF8(f"DMOmjdXN9YZ:D39>:
%/<B^T(N!"\'9jfA2/'?nX".<lNE`^@$f*#MS66%rWgAjZ_$Sjfd-?`gaab4f>(RNI2qTPsBGk=b_B#=q-&/*uXeY@dkO,!OJ8.H(
%#(\LI)#\SJF,+6:gG:Y4)J!fPOS[2)/>WO`+jpn:?/hZ#,#"4<s0=H\edX\i^Ed'jX/aKDMPgnCD-],"K&h;I#(+^U73om,7Vi>+
%oHdH\ckP%!)4GI%K3D%PO@:?*THoC.5u?k@9Tg2e?VmOAa?*^7=HTZqRP'`8Voke=Z]]]:e"A]@eeVLk#?L9@&]07PU,WbR)W[qA
%O:"JCrAo0hTS[IC.1Sqk\D"bo+.H@LJV`j(D*@DU4B:W_1Z/j/HtADbq/gLT#/A>Fd\p_)eO1o_fq66%l)BfLn/V-Hbk1s'RUnW<
%:*ScV9!VME<j\&ZEUer7NL@9*CC;CXDQ;-a0iN&QN%</kS8?g;I'"Zb,*?a,1l`>Hb9obU.t(H_DFgELB0C2f%ZIeX0n4[!%u)WK
%P>9kJjNq;6J1?F6l(K8F.=%jHFH?:$od[:[\5df.He"Mbb)P:!Q1fIsVsbtD]RUbM<0E_>Xlc25AYP#1)'Xg/?Ej`F34[EnU`ZR`
%0\Tha/n?=KI,UnFZh"EWQ"p+cmr/)Mi$V[7)icsKM3BB`/NZ?8Pl>,,pG<Xh_Bsq1+n2q[<!Lt]_BV6IT"XU/"I:kQc"+^g-%;UE
%QI^[]Xpl)=VAlUQ9#g(d#$!8<1+Yq?Ca#XTi?[&jUIa%[I`BTlg`=dKDP,ltQCJB=3jH08kJDl(]s?FG>L6u\E^WZWV2Nd\7%\"F
%b`&[r9GRr?0c.`T$s4!:!]YaW.ZgOc&;EGjIdqYC6rm@!dLeF3UUNd$,b[aC4bJXsk!i2U\q6GGTn[Z"%KM`f%M!\hX&0nf7=!E!
%%M$??&`6*W8is$u<U%,]F=BI"'V[j7=X$9;oIBD8=uD-91cgCbBD9;u@4S*Ecp3H[!3JLj429>OjT:n^#'nRmRen`rPN,`u)S'J<
%VmRbPVVXKlqZ5])$9JlT&?P,u[^\.+M!$kB`V,o3.anNe@=OX:Aftc?!OB[<UZ,[;d=k[GYCgHQphD-I#_os^jJ?Sn8[*`t>(qhf
%\o)!*H)*BL5tXBb,nr3S?s],:*=g!ma</>'%2//?3GPPp5bcS?AIE"%Ft=h<3'hDI:g0G#`:n)qADIWmO.rd+N>HA/<Dr*59@+I%
%*`:Jqc59Ih=Jqh0FZ\3WV!V;k7u9tI*:/EI>iT5<o8JJ+`G^j^;5-1P!:=;J,>j/@U`02/aZTWgX=B>XGJ;Qb]m%+ANM;]*e\hYH
%0atXo,$os$OR+Md!I4'f[P;e^K9N6iX_>ZO$UYQuMln6:Al0r=>)-(f19%ob%D%V!6-5W^HDmR(`3i1g4e5_NG789+CXn/E9pc?Q
%9RL&1TcU:#eB;a)_.`bFe%NqYS9.CrY4$^\]Gd?.]0Q]QY3_tI!i<f:9*p]p-Lb`k_Q&ESQ*@]mLPPs4&W/)*8:(GL,deGg^dpQj
%DDJQb=3QE;k^lStmPGrI6#^(B7]%!:%erDK'5o+#ECT@>Z1;ib6WDrJ=k">IX3_D:h%?9u:mW^>3CUb^9VL@J=WA+MeO7*&H!F82
%?30B%&o^V/lu#:tQQ't/UgDRYZ0J\S\>,'cce-)HKYqu;\2OkRKH+6lc7\RE2Ag)%IWf5@V'PJ!Z0m4sOb+u7Yl\!geRsGD.m==l
%.EqJoo!76kLp)DQ,F%R]"Duijk>l8FG,!oci`Vra]G4WXEW0;2pqVP%ej\3?30%h)KjbQO!7=g!/Queu0$$o.*<fBDdR0oT7ti/d
%AGj0,4!;_0+4=WfA4Ws=ZK;@_'N,OF9_6^Hnl9:(P1siE:,X@\Ve=dPEB<UsdkPLSE^&S/4!0]cou#$BdgXGo8EShR9.88C^pM1F
%b4Wi=p:>D_A9rZJA_[K`Z.15_`;gOf"%&j1-gXNE/6XQ^elR3'a+s>:g34QTQCkoY?`JC)mlaslZc`Jq#28C"$D?_T&HECs_9(LX
%L5S<c(r-DM-&pJ+$jj%TZj*f4bHEWC<IV)]\RfR>1F8o_?e"6o87rdRXYEQO2u.\5lk!;%VCJ`8T7ok'2`>[a<r#lXM25Pto7;?6
%030_G86PAf6+!..aV72Y]L4_g4"Ed](\]sGP!)kiN/Df6n_L+;'Hurr-.D0XamfGKJ6'<cNgF/'@)`^=g+ZP2W'Qf$#"TUlbZ<N`
%U:)\F@H-!RH=)qEN%k[h:3tp86U$83qJNSW%ipjMTEtO[=./m1ha^q5[\Y[tJ3+u(09pQ&7_Ls(M>OoIMb*Qn_eB+eZiugb0MLM)
%mqsEhP"6.>Vd,n8eM7SSk.mNb:i>6830@MiE&DAY)WUE8SX_\b?l?h,(#_2Ial4j*Wh/-ndj,W@7@N1+B4pE>=Nk`(%EM3878-rk
%Zfu+.OOu,:/l:V:dEX)BbM]m6cEHoi$,^D)r731H7@e>D+Z2cUN=Sat?Dn5u-$;LX^fDr-(QntGDQ-QGm:f\TIV"4prsJ*JT4Lsh
%BG$G-S4b,`ae5@!@TZaS;!a8ni5.1eq&ki6>hORDJb6Qh20ID>`8]Jb,PcF_g3h3%l#/Z[hjZ"0]J&'jQ)*uUTU/KqQX`A:5RFtr
%5+dtEZFnqcB5o3+=7,](ZMd-nIdY@&:Whi0m]hh?HqZ1c6E>jI78;h)1m-b&UJDgIOU$[j9LDRVSlFs<8CDkJ([,"$@Z"T@%X0qW
%(IbE?iW3d\*d%O#5LS,Oo7B/C-rR)+(4PlZ<59.&IF5`Lr`F[9j8q31(t#V50_'>IFbUK;\pg82bIbq+@jo*p_#>H"=14a5q!Q6A
%p8[M%\sN`2US9;eEt\:R2-,*q6jjp7<3)qGR7WP%3B"FLcuCBXDm.@f7AIfNP:`DHRWH'VPLEIokH'=A,OWm;^*!NhR'K$!+uH8h
%d2k@IFD_(rD.k<j07P=oif?_!=_"=X:!FF^;/R!Bjh\$t--/o]j>]`R%h]Jn9?L2gZr)0RAo$"RGq"W\>e,@#)-No5E;cn_2n2;C
%gjU5s&MT*C(5<Zh(924rfY5"Qb/._R,n63O'bY$dX+jtm.N&+\8@3n"@:Z"V)BMF]%DJ=iPD\XPNA)/g1=Q]6K#hsP1J>sjg+2F(
%'t0:3HK/VNf&^W3;)>7fcK[V1f5jF&Q_p.tHR+h+0Og.L@M*PGQ'J9*KMU<Qg0&-A$AtO]Oq\/C-e!?Y[__b3P%aXY_NWKidHZOM
%$%5ct/pTafW/E'AMd+^[W<dc7Y%kp)AcW2I(fG3Zb=6G.F/q,G-!!"X8^c5K"Y:R'+->'r&GcInYJ@tLd;-QpMmQ=cPf=b2*-sml
%OF^'i1nsgX#XkH=M6W"$HRK?al;i0;N)NaF((4)p\9j4/^Ata&Ot$dhZHA#%aZPJ?UP)+s:aQptI2(QjX`8?3UI"N/nFA,G(J9oK
%-+S@V)Z8]A&!'(J9ZiI[eaFrd9GmsrFsK%YaesfEd"&mOnl2f'6bMq:<J+PlMT95rBiq.S7i$BY:HIee&uqWX7q"SReTL"!CB_l3
%g&^FK+rI/"e90V";AUfU;MJaQ_D3lf78X-n%,1&@.<_7pQP8q0acVe1i?/B%*/%1Yo1LjT3f4=/kZtsmT\9Y&9V`W\1QfBE3Tk/)
%K<KuuR<c0Bc_\(e.OSN04_Zp&4]F1@\`]R-h*FtA0'Wj7YW?^k6d_=iPIbTTkW_U""8rH_!r@,*K+Q'mga6Qd(ctkmg!)#3/j!@/
%O^[nu3ET.#1B[@hc(,)h;sI%a38U(>X[V4aBYZf2Q*6Xm1CEP8+$(E5PlOjX7Iq'BP;QjBAi,d`5%Q?E9sC?%-(GQ2Rl07.EP7o.
%eCUe<,Y94$"(T"%RZq'&#V;q;(>:4)OdE*9Mkk's\@fZ(AVa$G5B?F>h6D8mllIeAC6ILUmb[g,\X[8mpEWnPS)J`rSQ?2;GlTob
%WGcjRmP[f"<S>J%;S^D.70CS<c1R:J?5)r1k?IeX\?T>F](c[2UC729T%l4i4E!HP%SV#">_8ul?SGVOocZb/r4'gQUn7ed$B>[N
%UJt;p\WU=b=j@M2aq\pe8Zmg+lnQ*FX'oa"dZotZjc*+Q9Dg!UHb]g.Z2fo/U_jQYGZT7:P^#<'9"]R=ht"b?D:Vudm]X@84qUXR
%r9gO4AJss,N:#_N9LlaDmt=)#a8;b[3dq%(7*WCAVkk+)]6@^n%_QdrSgn"0DL%^te\,/XC#>V2F+(\7<DW"O'/e(BoTiEir9/WW
%HV<6k>\+uU*rkiXJ*s42qsa@[2T,OiTB1RSWo!d=p8@qg@=Na1k2F';r*TK5H2,W;g->QY^\GEsXFDm.]hoD]S)QsmliSoL3gpo)
%iO(/8_$rQ#i4?$2oEm)T.6fCPLQM(^"?q<,Gli7M!YuF:7jR`"6dKESU&[M^cksm[X\_*sU]rR9[bm<od2<OLa:`oOg9GT>7coG[
%[22oUqdZe$e*\3I*bB"M6\e<<6Y6J,M1K6[CEX7Ms*J.9/B_cWL#`CS^1?1?PY;ng;(RuXJu^^a<i2Vu\J@VY.$?!6LaXrm7e'Y:
%D'L$6P&/8Z)!qGA@E)HRC_[`]mOB3k5`[Zf>UT"`p]Q[0-$FVS*4]WG"X=1?)'+l>j9?Nqnus>."r&P;Oq=N;9UXTGUa'XNT$9]Z
%(o2mdBd>fUrBt1U.jGYGW]3b7+Ir?>n`/UH,T?OP>(dk!@MB@rgcZ!Doa3//1>eA\3+OPTp;ODGH<]Q'p)fE#jao\7&3@Hr-BP<c
%%L.:j0n]Hn;S9iWe:&[kA`n/uRjcCHaY5;9(Qne,>!hn6fU!$\6$4K="a\*2N'bT?d3h4i[&Kg;#Jt45W@p7>/dO_Y#(;hl5.I[[
%TB!Mi;"9>l?*XeLVZiJ8A<4a1";0]'HkpkaMPTuXU#nnuRd'K2fQ217-<4NCYgF8tNZm[ccfN%>:nXcY-\;+dTUsu9e,fVCOa)>0
%A0jG&,fH'2U7E/88<dZ')1*QqcDc^l=&BouA?l(1\gXb`e)a-6XsVY^@n_oa]!-^j1lHD:(iX63)Kr]0XG6a&QuWh,%M[\'$,e7B
%l+7^DP_<d6U+[r'M.n0fP7/&&[fKUO!gl@+TqF]$NOA]fWg^jCW_\;JEB5;noR%If9jIX)V?Hd!6@O-?,\2SW--QImW206Y`Tbmm
%Uino@&1Rg(bt?h@<d!pfo//6;1%*&?R86F7U:*ce53U.>^aL`!,E8USUMO4/MIP+Td?PH3V&=A0=QIoO)E-;7CPC"Y,&/M/72au)
%E=o-6AjE!u>nSIR"A/pS5?,6pns0Et..:!NFg=8B<E]u_AA*_l]d"n!S0]/"3?Ggu=b9OJO@_dC+t.T0IP.-/M"cI`[DM*f>)l]C
%YufA=<,^%+k*22l$#JA;WPkstHI?CnkWKJKUuI%t6IMWH-pkD\Kb5lFUUD<Bb/"!!HVmt4cf;EeG#'8<lcVF'1#3>/Xp"ro(<N$Q
%n,sX6rmP@nOS4eS0;G]1*%H6DMf:aaj5l%Ko!/:kS=L&#+\Fj5j;$e!1g[0=%(=1k9#@(S=1.;*,E-lAFVjqCWFFQ?$W4Q&*E(.L
%D;?9:'s,cn))^jua9egmhjnHG=s'@/\9Hu-^Sbu4E38V<f5nPM*D7+CjaANgQ6n%;UCX;/i1aP"33XU0cnZ:Cg4oa-ErEO$@7sc(
%]+7=]RW'rX5XFTI_%[;6DaEMVXJe&>AOi.Cf+r.q,$kN7M@e'nc]=?=5<1pc)6GHc(YWJ>Z.pgPEH9b\K;ci!\sUp@#.L-<X^^S3
%\a+K0g_ed@L+.Nt3L!>n+Pd1tp&`M/>YuNf-tuRs*Ms7E<d,BVm&,+LjG64BC(uP]H<m4U4;Usu(@=t1Ep13Hm-`PhHhFQ6Nfj3`
%7>V`G*qO"UNDE!"T[LKI$1XM(Bm^\aoi<JuEhpR@W"m$Fl<Q%j'-k^,pd153e./IgQ@s$l4D7khoKh,.iPM#h0(b&)b:Xn=cA\Oc
%R3YFPp>MaP-c\!Wl?micQ=RpA3/iKT&p.n2E$&RNePgg3LR)p^coqpfBVn#G`G;Ih[pR0!(,.e\FW:YjX#.6gfg?.SN5UV=:]N9I
%F4uU(rB34VYPQn#EeT;OT<8";7Bg^]:>I4E7ZM.?qI"!fr<CN?>>ZD%5ZlY(Lu8XZ0t@]5BLCdfYTe*+KEN91#gUp'>)-u]qp6Jl
%h3kZl=8I8]kh=/YY?<):DoaXk,&GT*kt'Bk'nluNF=ko:2h"1\?/:Rk"*B]jaQ'TKI*L3jHn.N0XiRh*Ut3+@AogafM@?t5)hd.O
%W,$mWA9#YB3;1@o".)/64-6X,Gi,V5*GTER_]UY4hUf.GaS:u:@8K"Zd_lJE_m#e^*"830jl]UY->Op-AK2lqVhLjP5pF,po-s*h
%(M"D<("H^mjRpR#$Wm1NFr4Np)Z7]W+ff:dIG!JmnWe!Td:X!o9<M6HaIBP'F4aMmLCFg>^ci\3H#jfY`+VV=QD\]cf.geb`<e't
%2R#AME[5!RFJY%2L[3tE+\s*.h9G`0G6G:^?[m,bq^M9VS(Rt;raQ'0rZC/Zs7#u*T"b0tmsb'.lNVb0:Z)/pGQ6h:hu<?2],uLl
%GQ772Du]Ic_meNQ%p=AUDsa/<roJq(IfG2\rUAX\n,N')Ig1Lk`X?.%oah*"s7VAcqu6Y)>DYZ~>
%AI9_PrivateDataEnd
